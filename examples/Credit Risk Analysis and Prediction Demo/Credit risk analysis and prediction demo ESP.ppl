{"modelProp": {"changeIdentifier": "1", "libs": [{"import_name": "sklearn", "import_type": "from", "name": "scikit-learn", "version": "0.22"}, {"import_name": "scipy", "import_type": "from", "name": "scipy", "version": "1.4.1"}, {"import_name": "imblearn", "import_type": "from", "name": "imbalanced-learn", "version": "0.6.1"}], "onOpenDashId": "3775", "onOpenModel": "openDashboard"}, "nodeList": [{"color": null, "definition": "result = 0", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "credit_risk_analysis_prediction_demo_esp", "moduleId": "_model_", "nodeClass": "model", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Credit Risk Analysis and Prediction Demo ESP", "units": null, "w": "100", "x": 100, "y": 100, "z": 1}, {"color": null, "definition": "import numpy, pandas, cubepy, xarray, math, random, plotly.express, plotly.figure_factory, plotly.graph_objects\n\n#fill the following dict keys with the alias you need to import in each node\nresult = {\n    \"np\": numpy,\n    \"pd\": pandas,\n    \"cubepy\": cubepy,\n    \"xr\": xarray,\n    \"math\": math,\n    \"random\": random,\n    \"px\": plotly.express,\n    \"ff\": plotly.figure_factory,\n    \"go\": plotly.graph_objects\n}", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "imports", "moduleId": "pyplan_library", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Default imports", "units": null, "w": "184", "x": 103, "y": 190, "z": 1}, {"color": "#eeeeee", "definition": "result = 0", "description": "Demo de An\u00e1lisis y Predicci\u00f3n de Riesgo Crediticio", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "490", "identifier": "node1_copy_copy_copy", "moduleId": "credit_risk_analysis_prediction_demo_esp", "nodeClass": "text", "nodeFont": "Helvetica,21", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 1}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "554", "x": "30", "y": "39", "z": -1}, {"color": "#4CBCFF", "definition": "_data = original_new_data.copy()\n\n_data['sex'] = _data['sex'].map(mapa_sexo['English-Espa\u00f1ol'])\n_data['Housing'] = _data['Housing'].map(mapa_vivienda['English-Espa\u00f1ol'])\n_data['Saving accounts'] = _data['Saving accounts'].map(mapa_caja_ahorros['English-Espa\u00f1ol'])\n_data['Checking account'] = _data['Checking account'].map(mapa_cuenta_corriente['English-Espa\u00f1ol'])\n_data['Purpose'] = _data['Purpose'].map(mapa_destino_prestamo['English-Espa\u00f1ol'])\n_data['Risk'] = _data['Risk'].map(mapa_riesgo['English-Espa\u00f1ol'])\n\n# Add value column. Helps counting\n_data['value'] = 1.\n\n# Add Age category column\n_interval = (17, 25, 35, 60, 120)\n_age_categories = ['Estudiante', 'Joven', 'Adulto', 'Mayor']\n_data['Age category'] = pd.cut(_data['Age'], _interval, labels = _age_categories)\n\n# Add Job category column (description from the numerical Job column)\n_job_categories = {\n    'Job': [0, 1, 2, 3],\n    'Job category': ['0- sin estudios y no residente', '1- sin estudios y residente', '2- con estudios', '3- altamente capacitado']\n}\n_job_categories_df = pd.DataFrame(_job_categories)\n_data = _data.merge(_job_categories_df, on = 'Job', how = 'left')\n\n_data['Saving accounts'] = _data['Saving accounts'].fillna('sin info')\n_data['Checking account'] = _data['Checking account'].fillna('sin info')\n\nresult = _data", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "data", "moduleId": "data_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Datos(con nuevas columnas y pr\u00e9stamos)", "units": null, "w": "184", "x": 496, "y": 191, "z": 1}, {"color": "#CCCCCC", "definition": "# Exploring data\n_description = data.describe()\nprint(f\"Description:\\n {_description}\\n\")\n\n# Unique values for each field\n_unique_values = data.nunique()\nprint(f\"Unique values:\\n {_unique_values}\")", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "data_info", "moduleId": "data_exploration_analysis_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Informaci\u00f3n de Datos", "units": null, "w": "184", "x": "71", "y": "153", "z": 1}, {"color": "#CCCCCC", "definition": "_fig = ff.create_distplot(\r\n    [bad_credits['Age'], good_credits['Age'], data['Age']],\r\n    ['Malo','Bueno','Total'],\r\n    bin_size = [2, 2, 2],\r\n    show_rug = False,\r\n    colors = [bad_credits_color, good_credits_color, '#A4C2F4']\r\n)\r\n\r\nresult = plot(_fig)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "age_risk_distribution_plotly", "moduleId": "data_exploration_analysis_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Distribuci\u00f3n del Riesgo por Edad", "units": null, "w": "184", "x": "333", "y": "298", "z": 1}, {"color": "#cccccc", "definition": "result = 0", "description": "Datos", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "126", "identifier": "node1_copy_copy_copy_copy", "moduleId": "credit_risk_analysis_prediction_demo_esp", "nodeClass": "text", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "256", "x": "46", "y": "77", "z": -1}, {"color": "#cccccc", "definition": "result = 0", "description": "Risk Distribution (Count)", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "260", "identifier": "node1_copy_copy_copy_copy_copy", "moduleId": "data_exploration_analysis_mod", "nodeClass": "text", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "488", "x": "299", "y": "216", "z": -1}, {"color": "#cccccc", "definition": "result = 0", "description": "Risk Distribution by Credit Amount", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "260", "identifier": "node1_copy_copy_copy_copy_copy_copy", "moduleId": "data_exploration_analysis_mod", "nodeClass": "text", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "488", "x": "299", "y": "488", "z": -1}, {"color": "#CCCCCC", "definition": "_fig = {\r\n    \"data\": [\r\n        {\r\n            \"type\": 'violin',\r\n            \"x\": good_credits['Housing'],\r\n            \"y\": good_credits['Credit amount'],\r\n            \"legendgroup\": 'Bueno',\r\n            \"scalegroup\": 'No',\r\n            \"name\": 'Bueno',\r\n            \"side\": 'negative',\r\n            \"box\": {\r\n                \"visible\": True\r\n            },\r\n            \"meanline\": {\r\n                \"visible\": True\r\n            },\r\n            \"line\": {\r\n                \"color\": good_credits_color\r\n            }\r\n        },\r\n        {\r\n            \"type\": 'violin',\r\n            \"x\": bad_credits['Housing'],\r\n            \"y\": bad_credits['Credit amount'],\r\n            \"legendgroup\": 'Malo',\r\n            \"scalegroup\": 'No',\r\n            \"name\": 'Malo',\r\n            \"side\": 'positive',\r\n            \"box\": {\r\n                \"visible\": True\r\n            },\r\n            \"meanline\": {\r\n                \"visible\": True\r\n            },\r\n            \"line\": {\r\n                \"color\": bad_credits_color\r\n            }\r\n        }\r\n    ],\r\n    \"layout\" : {\r\n        \"yaxis\": {\r\n            \"zeroline\": False,\r\n        },\r\n        \"violingap\": 0,\r\n        \"violinmode\": \"overlay\",\r\n        \"legend\": {'orientation': 'h'}\r\n    }\r\n}\r\n\r\nresult = plot(_fig)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "credit_amount_distribution_by_housing_plotly", "moduleId": "data_exploration_analysis_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Distribuci\u00f3n del Monto del Pr\u00e9stamo por Vivienda", "units": null, "w": "184", "x": "333", "y": "572", "z": 1}, {"color": "#4CBCFF", "definition": "# Slice dataframe\nresult = data[data[\"Risk\"] == 'bueno']", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "good_credits", "moduleId": "data_exploration_analysis_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Pr\u00e9stamos Buenos", "units": null, "w": "184", "x": "333", "y": "110", "z": 1}, {"color": "#cccccc", "definition": "result = 0", "description": "Pr\u00e9stamos Buenos / Malos", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "126", "identifier": "node1_copy_copy_copy_copy_copy_copy_copy", "moduleId": "data_exploration_analysis_mod", "nodeClass": "text", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "238", "x": "299", "y": "77", "z": -1}, {"color": "#4CBCFF", "definition": "# Slice dataframe\nresult = data[data[\"Risk\"] == 'malo']", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "bad_credits", "moduleId": "data_exploration_analysis_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Pr\u00e9stamos Malos", "units": null, "w": "184", "x": "333", "y": "153", "z": 1}, {"color": "#CCCCCC", "definition": "_data = data.rename(columns = mapa_columnas['English-Espa\u00f1ol'])\n\n_dimensions = ['Vivienda', 'Edad', 'Categor\u00eda de Edad', 'sex', 'Categor\u00eda de Trabajo', 'Destino del Pr\u00e9stamo', 'Cuenta Corriente', 'Riesgo']\n_columns = _dimensions + ['value']\n\n# Data aggregation\nresult = _data[_columns].groupby(by = _dimensions).agg('count')", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "risk_distribution_count", "moduleId": "data_exploration_analysis_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Distribuci\u00f3n del Riesgo (cuenta)", "units": null, "w": "184", "x": "333", "y": "255", "z": 1}, {"color": "#CCCCCC", "definition": "_trace0 = go.Box(\r\n    x = good_credits[\"sex\"],\r\n    y = good_credits[\"Credit amount\"],\r\n    name = 'Bueno',\r\n    marker = dict(color = good_credits_color)\r\n)\r\n\r\n_trace1 = go.Box(\r\n    x = bad_credits[\"sex\"],\r\n    y = bad_credits[\"Credit amount\"],\r\n    name = 'Malo',\r\n    marker = dict(color = bad_credits_color)\r\n)\r\n\r\n_data = [_trace0, _trace1]\r\n\r\n_layout = go.Layout(\r\n    boxmode = 'group',\r\n    legend = dict(orientation = 'h')\r\n)\r\n\r\n_fig = go.Figure(_data, _layout)\r\n\r\nresult = plot(_fig)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "credit_amount_distribution_by_sex_plotly", "moduleId": "data_exploration_analysis_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Dist del Monto del Pr\u00e9stamo por Sexo", "units": null, "w": "184", "x": "333", "y": "615", "z": 1}, {"color": "#CCCCCC", "definition": "_sorted_age_categories = ['Estudiante', 'Joven', 'Adulto', 'Mayor']\n\n_trace0 = go.Box(\n    y = good_credits['Credit amount'],\n    x = good_credits['Age category'],\n    name = 'Bueno',\n    marker = dict(color = good_credits_color)\n)\n\n_trace1 = go.Box(\n    y = bad_credits['Credit amount'],\n    x = bad_credits['Age category'],\n    name = 'Malo',\n    marker = dict(color = bad_credits_color)\n)\n    \n_data = [_trace0, _trace1]\n\n_layout = go.Layout(\n    xaxis = dict(categoryorder = \"array\", categoryarray = _sorted_age_categories),\n    boxmode = 'group',\n    legend = dict(orientation = 'h')\n)\n\n_fig = go.Figure(_data, layout = _layout)\n\nresult = plot(_fig)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "credit_amount_distribution_by_age_plotly", "moduleId": "data_exploration_analysis_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Distribuci\u00f3n del Monto del Pr\u00e9stamo por Edad", "units": null, "w": "184", "x": "333", "y": "529", "z": 1}, {"color": "#CCCCCC", "definition": "# To sort x axis\r\n_sorted_job_categories = np.sort(data['Job category'].unique()).tolist()\r\n\r\n_trace0 = go.Box(\r\n    x = good_credits[\"Job category\"],\r\n    y = good_credits[\"Credit amount\"],\r\n    name = 'Bueno',\r\n    marker = dict(color = good_credits_color)\r\n)\r\n\r\n_trace1 = go.Box(\r\n    x = bad_credits['Job category'],\r\n    y = bad_credits['Credit amount'],\r\n    name = 'Malo',\r\n    marker = dict(color = bad_credits_color)\r\n)\r\n    \r\n_data = [_trace0, _trace1]\r\n\r\n_layout = go.Layout(\r\n    xaxis = dict(\r\n        # Order X-axis alphabetically\r\n        categoryorder = \"array\",\r\n        categoryarray = _sorted_job_categories\r\n    ),\r\n    boxmode = 'group',\r\n    legend = dict(orientation = 'h')\r\n)\r\n\r\n_fig = go.Figure(_data, _layout)\r\n\r\nresult = plot(_fig)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "credit_amount_distribution_by_job_plotly", "moduleId": "data_exploration_analysis_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Distribuci\u00f3n del Monto del Pr\u00e9stamo por Trabajo", "units": null, "w": "184", "x": "333", "y": "658", "z": 1}, {"color": "#CCCCCC", "definition": "# To sort x axis\r\n_sorted_job_categories = np.sort(data['Job category'].unique()).tolist()\r\n\r\n_fig = {\r\n    \"data\": [\r\n        {\r\n            \"type\": 'violin',\r\n            \"x\": good_credits['Job category'],\r\n            \"y\": good_credits['Age'],\r\n            \"legendgroup\": 'Bueno',\r\n            \"scalegroup\": 'No',\r\n            \"name\": 'Bueno',\r\n            \"side\": 'negative',\r\n            \"box\": {\r\n                \"visible\": True\r\n            },\r\n            \"meanline\": {\r\n                \"visible\": True\r\n            },\r\n            \"line\": {\r\n                \"color\": good_credits_color\r\n            }\r\n        },\r\n        {\r\n            \"type\": 'violin',\r\n            \"x\": bad_credits['Job category'],\r\n            \"y\": bad_credits['Age'],\r\n            \"legendgroup\": 'Malo',\r\n            \"scalegroup\": 'No',\r\n            \"name\": 'Malo',\r\n            \"side\": 'positive',\r\n            \"box\": {\r\n                \"visible\": True\r\n            },\r\n            \"meanline\": {\r\n                \"visible\": True\r\n            },\r\n            \"line\": {\r\n                \"color\": bad_credits_color\r\n            }\r\n        }\r\n    ],\r\n    \"layout\" : {\r\n        \"xaxis\": {\r\n            # Order X-axis alphabetically\r\n            \"categoryorder\": \"array\",\r\n            \"categoryarray\": _sorted_job_categories\r\n        },\r\n        \"yaxis\": {\r\n            \"zeroline\": False,\r\n        },\r\n        \"violingap\": 0,\r\n        \"violinmode\": \"overlay\",\r\n        #\"title\": 'Risk Distribution by Age and Job',\r\n        \"legend\": {'orientation': 'h'}\r\n    }\r\n}\r\n\r\nresult = plot(_fig)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "age_job_risk_distribution_plotly", "moduleId": "data_exploration_analysis_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Distribuci\u00f3n del Riesgo por Edad y Trabajo", "units": null, "w": "184", "x": "333", "y": "341", "z": 1}, {"color": "#CCCCCC", "definition": "_bad = np.log(bad_credits['Credit amount'])\r\n_good = np.log(good_credits['Credit amount'])\r\n_hist_data = [_bad, _good]\r\n\r\n_group_labels = ['Malo', 'Bueno']\r\n\r\n_fig = ff.create_distplot(_hist_data, _group_labels, bin_size = [.2, .2], show_rug = False, colors = [bad_credits_color, good_credits_color])\r\n\r\nresult = plot(_fig)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "credit_amount_risk_distribution_log_plotly", "moduleId": "data_exploration_analysis_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Distribuci\u00f3n del Monto del Pr\u00e9stamo (log)", "units": null, "w": "184", "x": "333", "y": "701", "z": 1}, {"color": "#CCCCCC", "definition": "_hist_data = [bad_credits['Credit amount'], good_credits['Credit amount']]\r\n\r\n_group_labels = ['Malo', 'Bueno']\r\n\r\n_fig = ff.create_distplot(_hist_data, _group_labels, bin_size = [250, 250], show_rug = False, colors = [bad_credits_color, good_credits_color])\r\n_fig['layout'].update(legend = dict(orientation = 'h'))\r\n\r\nresult = plot(_fig)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "credit_amount_risk_distribution_plotly", "moduleId": "data_exploration_analysis_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Distribuci\u00f3n del Riesgo por Monto del Pr\u00e9stamo", "units": null, "w": "184", "x": "579", "y": "529", "z": 1}, {"color": "#CCCCCC", "definition": "# To sort x axis\r\n_sorted_saving_accounts_categories = ['peque\u00f1a', 'moderada', 'alta', 'muy alta']\r\n\r\n_trace0 = go.Box(\r\n    x = good_credits[\"Saving accounts\"],\r\n    y = good_credits[\"Credit amount\"],\r\n    name = 'Bueno',\r\n    marker = dict(color = good_credits_color)\r\n)\r\n\r\n_trace1 = go.Box(\r\n    x = bad_credits[\"Saving accounts\"],\r\n    y = bad_credits[\"Credit amount\"],\r\n    name = 'Malo',\r\n    marker = dict(color = bad_credits_color)\r\n)\r\n\r\n_data = [_trace0, _trace1]\r\n\r\n_layout = go.Layout(\r\n    xaxis = dict(\r\n        # Order X-axis alphabetically\r\n        categoryorder = \"array\",\r\n        categoryarray = _sorted_saving_accounts_categories\r\n    ),\r\n    boxmode = 'group',\r\n    legend = dict(orientation = 'h')\r\n)\r\n\r\n_fig = go.Figure(_data, _layout)\r\n\r\nresult = plot(_fig)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "credit_amount_distribution_by_savings_account_plotly", "moduleId": "data_exploration_analysis_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Distribuci\u00f3n del Riesgo por Monto del Pr\u00e9stamo y Caja de Ahorros", "units": null, "w": "184", "x": 579, "y": 617, "z": 1}, {"color": "#CCCCCC", "definition": "# To sort x axis\r\n_sorted_saving_accounts_categories = ['peque\u00f1a', 'moderada', 'alta', 'muy alta']\r\n\r\n_trace0 = go.Box(\r\n    x = good_credits[\"Saving accounts\"],\r\n    y = good_credits[\"Age\"],\r\n    name = 'Bueno',\r\n    marker = dict(color = good_credits_color)\r\n)\r\n\r\n_trace1 = go.Box(\r\n    x = bad_credits[\"Saving accounts\"],\r\n    y = bad_credits[\"Age\"],\r\n    name = 'Malo',\r\n    marker = dict(color = bad_credits_color)\r\n)\r\n\r\n_data = [_trace0, _trace1]\r\n\r\n_layout = go.Layout(\r\n    xaxis = dict(\r\n        # Order X-axis alphabetically\r\n        categoryorder = \"array\",\r\n        categoryarray = _sorted_saving_accounts_categories\r\n    ),\r\n    boxmode = 'group',\r\n    legend = dict(orientation = 'h')\r\n)\r\n\r\n_fig = go.Figure(_data, _layout)\r\n\r\nresult = plot(_fig)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "savings_account_by_age_plotly", "moduleId": "data_exploration_analysis_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Distribuci\u00f3n del Riesgo por Edad y Caja de Ahorros", "units": null, "w": "184", "x": "333", "y": "384", "z": 1}, {"color": "#CCCCCC", "definition": "_fig = {\r\n    \"data\": [\r\n        {\r\n            \"type\": 'violin',\r\n            \"x\": good_credits['Purpose'],\r\n            \"y\": good_credits['Age'],\r\n            \"legendgroup\": 'Bueno',\r\n            \"scalegroup\": 'No',\r\n            \"name\": 'Bueno',\r\n            \"side\": 'negative',\r\n            \"box\": {\r\n                \"visible\": True\r\n            },\r\n            \"meanline\": {\r\n                \"visible\": True\r\n            },\r\n            \"line\": {\r\n                \"color\": good_credits_color\r\n            }\r\n        },\r\n        {\r\n            \"type\": 'violin',\r\n            \"x\": bad_credits['Purpose'],\r\n            \"y\": bad_credits['Age'],\r\n            \"legendgroup\": 'Malo',\r\n            \"scalegroup\": 'No',\r\n            \"name\": 'Malo',\r\n            \"side\": 'positive',\r\n            \"box\": {\r\n                \"visible\": True\r\n            },\r\n            \"meanline\": {\r\n                \"visible\": True\r\n            },\r\n            \"line\": {\r\n                \"color\": bad_credits_color\r\n            }\r\n        }\r\n    ],\r\n    \"layout\" : {\r\n        \"yaxis\": {\r\n            \"zeroline\": False,\r\n        },\r\n        \"violingap\": 0,\r\n        \"violinmode\": \"overlay\",\r\n        #\"title\": 'Risk Distribution by Age and Purpose',\r\n        \"legend\": {'orientation': 'h'}\r\n    }\r\n}\r\n\r\nresult = plot(_fig)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "purpose_by_age_plotly", "moduleId": "data_exploration_analysis_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Distribuci\u00f3n del Riesgo por Edad y Destino del Pr\u00e9stamo", "units": null, "w": "184", "x": "333", "y": "428", "z": 1}, {"color": "#CCCCCC", "definition": "_trace0 = go.Box(\r\n    x = good_credits[\"Purpose\"],\r\n    y = good_credits[\"Credit amount\"],\r\n    name = 'Bueno',\r\n    marker = dict(color = good_credits_color)\r\n)\r\n\r\n_trace1 = go.Box(\r\n    x = bad_credits[\"Purpose\"],\r\n    y = bad_credits[\"Credit amount\"],\r\n    name = 'Malo',\r\n    marker = dict(color = bad_credits_color)\r\n)\r\n\r\n_data = [_trace0, _trace1]\r\n\r\n_layout = go.Layout(\r\n    boxmode = 'group',\r\n    legend = dict(orientation = 'h')\r\n)\r\n\r\n_fig = go.Figure(_data, _layout)\r\n\r\nresult = plot(_fig)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "credit_amount_distribution_by_purpose_plotly", "moduleId": "data_exploration_analysis_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Distribuci\u00f3n del Riesgo por Monto y Destino del Pr\u00e9stamo", "units": null, "w": "184", "x": 579, "y": 658, "z": 1}, {"color": "#CCCCCC", "definition": "_fig = ff.create_distplot(\r\n    [bad_credits['Duration'], good_credits['Duration']],\r\n    ['Malo','Bueno'],\r\n    bin_size = [3, 1],\r\n    show_rug = False,\r\n    colors = [bad_credits_color, good_credits_color]\r\n)\r\n_fig['layout'].update(legend = dict(orientation = 'h'))\r\n\r\nresult = plot(_fig)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "duration_risk_distribution_plotly", "moduleId": "data_exploration_analysis_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Distribuci\u00f3n del Riesgo por Duraci\u00f3n del Pr\u00e9stamo", "units": null, "w": "184", "x": "579", "y": "255", "z": 1}, {"color": "#CCCCCC", "definition": "_sorted_checking_account_categories = ['peque\u00f1a', 'moderada', 'muy alta']\r\n\r\n_trace0 = go.Box(\r\n    x = good_credits[\"Checking account\"],\r\n    y = good_credits[\"Credit amount\"],\r\n    name = 'Bueno',\r\n    marker = dict(color = good_credits_color)\r\n)\r\n\r\n_trace1 = go.Box(\r\n    x = bad_credits[\"Checking account\"],\r\n    y = bad_credits[\"Credit amount\"],\r\n    name = 'Malo',\r\n    marker = dict(color = bad_credits_color)\r\n)\r\n\r\n_data = [_trace0, _trace1]\r\n\r\n_layout = go.Layout(\r\n    boxmode = 'group',\r\n    legend = dict(orientation = 'h'),\r\n    xaxis = dict(\r\n        # Order X-axis alphabetically\r\n        categoryorder = \"array\",\r\n        categoryarray = _sorted_checking_account_categories\r\n        )\r\n)\r\n\r\n_fig = go.Figure(_data, _layout)\r\n\r\nresult = plot(_fig)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "credit_amount_distribution_by_checking_account_plotly", "moduleId": "data_exploration_analysis_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Distribuci\u00f3n del Riesgo por Monto del Pr\u00e9stamo y Cuenta Corriente", "units": null, "w": "184", "x": 579, "y": 701, "z": 1}, {"color": "#CCCCCC", "definition": "_sorted_checking_account_categories = ['peque\u00f1a', 'moderada', 'muy alta']\r\n\r\n_fig = {\r\n    \"data\": [\r\n        {\r\n            \"type\": 'violin',\r\n            \"x\": good_credits['Checking account'],\r\n            \"y\": good_credits['Age'],\r\n            \"legendgroup\": 'Bueno',\r\n            \"scalegroup\": 'No',\r\n            \"name\": 'Bueno',\r\n            \"side\": 'negative',\r\n            \"box\": {\r\n                \"visible\": False\r\n            },\r\n            \"meanline\": {\r\n                \"visible\": True\r\n            },\r\n            \"line\": {\r\n                \"color\": good_credits_color\r\n            }\r\n        },\r\n        {\r\n            \"type\": 'violin',\r\n            \"x\": bad_credits['Checking account'],\r\n            \"y\": bad_credits['Age'],\r\n            \"legendgroup\": 'Malo',\r\n            \"scalegroup\": 'No',\r\n            \"name\": 'Malo',\r\n            \"side\": 'positive',\r\n            \"box\": {\r\n                \"visible\": False\r\n            },\r\n            \"meanline\": {\r\n                \"visible\": True\r\n            },\r\n            \"line\": {\r\n                \"color\": bad_credits_color\r\n            }\r\n        }\r\n    ],\r\n    \"layout\" : {\r\n        \"yaxis\": {\r\n            \"zeroline\": False,\r\n        },\r\n        \"violingap\": 0,\r\n        \"violinmode\": \"overlay\",\r\n        \"legend\": {'orientation': 'h'},\r\n        \"xaxis\": {\r\n            \"categoryorder\" : \"array\",\r\n            \"categoryarray\" : _sorted_checking_account_categories\r\n        }\r\n    }\r\n}\r\n\r\nresult = plot(_fig)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "checking_account_by_age_plotly", "moduleId": "data_exploration_analysis_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Distribuci\u00f3n del Riesgo por Cuenta Corriente", "units": null, "w": "184", "x": 579, "y": 341, "z": 1}, {"color": "#4CBCFF", "definition": "# Split data. Keeps all columns but 'Risk_bad' (target)\nresult = normalized_data.drop('Risk_malo', 1).values", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "x_variable", "moduleId": "machine_learning_training_and_test_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Variable X", "units": null, "w": "184", "x": "349", "y": "114", "z": 1}, {"color": "#4CBCFF", "definition": "# Split data. Keeps 'Risk_bad' column (target)\nresult = normalized_data['Risk_malo'].values", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "y_variable", "moduleId": "machine_learning_training_and_test_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Variable Y", "units": null, "w": "184", "x": "349", "y": "158", "z": 1}, {"color": "#CB98FF", "definition": "from sklearn.ensemble import RandomForestClassifier\r\n\r\n# Create classifier\r\n_model = RandomForestClassifier(n_estimators = parameters_rfm['n_estimators'], max_features = parameters_rfm['max_features'], max_depth = parameters_rfm['max_depth'], random_state = fixed_random_state)\r\n\r\n# Fit model\r\nresult = _model.fit(x_train, y_train)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "random_forest_method", "moduleId": "random_forest_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "M\u00e9todo Random Forest", "units": null, "w": "184", "x": "327", "y": "495", "z": 1}, {"color": "#CB98FF", "definition": "from sklearn.linear_model import LogisticRegression\r\n\r\n# Create model\r\n_model = LogisticRegression(random_state = fixed_random_state, solver = 'liblinear', penalty = parameters_lrm['penalty'], C = parameters_lrm['C'])\r\n\r\n# Fit model\r\nresult = _model.fit(x_train, y_train)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "logistic_regression_method", "moduleId": "logistic_regression_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "M\u00e9todo Regresi\u00f3n Log\u00edstica", "units": null, "w": "184", "x": "327", "y": "498", "z": 1}, {"color": "#4CBCFF", "definition": "from sklearn.model_selection import train_test_split\n\n# Convert test size to float\n_test_size = test_size_input.values.tolist()[0]\n\n# Split X and Y into train and test version\n_x_train, _x_test, _y_train, _y_test = train_test_split(x_variable, y_variable, test_size = _test_size, random_state = fixed_random_state)\n\n# Create dictionary with the four tables\nresult = {'x_train': _x_train, 'x_test': _x_test, 'y_train': _y_train, 'y_test': _y_test}", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "train_test_array", "moduleId": "machine_learning_training_and_test_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Matrices de Entrenamiento / Testeo", "units": null, "w": "184", "x": "566", "y": "158", "z": 1}, {"color": "#4CBCFF", "definition": "# Get values of the 'x_train' key\n#result = train_test_array['x_train']\nresult = train_arrays_smote['os_smote_x']", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "x_train", "moduleId": "machine_learning_training_and_test_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Entrenamiento X", "units": null, "w": "184", "x": "566", "y": "199", "z": 1}, {"color": "#4CBCFF", "definition": "# Get values of the 'y_train' key\n#result = train_test_array['y_train']\nresult = train_arrays_smote['os_smote_y']", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "y_train", "moduleId": "machine_learning_training_and_test_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Entrenamiento Y", "units": null, "w": "184", "x": "566", "y": "240", "z": 1}, {"color": "#CCCCCC", "definition": "from sklearn.metrics import accuracy_score\n\nresult = accuracy_score(y_test, model_prediction_rfm)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "accuracy_rfm", "moduleId": "random_forest_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Exactitud - Random Forest", "units": null, "w": "184", "x": "327", "y": "580", "z": 1}, {"color": "#CCCCCC", "definition": "from sklearn.metrics import confusion_matrix\n\n_cm = confusion_matrix(y_test, model_prediction_rfm)\n\n# Create DataArray from confusion matrix, replacing 0 and 1 index by 'Good' and 'Bad'\nresult = xr.DataArray(_cm, coords = {'Real': ['Real - Bueno', 'Real - Malo'], 'Previsto': ['Previsto - Bueno', 'Previsto - Malo']}, dims = ['Real', 'Previsto'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "confusion_matrix_rfm", "moduleId": "random_forest_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Matriz de Confusi\u00f3n - Random Forest", "units": null, "w": "184", "x": "327", "y": "663", "z": 1}, {"color": "#CCCCCC", "definition": "from sklearn.metrics import classification_report\n\nresult = classification_report(y_test, model_prediction_rfm, target_names = ['bueno', 'malo'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "classification_report_rfm", "moduleId": "random_forest_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Reporte de Clasificaci\u00f3n - Random Forest", "units": null, "w": "184", "x": "327", "y": "705", "z": 1}, {"color": "#CCCCCC", "definition": "from sklearn.metrics import accuracy_score\n\nresult = accuracy_score(y_test, model_prediction_lrm)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "accuracy_lrm", "moduleId": "logistic_regression_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Exactitud- Regresi\u00f3n Log\u00edstica", "units": null, "w": "184", "x": "327", "y": "584", "z": 1}, {"color": "#CCCCCC", "definition": "from sklearn.metrics import confusion_matrix\n\n_cm = confusion_matrix(y_test, model_prediction_lrm)\n\n# Create DataArray from confusion matrix, replacing 0 and 1 index by 'Good' and 'Bad'\nresult = xr.DataArray(_cm, coords = {'Real': ['Real - Bueno', 'Real - Malo'], 'Previsto': ['Previsto - Bueno', 'Previsto - Malo']}, dims = ['Real', 'Previsto'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "confusion_matrix_lrm", "moduleId": "logistic_regression_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Matriz de Confusi\u00f3n - Regresi\u00f3n Log\u00edstica", "units": null, "w": "184", "x": "327", "y": "667", "z": 1}, {"color": "#CCCCCC", "definition": "from sklearn.metrics import classification_report\n\nresult = classification_report(y_test, model_prediction_lrm, target_names = ['bueno', 'malo'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "classification_report_lrm", "moduleId": "logistic_regression_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Reporte de Clasificaci\u00f3n - Regresi\u00f3n Log\u00edstica", "units": null, "w": "184", "x": "327", "y": "708", "z": 1}, {"color": "#4CBCFF", "definition": "result = logistic_regression_method.predict_proba(x_test)[:,1]", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "probability_prediction_lrm", "moduleId": "logistic_regression_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Probabilidad Prevista - Regresi\u00f3n Log\u00edstica", "units": null, "w": "184", "x": "543", "y": "540", "z": 1}, {"color": "#CCCCCC", "definition": "from sklearn.utils import resample\nfrom sklearn.metrics import roc_curve\n\n_fpr, _tpr, thresholds = roc_curve(y_test, probability_prediction_lrm)\n\n_trace0 = go.Scatter(\n    x = [0, 1],\n    y = [0, 1],\n    name = 'Aleatorio'\n    )\n_trace1 = go.Scatter(\n    x = _fpr,\n    y = _tpr,\n    name = 'Curva ROC'\n    )\n\n_data = [_trace0, _trace1]\n\n_layout = go.Layout(\n    yaxis = dict(title = 'Ratio Verdadero Positivo'),\n    xaxis = dict(title = 'Ratio Falso Positivo'),\n    )\n\n_fig = go.Figure(_data, _layout)\n_fig.layout.xaxis.update({'anchor': 'x', 'domain': [.05, 0.95]})\n_fig.layout.yaxis.update({'anchor': 'y', 'domain': [.05, 0.95]})\n\nresult = plot(_fig)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "roc_curve_lrm", "moduleId": "logistic_regression_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Curva ROC - Regresi\u00f3n Log\u00edstica", "units": null, "w": "184", "x": "543", "y": "584", "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index(['Edad', 'Sexo', 'Categor\u00eda de Trabajo', 'Vivienda', 'Caja de Ahorros', 'Cuenta Corriente', 'Monto de Pr\u00e9stamo', 'Duraci\u00f3n (meses)', 'Destino del Pr\u00e9stamo'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "loan_parameters", "moduleId": "indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Par\u00e1metros del Pr\u00e9stamo", "units": null, "w": "100", "x": "62", "y": "149", "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index(\n    np.sort(\n    data['sex'].unique()\n    )\n)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "sex", "moduleId": "indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Sexo", "units": null, "w": "100", "x": "62", "y": "290", "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index(\n    np.sort(\n    data['Job category'].unique()\n    )\n)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "job_category", "moduleId": "indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Categor\u00eda de Trabajo", "units": null, "w": "100", "x": "162", "y": "290", "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index(\n    np.sort(\n    data['Housing'].unique()\n    )\n)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "housing", "moduleId": "indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Vivienda", "units": null, "w": "100", "x": "262", "y": "290", "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index(\n    np.sort(\n    data['Purpose'].unique()\n    )\n)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "purpose", "moduleId": "indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Destino del Pr\u00e9stamo", "units": null, "w": "100", "x": "362", "y": "290", "z": 1}, {"color": "#9999ff", "definition": "_number_of_loans = 10\n_loans = [('Pr\u00e9stamo 0' + str(x)) if (x<10) else ('Pr\u00e9stamo ' + str(x)) for x in range(1, (_number_of_loans + 1))]\n\nresult = pd.Index(_loans)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "new_loans_index", "moduleId": "indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Nuevos Pr\u00e9stamos", "units": null, "w": "100", "x": "162", "y": "149", "z": 1}, {"color": "#4CBCFF", "definition": "# Numpy array with new loans\n_complete_loans = complete_new_loans.values\n\n# Keep complete loans only from New Loans dataframe\n_df = new_loans.to_dataframe('values').reset_index()\n_filter = _df[new_loans_index.name].isin(_complete_loans)\n_df = _df[_filter]\n\n# Checks if there is any complete loan\nif len(_complete_loans) != 0:\n    # Move loan_parameters column to several columns (spreadsheet-style pivot table)\n    _df = _df.pivot(index = new_loans_index.name, columns = loan_parameters.name, values = 'values')\n    # Convert numerical attributes to int (originally stored as strings)\n    _df['Edad'] = _df['Edad'].astype(int)\n    _df['Monto de Pr\u00e9stamo'] = _df['Monto de Pr\u00e9stamo'].astype(int)\n    _df['Duraci\u00f3n'] = _df['Duraci\u00f3n (meses)'].astype(int)\n    # Drop Duration (months) column (it is not a original column)\n    _df = _df.drop(columns = 'Duraci\u00f3n (meses)')\n    \n    # Create Age category column\n    _age_interval = (17, 25, 35, 60, 120)\n    _age_categories = ['Estudiante', 'Joven', 'Adulto', 'Mayor']\n    _df['Categor\u00eda de Edad'] = pd.cut(_df['Edad'], _age_interval, labels = _age_categories)\n    \n    # Add Job column (input is Job category)\n    _job_categories = {'Categor\u00eda de Trabajo': ['0- sin estudios y no residente', '1- sin estudios y residente', '2- con estudios', '3- altamente capacitado'], 'Trabajo': [0, 1, 2, 3]}\n    _job_categories_df = pd.DataFrame(_job_categories)\n    _df = _df.merge(_job_categories_df, on = 'Categor\u00eda de Trabajo', how = 'left').drop(columns = 'Categor\u00eda de Trabajo')\n    \n    _df = _df.rename(columns = {'Edad': 'Age', 'Sexo': 'sex', 'Trabajo': 'Job', 'Vivienda': 'Housing', 'Caja de Ahorros': 'Saving accounts', 'Cuenta Corriente': 'Checking account', 'Monto de Pr\u00e9stamo': 'Credit amount', 'Duraci\u00f3n': 'Duration', 'Destino del Pr\u00e9stamo': 'Purpose', 'Categor\u00eda de Edad': 'Age category'})\n    \n    result = _df\n    \nelse:\n    result = 0", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "new_loans_pre_processing", "moduleId": "predictions_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Nuevos Pr\u00e9stamos - Pre-procesamiento", "units": null, "w": "184", "x": "302", "y": "299", "z": 1}, {"color": "#FFFF4B", "definition": "# properties\n_input_properties = {'defaultValue': ''}\n\n# values\nresult = xr.DataArray([['23','hombre','1- sin estudios y residente','propia','moderada',  'moderada','3000','9','auto'], ['26','mujer','0- sin estudios y no residente','alquila','peque\u00f1a',  'sin info','1000','6','equipamiento dom\u00e9stico'], ['32','hombre','2- con estudios','propia','sin info','moderada','9500',  '9','negocio'], ['19','hombre','0- sin estudios y no residente','alquila','peque\u00f1a',  'peque\u00f1a','1000','9','educaci\u00f3n'], ['','','','','','','','',''], ['','','','','','','','',''], ['','','','','','','','',''], ['','','','','','','','',''], ['','','','','','','','',''], ['','','','','','','','','']], coords=[(new_loans_index.name, [\"Pr\\u00e9stamo 01\", \"Pr\\u00e9stamo 02\", \"Pr\\u00e9stamo 03\", \"Pr\\u00e9stamo 04\", \"Pr\\u00e9stamo 05\", \"Pr\\u00e9stamo 06\", \"Pr\\u00e9stamo 07\", \"Pr\\u00e9stamo 08\", \"Pr\\u00e9stamo 09\", \"Pr\\u00e9stamo 10\"]),(loan_parameters.name, [\"Edad\", \"Sexo\", \"Categor\\u00eda de Trabajo\", \"Vivienda\", \"Caja de Ahorros\", \"Cuenta Corriente\", \"Monto de Pr\\u00e9stamo\", \"Duraci\\u00f3n (meses)\", \"Destino del Pr\\u00e9stamo\"])]).astype(\"O\")", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "new_loans", "moduleId": "predictions_mod", "nodeClass": "inputtable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Nuevos Pr\u00e9stamos", "units": null, "w": "184", "x": "80", "y": "299", "z": 1}, {"color": "#cccccc", "definition": "result = 0", "description": "Calificaciones", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "327", "identifier": "node1_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy", "moduleId": "predictions_mod", "nodeClass": "text", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "896", "x": 45, "y": 261, "z": "-2"}, {"color": "#9999ff", "definition": "result = sequence_index(19, 75, _step=1)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "age", "moduleId": "indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Edad", "units": null, "w": "100", "x": "461", "y": "290", "z": 1}, {"color": "#9999ff", "definition": "result = sequence_index(500, 15000, _step = 500)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "credit_amount", "moduleId": "indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Monto de Pr\u00e9stamo", "units": null, "w": "100", "x": "62", "y": "348", "z": 1}, {"color": "#9999ff", "definition": "result = sequence_index(6, 72, _step = 3)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "duration", "moduleId": "indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Duraci\u00f3n", "units": null, "w": "100", "x": "162", "y": "348", "z": 1}, {"color": "#CCCCCC", "definition": "_trace0 = go.Scatter(\r\n    x = good_credits[\"Credit amount\"],\r\n    y = good_credits[\"Duration\"],\r\n    mode = 'markers',\r\n    name = 'Bueno',\r\n    marker = dict(color = good_credits_color)\r\n)\r\n\r\n_trace1 = go.Scatter(\r\n    x = bad_credits[\"Credit amount\"],\r\n    y = bad_credits[\"Duration\"],\r\n    mode = 'markers',\r\n    name = 'Malo',\r\n    marker = dict(color = bad_credits_color)\r\n)\r\n\r\n_data = [_trace0, _trace1]\r\n\r\n_fig = go.Figure(_data)\r\n_fig['layout'].update(legend = dict(orientation = 'h'))\r\n\r\nresult = plot(_fig)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "credit_amount_by_duration_plotly", "moduleId": "data_exploration_analysis_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Distribuci\u00f3n del Riesgo por Monto y Duraci\u00f3n del Pr\u00e9stamo", "units": null, "w": "184", "x": 579, "y": 431, "z": 1}, {"color": "#CCCCCC", "definition": "_trace0 = go.Scatter(\r\n    x = good_credits[\"Credit amount\"],\r\n    y = good_credits[\"Age\"],\r\n    mode = 'markers',\r\n    name = 'Bueno',\r\n    marker = dict(color = good_credits_color)\r\n)\r\n\r\n_trace1 = go.Scatter(\r\n    x = bad_credits[\"Credit amount\"],\r\n    y = bad_credits[\"Age\"],\r\n    mode = 'markers',\r\n    name = 'Malo',\r\n    marker = dict(color = bad_credits_color)\r\n)\r\n\r\n_data = [_trace0, _trace1]\r\n\r\n_fig = go.Figure(_data)\r\n_fig['layout'].update(legend = dict(orientation = 'h'))\r\n\r\nresult = plot(_fig)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "credit_amount_by_age_plotly", "moduleId": "data_exploration_analysis_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Dist del Riesgo por Edad y Monto del Pr\u00e9stamo", "units": null, "w": "184", "x": 579, "y": 384, "z": 1}, {"color": "#6699FF", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "data_exploration_analysis_mod", "moduleId": "credit_risk_analysis_prediction_demo_esp", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Exploraci\u00f3n y An\u00e1lisis de Datos", "units": null, "w": "184", "x": "351", "y": "129", "z": 1}, {"color": "#eeeeee", "definition": "result = 0", "description": "Exploraci\u00f3n y An\u00e1lisis de Datos", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "724", "identifier": "node1_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy", "moduleId": "data_exploration_analysis_mod", "nodeClass": "text", "nodeFont": "Helvetica,21", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 1}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "772", "x": "30", "y": "39", "z": "-2"}, {"color": "#4CBCFF", "definition": "result = data", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a8ae54b33b3314147bd6f491e12db9a2f", "moduleId": "data_exploration_analysis_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "data", "picture": null, "title": "Datos(con nuevas columnas y pr\u00e9stamos)", "units": null, "w": "184", "x": "71", "y": "110", "z": 1}, {"color": "#cccccc", "definition": "result = 0", "description": "Exploraci\u00f3n y An\u00e1lisis de Datos", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "126", "identifier": "node1_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy", "moduleId": "credit_risk_analysis_prediction_demo_esp", "nodeClass": "text", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "256", "x": "316", "y": "77", "z": -1}, {"color": "#cccccc", "definition": "result = 0", "description": "Correlaciones", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "126", "identifier": "node1_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy", "moduleId": "data_exploration_analysis_mod", "nodeClass": "text", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "238", "x": "550", "y": "77", "z": -1}, {"color": "#cccccc", "definition": "result = 0", "description": "Machine Learning - Entrenamiento y Testeo", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "126", "identifier": "node1_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy", "moduleId": "credit_risk_analysis_prediction_demo_esp", "nodeClass": "text", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "256", "x": "46", "y": "217", "z": -1}, {"color": "#6699FF", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "machine_learning_training_and_test_mod", "moduleId": "credit_risk_analysis_prediction_demo_esp", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Machine Learning - Entrenamiento y Testeo", "units": null, "w": "184", "x": "79", "y": "274", "z": 1}, {"color": "#eeeeee", "definition": "result = 0", "description": "Machine Learning - Entrenamiento y Testeo", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "350", "identifier": "node1_copy_copy_copy_copy_copy_copy_copy_copy", "moduleId": "machine_learning_training_and_test_mod", "nodeClass": "text", "nodeFont": "Helvetica,21", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 1}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "1244", "x": "30", "y": "39", "z": -1}, {"color": "#cccccc", "definition": "result = 0", "description": "Datos Normalizados", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "298", "identifier": "node1_copy_copy_copy_copy_copy_copy_copy_copy_copy", "moduleId": "machine_learning_training_and_test_mod", "nodeClass": "text", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "254", "x": "46", "y": "77", "z": -1}, {"color": "#CCCCCC", "definition": "result = 0", "description": "M\u00e9todo Random Forest", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "706", "identifier": "node1_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy", "moduleId": "random_forest_method_mod", "nodeClass": "text", "nodeFont": "Arial Black,15", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 1}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "929", "x": 47, "y": 65, "z": -1}, {"color": "#4CBCFF", "definition": "result = random_forest_method", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "acd3b2d839c6748f6a1969c751a07e21e", "moduleId": "predictions_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "random_forest_method", "picture": null, "title": "M\u00e9todo Random Forest", "units": null, "w": "184", "x": 78, "y": 106, "z": 1}, {"color": "#4CBCFF", "definition": "result = logistic_regression_method", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a2c565a1880bf4e89b76e7d9ee06beaee", "moduleId": "predictions_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "logistic_regression_method", "picture": null, "title": "M\u00e9todo Regresi\u00f3n Log\u00edstica", "units": null, "w": "184", "x": 78, "y": 148, "z": 1}, {"color": "#6699FF", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "predictions_mod", "moduleId": "credit_risk_analysis_prediction_demo_esp", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Calificaciones", "units": null, "w": "184", "x": "351", "y": "274", "z": 1}, {"color": "#cccccc", "definition": "result = 0", "description": "Calificaciones", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "126", "identifier": "node1_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy", "moduleId": "credit_risk_analysis_prediction_demo_esp", "nodeClass": "text", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "256", "x": "316", "y": "217", "z": -1}, {"color": "#eeeeee", "definition": "result = 0", "description": "Calificaciones", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "712", "identifier": "node1_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy", "moduleId": "predictions_mod", "nodeClass": "text", "nodeFont": "Helvetica,21", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 1}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "929", "x": 30, "y": 39, "z": "-3"}, {"color": "#cccccc", "definition": "result = 0", "description": "Modelos", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "178", "identifier": "node1_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy", "moduleId": "predictions_mod", "nodeClass": "text", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "896", "x": "45", "y": "69", "z": "-2"}, {"color": "#cccccc", "definition": "result = 0", "description": "Datos", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "126", "identifier": "node1_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy", "moduleId": "data_exploration_analysis_mod", "nodeClass": "text", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "238", "x": "46", "y": "77", "z": -1}, {"color": "#4CBCFF", "definition": "result = random_forest_method.predict(x_test)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "model_prediction_rfm", "moduleId": "random_forest_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Predicci\u00f3n - Random Forest", "units": null, "w": "184", "x": "327", "y": "539", "z": 1}, {"color": "#CCCCCC", "definition": "result = random_forest_method.score(x_train, y_train)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "score_rfm", "moduleId": "random_forest_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Puntuaci\u00f3n - Random Forest", "units": null, "w": "184", "x": "327", "y": "621", "z": 1}, {"color": "#CCCCCC", "definition": "result = logistic_regression_method.score(x_train, y_train)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "score_lrm", "moduleId": "logistic_regression_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Puntuaci\u00f3n - Regresi\u00f3n Log\u00edstica", "units": null, "w": "184", "x": "327", "y": "625", "z": 1}, {"color": "#4CBCFF", "definition": "result = logistic_regression_method.predict(x_test)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "model_prediction_lrm", "moduleId": "logistic_regression_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Predicciones - Regresi\u00f3n Log\u00edstica", "units": null, "w": "184", "x": "327", "y": "540", "z": 1}, {"color": "#4CBCFF", "definition": "result = normalized_data", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a5fbed3cfb13145e194667b636692ef07", "moduleId": "predictions_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "normalized_data", "picture": null, "title": "Datos Normalizados", "units": null, "w": "184", "x": "79", "y": "343", "z": 1}, {"color": "#FFFF4B", "definition": "# Hex color. Impacts on plotly graphics\nresult = '#93C47D'", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "good_credits_color", "moduleId": "data_exploration_analysis_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Color Buenos Pr\u00e9stamos", "units": null, "w": "184", "x": "71", "y": "255", "z": 1}, {"color": "#FFFF4B", "definition": "# Hex color. Impacts on plotly graphics\nresult = '#EA9999'", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "bad_credits_color", "moduleId": "data_exploration_analysis_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Color Malos Pr\u00e9stamos", "units": null, "w": "184", "x": "71", "y": "298", "z": 1}, {"color": "#6699FF", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "data_mod", "moduleId": "credit_risk_analysis_prediction_demo_esp", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Datos", "units": null, "w": "184", "x": "79", "y": "129", "z": 1}, {"color": "#EEEEEE", "definition": "result = 0", "description": "Datos", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "248", "identifier": "node1_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy", "moduleId": "data_mod", "nodeClass": "text", "nodeFont": "Helvetica,21", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 1}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "678", "x": 30, "y": 39, "z": -1}, {"color": "#A5FF4B", "definition": "# Read data from CSV without index column\nresult = pd.read_csv(current_path + '/Files/german_credit_data.csv', index_col = 0)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "original_data", "moduleId": "data_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Datos Originales", "units": null, "w": "184", "x": "56", "y": "104", "z": 1}, {"color": "#A5FF4B", "definition": "# Variable to refresh calculations when the 'Add New Loans to CSV' or 'Delete New Loans From CSV' buttons are executed\n_reload = reload_new_loans\n\nimport os\n\n_file_path = current_path + '/Files/new_loans.csv'\n\n# Check if CSV file exists\nif os.path.isfile(_file_path):\n    result = pd.read_csv(_file_path, index_col = 0)\nelse:\n    result = 0", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "new_data", "moduleId": "data_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Nuevos Datos", "units": null, "w": "184", "x": "56", "y": "191", "z": 1}, {"color": "#cccccc", "definition": "result = 0", "description": "Feedback de Nuevos Pr\u00e9stamos", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "132", "identifier": "node1_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy", "moduleId": "predictions_mod", "nodeClass": "text", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "896", "x": 45, "y": 601, "z": "-2"}, {"color": "#FFFF4B", "definition": "# properties\n_input_properties = {'defaultValue': ''}\n\n# values\nresult = xr.DataArray(['','','','','','','','','',''], coords=[(new_loans_index.name, [\"Pr\\u00e9stamo 01\", \"Pr\\u00e9stamo 02\", \"Pr\\u00e9stamo 03\", \"Pr\\u00e9stamo 04\", \"Pr\\u00e9stamo 05\", \"Pr\\u00e9stamo 06\", \"Pr\\u00e9stamo 07\", \"Pr\\u00e9stamo 08\", \"Pr\\u00e9stamo 09\", \"Pr\\u00e9stamo 10\"])]).astype(\"O\")", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "new_loans_feedback", "moduleId": "predictions_mod", "nodeClass": "inputtable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Feedback", "units": null, "w": "184", "x": 79, "y": 640, "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index(\n    np.sort(\n    data['Risk'].unique()\n    )\n)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "risk", "moduleId": "indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Riesgo", "units": null, "w": "100", "x": "461", "y": "348", "z": 1}, {"color": "#4CBCFF", "definition": "_columns = original_data.columns.values\n\n# Checks if there is any complete loan\nif len(complete_new_loans) != 0:\n    _df = new_loans_pre_processing.copy().rename(columns = {'sex': 'Sex'})\n    \n    # Append Risk column to New Loans - Pre-processing dataframe\n    _new_loans_risk = xr.where(new_loans_feedback == 'bueno', 'good', xr.where(new_loans_feedback == 'malo', 'bad', ''))\n    _new_loans_risk = change_index(_new_loans_risk, new_loans_index, complete_new_loans).values\n    _df['Risk'] = _new_loans_risk\n    \n    # Replace 'no info' values with NaN\n    _df['Saving accounts'] = np.where(_df['Saving accounts'] == 'no info', np.nan, _df['Saving accounts'])\n    _df['Checking account'] = np.where(_df['Checking account'] == 'no info', np.nan, _df['Checking account'])\n    \n    # Keep loans that have feedback\n    _df = _df[_df['Risk'] != '']\n    \n    # Reorder columns by the original data columns (makes it easier to concat afterwards)\n    result = _df[_columns]\nelse:\n    result = 0", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "new_loans_to_add", "moduleId": "predictions_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Nuevos Pr\u00e9stamos a Agregar", "units": null, "w": "184", "x": 302, "y": 640, "z": 1}, {"color": "#CBCBCB", "definition": "# Checks if there is any complete loan\nif len(new_loans_to_add) == 0:\n    result = 0\nelse:\n    import os\n    from random import random\n    \n    _file_path = current_path + '/Files/new_loans.csv'\n    # Paste random number into the reload node definition (it refreshes New Loans CSV read)\n    reload_new_loans.node.definition = 'result = ' + str(random())\n    \n    if not os.path.isfile(_file_path):\n        # If file does not exist, create file with headers\n        result = new_loans_to_add.to_csv(_file_path, sep = ',', na_rep = 'NA', header = True, mode = 'w')\n    else:\n        # If file exists, add new rows without the headers\n        result = new_loans_to_add.to_csv(_file_path, sep = ',', na_rep = 'NA', header = False, mode = 'a')", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "40", "identifier": "add_new_loans_to_csv", "moduleId": "predictions_mod", "nodeClass": "button", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Agregar Nuevos Pr\u00e9stamos a BD", "units": null, "w": "154", "x": 535, "y": 624, "z": 1}, {"color": "#4cffa6", "definition": "result = choice(yes_no,1, False)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "32", "identifier": "consider_new_loans", "moduleId": "data_mod", "nodeClass": "decision", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "\u00bfConsiderar Nuevos Pr\u00e9stamos?", "units": null, "w": "184", "x": "278", "y": "54", "z": 1}, {"color": "#4CFFA6", "definition": "result = consider_new_loans", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "36", "identifier": "ab345081727584b359f57bbfe481a6b20", "moduleId": "data_mod", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "consider_new_loans", "picture": null, "title": "\u00bfConsiderar Nuevos Pr\u00e9stamos?", "units": null, "w": "408", "x": 166, "y": 53, "z": 1}, {"color": "#FFFF4B", "definition": "result = 0.8738766155049537", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "32", "identifier": "reload_new_loans", "moduleId": "data_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Reload New Loans", "units": null, "w": "130", "x": "82", "y": "149", "z": 1}, {"color": "#cccccc", "definition": "result = 0", "description": "Panel de Control", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "160", "identifier": "node1_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy", "moduleId": "credit_risk_analysis_prediction_demo_esp", "nodeClass": "text", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "526", "x": "44", "y": "356", "z": -1}, {"color": "#6699FF", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "indexes_mod", "moduleId": "credit_risk_analysis_prediction_demo_esp", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Indexes", "units": null, "w": "184", "x": "78", "y": "632", "z": 1}, {"color": "#EEEEEE", "definition": "result = 0", "description": "Indexes", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "789", "identifier": "node1_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy", "moduleId": "indexes_mod", "nodeClass": "text", "nodeFont": "Arial Black,15", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 1}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "647", "x": 40, "y": 49, "z": -1}, {"color": "#CCCCCC", "definition": "# Get correlation\r\n_correlation = normalized_data_esp.corr()\r\n# Get columns\r\n_cols = _correlation.columns.tolist()\r\n#convert to array\r\n_correlation_array  = np.array(_correlation)\r\n\r\n# Plot correlations\r\n_trace = go.Heatmap(z = _correlation_array,\r\n                   x = _cols,\r\n                   y = _cols,\r\n                   colorscale = 'YlOrRd',\r\n                   colorbar   = dict(title = 'Coeficiente de Correlaci\u00f3n Pearson',\r\n                                     titleside = 'right'\r\n                                    ) ,\r\n                  )\r\n\r\n_layout = go.Layout(dict(autosize = False,\r\n                        yaxis   = dict(tickfont = dict(size = 9)),\r\n                        xaxis   = dict(tickfont = dict(size = 9))\r\n                       )\r\n                  )\r\n\r\n_data = [_trace]\r\n_fig = go.Figure(_data, layout = _layout)\r\n_fig.layout.xaxis.update({'anchor': 'x', 'domain': [.1, 0.95]})\r\n_fig.layout.yaxis.update({'anchor': 'y', 'domain': [.1, 0.95]})\r\n\r\nresult = plot(_fig)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "correlations", "moduleId": "data_exploration_analysis_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Correlaciones", "units": null, "w": "184", "x": 579, "y": 153, "z": 1}, {"color": "#CB98FF", "definition": "# Checks if there is any complete loan\nif len(complete_new_loans) == 0:\n    result = 0\nelse:\n    # Create DataArray indexed by Machine Learning Method\n    result = xr.concat([new_loans_predictions_rfm.to_xarray(), new_loans_predictions_lrm.to_xarray(), new_loans_predictions_gnb.to_xarray()], dim = machine_learning_methods)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "new_loans_predictions", "moduleId": "predictions_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Calificaciones", "units": null, "w": "184", "x": "734", "y": "343", "z": 1}, {"color": "#4CBCFF", "definition": "_predict = random_forest_method.predict(normalized_new_loans_data.values)\n\n# Create dataframe with predictions index by Complete New Loans\n_df = pd.DataFrame(_predict, complete_new_loans)[0]\n\n# Replace 0 and 1 values by 'good' and 'bad'\nresult = _df.replace(tuple([0, 1]), tuple(['bueno', 'malo']))", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "new_loans_predictions_rfm", "moduleId": "predictions_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Calificaci\u00f3n de Nuevos Pr\u00e9stamos - RFM", "units": null, "w": "184", "x": "520", "y": "299", "z": 1}, {"color": "#4CBCFF", "definition": "_predict = logistic_regression_method.predict(normalized_new_loans_data.values)\n\n# Create dataframe with predictions index by Complete New Loans\n_df = pd.DataFrame(_predict, complete_new_loans)[0]\n\n# Replace 0 and 1 values by 'good' and 'bad'\nresult = _df.replace(tuple([0, 1]), tuple(['bueno', 'malo']))", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "new_loans_predictions_lrm", "moduleId": "predictions_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Calificaci\u00f3n de Nuevos Pr\u00e9stamos - LRM", "units": null, "w": "184", "x": "520", "y": "343", "z": 1}, {"color": "#CBCBCB", "definition": "# Resets input nodes definition\n\nnew_loans.node.definition = 'result = create_dataarray(\"\", [new_loans_index, loan_parameters], dtype = \"O\")'\nnew_loans_feedback.node.definition = 'result = create_dataarray(\"\", [new_loans_index], dtype = \"O\")'\n\n# To avoid error\nresult = 0", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "40", "identifier": "reset_new_loans", "moduleId": "predictions_mod", "nodeClass": "button", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Resetear Inputs de Nuevos Pr\u00e9stamos", "units": null, "w": "154", "x": 749, "y": 624, "z": 1}, {"color": "#9999ff", "definition": "result = subset((new_loans == '').sum(loan_parameters.name) == 0)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "complete_new_loans", "moduleId": "indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Nuevos Pr\u00e9stamos Completos", "units": null, "w": "100", "x": 261, "y": 149, "z": 1}, {"color": "#4CBCFF", "definition": "# DATA PRE-PROCESSING FOR MACHINE LEARNING PREDICTION\n\n_data = new_loans_pre_processing.copy()\n\n# Categorical columns\n_categorical_columns = [i for i in _data.columns if i not in numerical_columns]\n\n# Create dummies for each categorical column\nfor i in _categorical_columns:\n    _data = _data.merge(pd.get_dummies(_data[i], drop_first = False, prefix = i), left_index = True, right_index = True)\n\n# Fill rest of categorical columns with 0\n_normalized_columns = normalized_data.columns\n_normalized_columns_exc = [i for i in _normalized_columns if i not in _data.columns]\nfor i in _normalized_columns_exc:\n    _data[i] = 0\n\n# Drop Risk_bad column\n_data = _data[_normalized_columns].drop(columns = 'Risk_malo')\n\n# Normalize numerical columns\nfor i in numerical_columns:\n    _original_data_i = data[i]\n    _min = _original_data_i.min()\n    _max = _original_data_i.max()\n    _scale = 1 / (_max - _min)\n    _normalized_values = _scale * _data[i] - _min * _scale\n    _data[i] = _normalized_values\n\nresult = _data", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "normalized_new_loans_data", "moduleId": "predictions_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Nuevos Pr\u00e9stamos Normalizados", "units": null, "w": "184", "x": "302", "y": "343", "z": 1}, {"color": "#4CBCFF", "definition": "# DATA PRE-PROCESSING FOR MACHINE LEARNING MODELS\n\nfrom sklearn.preprocessing import MinMaxScaler\n\n# Drop columns that will not be used\n_data = data.copy().drop(columns = ['value', 'Job category'])\n\n# Create dummies for each categorical column\nfor i in categorical_columns:\n    _data = _data.merge(pd.get_dummies(_data[i], drop_first = (True if i != 'Risk' else False), prefix = i), left_index = True, right_index = True)\n\n# Drop original categorical columns from dataframe and Risk_good dummy (Risk_bad is the only needed)\n_data = _data.drop(columns = categorical_columns)\n_data = _data.drop(columns = 'Risk_bueno')\n_final_columns = _data.columns.values\n\n# Normalize numerical columns (returns numpy array)\n_scaler = MinMaxScaler(feature_range = (0,1)).fit(_data)\n_data_normalized = _scaler.transform(_data)\n\n# Create dataframe from numpy array\nresult = pd.DataFrame(_data_normalized, columns = _final_columns)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "normalized_data", "moduleId": "machine_learning_training_and_test_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Datos Normalizados", "units": null, "w": "184", "x": "80", "y": "158", "z": 1}, {"color": "#CCCCCC", "definition": "_columns = normalized_data.columns[normalized_data.columns != 'Risk_malo']\n_importances = random_forest_method.feature_importances_\n\n# Create indexed dataframe with features and their importances\nresult = pd.DataFrame({'Atributo': _columns, 'Importancia': _importances}).set_index('Atributo')", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "feature_importance_rfm", "moduleId": "random_forest_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Importancia de Atributos - Random Forest", "units": null, "w": "184", "x": "543", "y": "705", "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index(['Item'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "one_element", "moduleId": "indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "One Element", "units": null, "w": "100", "x": "162", "y": "89", "z": 1}, {"color": "#4CBCFF", "definition": "result = random_forest_method.predict_proba(x_test)[:,1]", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "probability_prediction_rfm", "moduleId": "random_forest_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Probabilidad Prevista - Random Forest", "units": null, "w": "184", "x": "543", "y": "495", "z": 1}, {"color": "#CCCCCC", "definition": "from sklearn.utils import resample\nfrom sklearn.metrics import roc_curve\n\n_fpr, _tpr, thresholds = roc_curve(y_test, probability_prediction_rfm)\n\n_trace0 = go.Scatter(\n    x = [0, 1],\n    y = [0, 1],\n    name = 'Aleatorio'\n    )\n_trace1 = go.Scatter(\n    x = _fpr,\n    y = _tpr,\n    name = 'Curva ROC'\n    )\n\n_data = [_trace0, _trace1]\n\n_layout = go.Layout(\n    yaxis = dict(title = 'Ratio Verdadero Positivo'),\n    xaxis = dict(title = 'Ratio Falso Positivo'),\n    )\n\n_fig = go.Figure(_data, _layout)\n_fig.layout.xaxis.update({'anchor': 'x', 'domain': [.05, 0.95]})\n_fig.layout.yaxis.update({'anchor': 'y', 'domain': [.05, 0.95]})\n\nresult = plot(_fig)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "roc_curve_rfm", "moduleId": "random_forest_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Curva ROC - Random Forest", "units": null, "w": "184", "x": "543", "y": "539", "z": 1}, {"color": "#CCCCCC", "definition": "from sklearn.metrics import precision_score\n\nresult = precision_score(y_test, model_prediction_rfm)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "precision_score_rfm", "moduleId": "random_forest_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Precisi\u00f3n - Random Forest", "units": null, "w": "184", "x": "543", "y": "580", "z": 1}, {"color": "#CCCCCC", "definition": "from sklearn.metrics import precision_score\n\nresult = precision_score(y_test, model_prediction_lrm)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "precision_score_lrm", "moduleId": "logistic_regression_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Precisi\u00f3n - Regresi\u00f3n Log\u00edstica", "units": null, "w": "184", "x": "543", "y": "625", "z": 1}, {"color": "#CCCCCC", "definition": "from sklearn.metrics import recall_score\n\nresult = recall_score(y_test, model_prediction_rfm)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "recall_score_rfm", "moduleId": "random_forest_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Sensibilidad - Random Forest", "units": null, "w": "184", "x": "543", "y": "621", "z": 1}, {"color": "#CCCCCC", "definition": "from sklearn.metrics import recall_score\n\nresult = recall_score(y_test, model_prediction_lrm)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "recall_score_lrm", "moduleId": "logistic_regression_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Sensibilidad - Regresi\u00f3n Log\u00edstica", "units": null, "w": "184", "x": "543", "y": "667", "z": 1}, {"color": "#4CBCFF", "definition": "# Get values of the 'x_test' key\nresult = train_test_array['x_test']", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "x_test", "moduleId": "machine_learning_training_and_test_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Testeo X", "units": null, "w": "184", "x": "566", "y": "282", "z": 1}, {"color": "#4CBCFF", "definition": "# Get values of the 'y_test' key\nresult = train_test_array['y_test']", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "y_test", "moduleId": "machine_learning_training_and_test_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Testeo Y", "units": null, "w": "184", "x": "566", "y": "324", "z": 1}, {"color": "#CB98FF", "definition": "from sklearn.naive_bayes import GaussianNB\r\n\r\n# Create classifier\r\n_model = GaussianNB()\r\n\r\n# Fit model\r\nresult = _model.fit(x_train, y_train)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "gaussian_naive_bayes_method", "moduleId": "gaussian_naive_bayes_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "M\u00e9todo Gaussian Naive Bayes", "units": null, "w": "184", "x": "288", "y": "102", "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index(['RF','LR','GNB'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "machine_learning_methods", "moduleId": "indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "M\u00e9todos de ML", "units": null, "w": "100", "x": "261", "y": "89", "z": 1}, {"color": "#cccccc", "definition": "result = 0", "description": "Datasets de Entrenamiento y Testeo", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "298", "identifier": "node1_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy", "moduleId": "machine_learning_training_and_test_mod", "nodeClass": "text", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "466", "x": "313", "y": "77", "z": -1}, {"color": "#6699FF", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "random_forest_method_mod", "moduleId": "machine_learning_training_and_test_mod", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "M\u00e9todo Random Forest", "units": null, "w": "184", "x": "826", "y": "182", "z": 1}, {"color": "#4CBCFF", "definition": "result = x_train", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "aee5938e0b5e540ad8b7554ad9b1b4266", "moduleId": "random_forest_method_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "x_train", "picture": null, "title": "Entrenamiento X", "units": null, "w": "184", "x": "84", "y": "138", "z": 1}, {"color": "#4CBCFF", "definition": "result = y_train", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a245268a01f2146deb75028e8b44eb2f7", "moduleId": "random_forest_method_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "y_train", "picture": null, "title": "Entrenamiento Y", "units": null, "w": "184", "x": "84", "y": "179", "z": 1}, {"color": "#4CBCFF", "definition": "result = x_test", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a868a2d2b442146a490af6baca2e40108", "moduleId": "random_forest_method_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "x_test", "picture": null, "title": "Testeo X", "units": null, "w": "184", "x": "84", "y": "220", "z": 1}, {"color": "#4CBCFF", "definition": "result = y_test", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a97885f58b84a4c1a97c5c325cf4874ab", "moduleId": "random_forest_method_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "y_test", "picture": null, "title": "Testeo Y", "units": null, "w": "184", "x": "84", "y": "261", "z": 1}, {"color": "#cccccc", "definition": "result = 0", "description": "M\u00e9todos de Machine Learning", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "298", "identifier": "node1_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy", "moduleId": "machine_learning_training_and_test_mod", "nodeClass": "text", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "466", "x": "793", "y": "77", "z": -1}, {"color": "#6699FF", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "logistic_regression_method_mod", "moduleId": "machine_learning_training_and_test_mod", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "M\u00e9todo Regresi\u00f3n Log\u00edstica", "units": null, "w": "184", "x": "826", "y": "240", "z": 1}, {"color": "#4CBCFF", "definition": "result = x_train", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a2f2bf39ffedc423d9eae925e59b2a32f", "moduleId": "logistic_regression_method_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "x_train", "picture": null, "title": "Entrenamiento X", "units": null, "w": "184", "x": "84", "y": "136", "z": 1}, {"color": "#4CBCFF", "definition": "result = y_train", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a080272989c62437fb7528dfcf45e28f5", "moduleId": "logistic_regression_method_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "y_train", "picture": null, "title": "Entrenamiento Y", "units": null, "w": "184", "x": "84", "y": "183", "z": 1}, {"color": "#4CBCFF", "definition": "result = x_test", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "aadec2c21a6b440da97c919933bd3a079", "moduleId": "logistic_regression_method_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "x_test", "picture": null, "title": "Testeo X", "units": null, "w": "184", "x": "84", "y": "233", "z": 1}, {"color": "#4CBCFF", "definition": "result = y_test", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a42da4475c130439a96de15a5b495c018", "moduleId": "logistic_regression_method_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "y_test", "picture": null, "title": "Testeo Y", "units": null, "w": "184", "x": "84", "y": "279", "z": 1}, {"color": "#EEEEEE", "definition": "result = 0", "description": "Modelo y M\u00e9tricas", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "343", "identifier": "node1_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy", "moduleId": "logistic_regression_method_mod", "nodeClass": "text", "nodeFont": "Arial Black,15", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 1}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "655", "x": 304, "y": 418, "z": -1}, {"color": "#6699FF", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "gaussian_naive_bayes_method_mod", "moduleId": "machine_learning_training_and_test_mod", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "M\u00e9todo Gaussian Naive Bayes", "units": null, "w": "184", "x": "826", "y": "299", "z": 1}, {"color": "#EEEEEE", "definition": "result = 0", "description": "M\u00e9todo Gaussian Naive Bayes", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "301", "identifier": "node1_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy", "moduleId": "gaussian_naive_bayes_method_mod", "nodeClass": "text", "nodeFont": "Arial Black,15", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 1}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "880", "x": 47, "y": 65, "z": -1}, {"color": "#4CBCFF", "definition": "result = x_train", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a6ff0a263c07842679cff4eec707cf188", "moduleId": "gaussian_naive_bayes_method_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "x_train", "picture": null, "title": "Entrenamiento X", "units": null, "w": "184", "x": "67", "y": "102", "z": 1}, {"color": "#4CBCFF", "definition": "result = y_train", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "af31fa2a7eba54950aa6072bb6305d63b", "moduleId": "gaussian_naive_bayes_method_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "y_train", "picture": null, "title": "Entrenamiento Y", "units": null, "w": "184", "x": "67", "y": "145", "z": 1}, {"color": "#4CBCFF", "definition": "result = x_test", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ab3a2098e550748d8a6a93040615417ee", "moduleId": "gaussian_naive_bayes_method_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "x_test", "picture": null, "title": "Testeo X", "units": null, "w": "184", "x": "67", "y": "189", "z": 1}, {"color": "#4CBCFF", "definition": "result = y_test", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a77756b9613914cb696089416fca9cd82", "moduleId": "gaussian_naive_bayes_method_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "y_test", "picture": null, "title": "Testeo Y", "units": null, "w": "184", "x": "67", "y": "230", "z": 1}, {"color": "#4CBCFF", "definition": "result = gaussian_naive_bayes_method", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ae5a80b7287fb40179953f656bc2e30a2", "moduleId": "predictions_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "gaussian_naive_bayes_method", "picture": null, "title": "M\u00e9todo Gaussian Naive Bayes", "units": null, "w": "184", "x": 78, "y": 191, "z": 1}, {"color": "#4CBCFF", "definition": "_predict = gaussian_naive_bayes_method.predict(normalized_new_loans_data.values)\n\n# Create dataframe with predictions index by Complete New Loans\n_df = pd.DataFrame(_predict, complete_new_loans)[0]\n\n# Replace 0 and 1 values by 'good' and 'bad'\nresult = _df.replace(tuple([0, 1]), tuple(['bueno', 'malo']))", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "new_loans_predictions_gnb", "moduleId": "predictions_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Calificaci\u00f3n de Nuevos Pr\u00e9stamos - GNB", "units": null, "w": "184", "x": "520", "y": "388", "z": 1}, {"color": "#4CBCFF", "definition": "result = gaussian_naive_bayes_method.predict(x_test)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "model_prediction_gnb", "moduleId": "gaussian_naive_bayes_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Predicciones - Gaussian NB", "units": null, "w": "184", "x": "288", "y": "145", "z": 1}, {"color": "#CCCCCC", "definition": "from sklearn.metrics import accuracy_score\n\nresult = accuracy_score(y_test, model_prediction_gnb)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "accuracy_gnb", "moduleId": "gaussian_naive_bayes_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Exactitud - Gaussian NB", "units": null, "w": "184", "x": "288", "y": "189", "z": 1}, {"color": "#CCCCCC", "definition": "result = gaussian_naive_bayes_method.score(x_train, y_train)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "score_gnb", "moduleId": "gaussian_naive_bayes_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Puntuaci\u00f3n - Gaussian NB", "units": null, "w": "184", "x": "288", "y": "230", "z": 1}, {"color": "#CCCCCC", "definition": "from sklearn.metrics import confusion_matrix\n\n_cm = confusion_matrix(y_test, model_prediction_gnb)\n\n# Create DataArray from confusion matrix, replacing 0 and 1 index by 'Good' and 'Bad'\nresult = xr.DataArray(_cm, coords = {'Real': ['Real - Bueno', 'Real - Malo'], 'Previsto': ['Previsto - Bueno', 'Previsto - Malo']}, dims = ['Real', 'Previsto'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "confusion_matrix_gnb", "moduleId": "gaussian_naive_bayes_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Matriz de Confusi\u00f3n - Gaussian NB", "units": null, "w": "184", "x": "288", "y": "272", "z": 1}, {"color": "#4CBCFF", "definition": "result = gaussian_naive_bayes_method.predict_proba(x_test)[:,1]", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "probability_prediction_gnb", "moduleId": "gaussian_naive_bayes_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Probabilidad Prevista - Gaussian NB", "units": null, "w": "184", "x": "502", "y": "145", "z": 1}, {"color": "#CCCCCC", "definition": "from sklearn.utils import resample\nfrom sklearn.metrics import roc_curve\n\n_fpr, _tpr, thresholds = roc_curve(y_test, probability_prediction_gnb)\n\n_trace0 = go.Scatter(\n    x = [0, 1],\n    y = [0, 1],\n    name = 'Aleatorio'\n    )\n_trace1 = go.Scatter(\n    x = _fpr,\n    y = _tpr,\n    name = 'Curva ROC'\n    )\n\n_data = [_trace0, _trace1]\n\n_layout = go.Layout(\n    yaxis = dict(title = 'Ratio Verdadero Positivo'),\n    xaxis = dict(title = 'Ratio Falso Positivo'),\n    )\n\n_fig = go.Figure(_data, _layout)\n_fig.layout.xaxis.update({'anchor': 'x', 'domain': [.05, 0.95]})\n_fig.layout.yaxis.update({'anchor': 'y', 'domain': [.05, 0.95]})\n\nresult = plot(_fig)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "roc_curve_gnb", "moduleId": "gaussian_naive_bayes_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Curva ROC - Gaussian NB", "units": null, "w": "184", "x": "502", "y": "189", "z": 1}, {"color": "#CCCCCC", "definition": "from sklearn.metrics import precision_score\n\nresult = precision_score(y_test, model_prediction_gnb)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "precision_score_gnb", "moduleId": "gaussian_naive_bayes_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Precisi\u00f3n - Gaussian NB", "units": null, "w": "184", "x": "502", "y": "230", "z": 1}, {"color": "#CCCCCC", "definition": "from sklearn.metrics import recall_score\n\nresult = recall_score(y_test, model_prediction_gnb)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "recall_score_gnb", "moduleId": "gaussian_naive_bayes_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Sensibilidad - Gaussian NB", "units": null, "w": "184", "x": "502", "y": "272", "z": 1}, {"color": "#CCCCCC", "definition": "from sklearn.metrics import classification_report\n\nresult = classification_report(y_test, model_prediction_gnb, target_names = ['bueno', 'malo'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "classification_report_gnb", "moduleId": "gaussian_naive_bayes_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Reporte de Clasificaci\u00f3n - Gaussian NB", "units": null, "w": "184", "x": "288", "y": "313", "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index(['Exactitud', 'Precisi\u00f3n', 'Sensibilidad', 'Puntuaci\u00f3n F1', 'Puntuaci\u00f3n'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "metrics", "moduleId": "indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "M\u00e9tricas", "units": null, "w": "100", "x": "362", "y": "89", "z": 1}, {"color": "#CCCCCC", "definition": "# Sets of metrics by Machine Learning method\n_rf = [accuracy_rfm, precision_score_rfm, recall_score_rfm, f1_score_rfm, score_rfm]\n_lr = [accuracy_lrm, precision_score_lrm, recall_score_lrm, f1_score_lrm, score_lrm]\n_gnb = [accuracy_gnb, precision_score_gnb, recall_score_gnb, f1_score_gnb, score_gnb]\n\n# Create DataArray indexed by Machine Learning method and Metric\nresult = xr.DataArray([_rf, _lr, _gnb], [machine_learning_methods, metrics])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "metrics_by_ml_method", "moduleId": "machine_learning_training_and_test_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "M\u00e9tricas por M\u00e9todo de Machine Learning", "units": null, "w": "184", "x": "1048", "y": "240", "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index(['Credit amount', 'Duration', 'Age'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "numerical_columns", "moduleId": "indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Numerical Columns", "units": null, "w": "100", "x": "461", "y": "89", "z": 1}, {"color": "#CBCBCB", "definition": "import os\n\n_file_path = current_path + '/Files/new_loans.csv'\n\nif not os.path.isfile(_file_path):\n    result = 0\nelse:\n    # If file exists, delete it and aste random number into the reload node definition (it refreshes New Loans CSV read)\n    from random import random\n    \n    reload_new_loans.node.definition = 'result = ' + str(random())\n    \n    result = os.remove(_file_path)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "40", "identifier": "delete_new_loans_from_csv", "moduleId": "predictions_mod", "nodeClass": "button", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Eliminar Nuevos Pr\u00e9stamos de BD", "units": null, "w": "154", "x": 535, "y": 674, "z": 1}, {"color": "#9999ff", "definition": "_columns = [i for i in data.columns if i not in numerical_columns]\n_columns.remove('value')\n_columns.remove('Job category')\n\nresult = pd.Index(_columns)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "categorical_columns", "moduleId": "indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Categorical Columns", "units": null, "w": "100", "x": "560", "y": "89", "z": 1}, {"color": "#CBCBCB", "definition": "result = reset_new_loans", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "40", "identifier": "a698a766ffafb4abc95849a9ba6c7f3ad", "moduleId": "credit_risk_analysis_prediction_demo_esp", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": "reset_new_loans", "picture": null, "title": "Resetear Inputs de Nuevos Pr\u00e9stamos", "units": null, "w": "154", "x": "399", "y": "448", "z": 1}, {"color": "#CBCBCB", "definition": "result = add_new_loans_to_csv", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "40", "identifier": "a2540e80a21f04e90a0ed955e859a08f6", "moduleId": "credit_risk_analysis_prediction_demo_esp", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": "add_new_loans_to_csv", "picture": null, "title": "Agregar Nuevos Pr\u00e9stamos a BD", "units": null, "w": "154", "x": "60", "y": "448", "z": 1}, {"color": "#CBCBCB", "definition": "result = delete_new_loans_from_csv", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "40", "identifier": "a0f360031a45d404cbe36298eb640a3f7", "moduleId": "credit_risk_analysis_prediction_demo_esp", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": "delete_new_loans_from_csv", "picture": null, "title": "Eliminar Nuevos Pr\u00e9stamos de BD", "units": null, "w": "154", "x": "230", "y": "448", "z": 1}, {"color": "#CCCCCC", "definition": "from sklearn.metrics import f1_score\n\nresult = f1_score(y_test, model_prediction_rfm)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "f1_score_rfm", "moduleId": "random_forest_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Puntuaci\u00f3n F1 - Random Forest", "units": null, "w": "184", "x": "543", "y": "663", "z": 1}, {"color": "#CCCCCC", "definition": "from sklearn.metrics import f1_score\n\nresult = f1_score(y_test, model_prediction_lrm)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "f1_score_lrm", "moduleId": "logistic_regression_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Puntuaci\u00f3n F1 - Regresi\u00f3n Log\u00edstica", "units": null, "w": "184", "x": "543", "y": "708", "z": 1}, {"color": "#CCCCCC", "definition": "from sklearn.metrics import f1_score\n\nresult = f1_score(y_test, model_prediction_gnb)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "f1_score_gnb", "moduleId": "gaussian_naive_bayes_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Puntuaci\u00f3n F1 - Gaussian NB", "units": null, "w": "184", "x": "502", "y": "313", "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index(['peque\u00f1a', 'moderada', 'alta', 'muy alta', 'sin info'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "saving_accounts", "moduleId": "indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Caja de Ahorros", "units": null, "w": "100", "x": "261", "y": "348", "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index(['peque\u00f1a', 'moderada', 'alta', 'sin info'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "checking_account", "moduleId": "indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Cuenta Corriente", "units": null, "w": "100", "x": "362", "y": "348", "z": 1}, {"color": "#CBCBCB", "definition": "# Resets New Loans Feedback node definition\n\nnew_loans_feedback.node.definition = 'result = create_dataarray(\"\", [new_loans_index], dtype = \"O\")'\n\n# To avoid error\nresult = 0", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "40", "identifier": "reset_new_loans_feedback", "moduleId": "predictions_mod", "nodeClass": "button", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Resetear Feedback de Nuevos Pr\u00e9stamos", "units": null, "w": "154", "x": 749, "y": 674, "z": 1}, {"color": "#4CBCFF", "definition": "result = data", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a1ae6cce61cc24c92b948f577d079a754", "moduleId": "machine_learning_training_and_test_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "data", "picture": null, "title": "Datos(con nuevas columnas y pr\u00e9stamos)", "units": null, "w": "184", "x": "80", "y": "114", "z": 1}, {"color": "#CCCCCC", "definition": "result = 0", "description": "Indexes for Palestra", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "152", "identifier": "node1_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy", "moduleId": "indexes_mod", "nodeClass": "text", "nodeFont": "Arial Black,15", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 1}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "626", "x": "50", "y": "415", "z": -1}, {"color": "#9999ff", "definition": "result = sequence_index(500, 2500, _step = 500)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "credit_amount_p", "moduleId": "indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Monto de Pr\u00e9stamo", "units": null, "w": "100", "x": "560", "y": "446", "z": 1}, {"color": "#9999ff", "definition": "result = sequence_index(6, 18, _step = 3)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "duration_p", "moduleId": "indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Duraci\u00f3n", "units": null, "w": "100", "x": "461", "y": "446", "z": 1}, {"color": "#9999ff", "definition": "result = ['peque\u00f1a', 'moderada', 'alta']", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "checking_account_p", "moduleId": "indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Cuenta Corriente", "units": null, "w": "100", "x": "362", "y": "446", "z": 1}, {"color": "#9999ff", "definition": "result = ['sin estudios', 'con estudios']", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "job_category_p", "moduleId": "indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Categor\u00eda de Trabajo", "units": null, "w": "100", "x": "261", "y": "446", "z": 1}, {"color": "#9999ff", "definition": "result = copy_index(sex)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "sex_p", "moduleId": "indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Sexo", "units": null, "w": "100", "x": "162", "y": "446", "z": 1}, {"color": "#9999ff", "definition": "result = sequence_index(20, 45, _step = 5)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "age_p", "moduleId": "indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Edad", "units": null, "w": "100", "x": "62", "y": "446", "z": 1}, {"color": "#4cffa6", "definition": "result = choice(age_p,2, False)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "age_choice", "moduleId": "predictions_for_palestra_mod", "nodeClass": "decision", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Edad", "units": null, "w": "162", "x": "77", "y": "80", "z": 1}, {"color": "#4CFFA6", "definition": "result = age_choice", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "34", "identifier": "a8fd72d1ded1f40e1b6d93b09b0bcf826", "moduleId": "predictions_for_palestra_mod", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": "age_choice", "picture": null, "title": "Edad", "units": null, "w": "276", "x": "58", "y": "77", "z": 1}, {"color": "#4CFFA6", "definition": "result = sex_choice", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "34", "identifier": "a8fd72d1ded1f40e1b6d93b09b0bcf826_copy", "moduleId": "predictions_for_palestra_mod", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": "sex_choice", "picture": null, "title": "Sexo", "units": null, "w": "276", "x": "58", "y": "111", "z": 1}, {"color": "#4cffa6", "definition": "result = choice(sex_p,2, False)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sex_choice", "moduleId": "predictions_for_palestra_mod", "nodeClass": "decision", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Sexo", "units": null, "w": "162", "x": "77", "y": "114", "z": "-2"}, {"color": "#4CFFA6", "definition": "result = trabajo", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "34", "identifier": "a8fd72d1ded1f40e1b6d93b09b0bcf826_copy_copy", "moduleId": "predictions_for_palestra_mod", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": "trabajo", "picture": null, "title": "Educaci\u00f3n", "units": null, "w": "276", "x": "58", "y": "145", "z": 1}, {"color": "#4CFFA6", "definition": "result = checking_account_choice", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "34", "identifier": "a8fd72d1ded1f40e1b6d93b09b0bcf826_copy_copy_copy", "moduleId": "predictions_for_palestra_mod", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": "checking_account_choice", "picture": null, "title": "Nivel de Ingresos", "units": null, "w": "276", "x": "351", "y": "77", "z": 1}, {"color": "#4cffa6", "definition": "result = choice(checking_account_p,3, False)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "checking_account_choice", "moduleId": "predictions_for_palestra_mod", "nodeClass": "decision", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Nivel de Ingresos", "units": null, "w": "162", "x": "370", "y": "80", "z": "-2"}, {"color": "#4CFFA6", "definition": "result = duration_choice", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "34", "identifier": "a8fd72d1ded1f40e1b6d93b09b0bcf826_copy_copy_copy_copy", "moduleId": "predictions_for_palestra_mod", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": "duration_choice", "picture": null, "title": "Duraci\u00f3n", "units": null, "w": "276", "x": "351", "y": "111", "z": 1}, {"color": "#4cffa6", "definition": "result = choice(duration_p,4, False)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "duration_choice", "moduleId": "predictions_for_palestra_mod", "nodeClass": "decision", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Duraci\u00f3n", "units": null, "w": "162", "x": "370", "y": "114", "z": "-2"}, {"color": "#4CFFA6", "definition": "result = credit_amount_choice", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "34", "identifier": "a8fd72d1ded1f40e1b6d93b09b0bcf826_copy_copy_copy_copy_copy", "moduleId": "predictions_for_palestra_mod", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": "credit_amount_choice", "picture": null, "title": "Monto", "units": null, "w": "276", "x": "351", "y": "145", "z": 1}, {"color": "#4cffa6", "definition": "result = choice(credit_amount_p,5, False)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "credit_amount_choice", "moduleId": "predictions_for_palestra_mod", "nodeClass": "decision", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Monto", "units": null, "w": "162", "x": "370", "y": "148", "z": "-2"}, {"color": "#6699FF", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "predictions_for_palestra_mod", "moduleId": "predictions_mod", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Predictions for Palestra", "units": null, "w": "184", "x": 78, "y": 768, "z": 1}, {"color": "#EEEEEE", "definition": "result = 0", "description": "Predictions for Palestra", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "432", "identifier": "node1_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy", "moduleId": "predictions_for_palestra_mod", "nodeClass": "text", "nodeFont": "Arial Black,15", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 1}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "916", "x": "30", "y": "39", "z": "-3"}, {"color": "#4CBCFF", "definition": "# Checks if new loan is incomplete\n_is_incomplete = np.any(new_loan_array == '')\n\nif _is_incomplete:\n    result = 0\nelse:\n    # Create dataframe\n    _df = pd.DataFrame({'Age': int(age_choice), 'sex': sex_choice, 'Job category': job_category_transf, 'Housing': housing_default, 'Saving accounts': saving_accounts_default, 'Checking account': checking_account_choice, 'Credit amount': int(credit_amount_choice), 'Duration': int(duration_choice), 'Purpose': purpose_choice}, index = ['Loan'])\n    \n    # Create Age category column\n    _age_interval = (17, 25, 35, 60, 120)\n    _age_categories = ['Estudiante', 'Joven', 'Adulto', 'Mayor']\n    _df['Age category'] = pd.cut(_df['Age'], _age_interval, labels = _age_categories)\n    \n    # Add Job column (input is Job category)\n    _job_categories = {'Job category': ['0- sin estudios y no residente', '1- sin estudios y residente', '2- con estudios', '3- altamente capacitado'], 'Job': [0, 1, 2, 3]}\n    _job_categories_df = pd.DataFrame(_job_categories)\n    _df = _df.merge(_job_categories_df, on = 'Job category', how = 'left').drop(columns = 'Job category')\n    \n    result = _df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "new_loan_pre_processing", "moduleId": "predictions_for_palestra_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "New Loan - Pre-processing", "units": null, "w": "184", "x": "64", "y": "283", "z": 1}, {"color": "#4CBCFF", "definition": "# DATA PRE-PROCESSING FOR MACHINE LEARNING PREDICTION\n\n_data = new_loan_pre_processing.copy()\n\n# Categorical columns\n_categorical_columns = [i for i in _data.columns if i not in numerical_columns]\n\n# Create dummies for each categorical column\nfor i in _categorical_columns:\n    _data = _data.merge(pd.get_dummies(_data[i], drop_first = False, prefix = i), left_index = True, right_index = True)\n\n# Fill rest of categorical columns with 0\n_normalized_columns = normalized_data.columns\n_normalized_columns_exc = [i for i in _normalized_columns if i not in _data.columns]\nfor i in _normalized_columns_exc:\n    _data[i] = 0\n\n# Drop Risk_bad column\n_data = _data[_normalized_columns].drop(columns = 'Risk_malo')\n\n# Normalize numerical columns\nfor i in numerical_columns:\n    _original_data_i = data[i]\n    _min = _original_data_i.min()\n    _max = _original_data_i.max()\n    _scale = 1 / (_max - _min)\n    _normalized_values = _scale * _data[i] - _min * _scale\n    _data[i] = _normalized_values\n\nresult = _data", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "normalized_new_loan_data", "moduleId": "predictions_for_palestra_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Normalized New Loan Data", "units": null, "w": "184", "x": "282", "y": "283", "z": 1}, {"color": "#4CBCFF", "definition": "_predict = random_forest_method.predict(normalized_new_loan_data.values)[0]\n\n# Replace 0 and 1 values by 'good' and 'bad'\nif _predict == 0:\n    result = 'bueno'\nelse:\n    result = 'malo'", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "new_loan_prediction_rfm", "moduleId": "predictions_for_palestra_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "New Loan Prediction - RFM", "units": null, "w": "184", "x": "282", "y": "327", "z": 1}, {"color": "#4CBCFF", "definition": "_predict = logistic_regression_method.predict(normalized_new_loan_data.values)[0]\n\n# Replace 0 and 1 values by 'good' and 'bad'\nif _predict == 0:\n    result = 'bueno'\nelse:\n    result = 'malo'", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "new_loan_prediction_lrm", "moduleId": "predictions_for_palestra_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "New Loan Prediction - LRM", "units": null, "w": "184", "x": "282", "y": "372", "z": 1}, {"color": "#4CBCFF", "definition": "_predict = gaussian_naive_bayes_method.predict(normalized_new_loan_data.values)[0]\n\n# Replace 0 and 1 values by 'good' and 'bad'\nif _predict == 0:\n    result = 'bueno'\nelse:\n    result = 'malo'", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "new_loan_prediction_gnb", "moduleId": "predictions_for_palestra_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "New Loan Prediction - GNB", "units": null, "w": "184", "x": "282", "y": "417", "z": 1}, {"color": "#CB98FF", "definition": "# Checks if new loan is incomplete\n_is_incomplete = np.any(new_loan_array == '')\n\nif _is_incomplete:\n    result = pd.DataFrame({'RF': '-', 'LR': '-', 'GNB': '-'}, index = ['Score'])\nelse:\n    # Create DataArray indexed by Machine Learning Method\n    result = pd.DataFrame({'RF': new_loan_prediction_rfm, 'LR': new_loan_prediction_lrm, 'GNB': new_loan_prediction_gnb}, index = ['Evaluaci\u00f3n'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "new_loan_predictions", "moduleId": "predictions_for_palestra_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Calificaci\u00f3n", "units": null, "w": "184", "x": "502", "y": "372", "z": 1}, {"color": "#9999ff", "definition": "result = concat_index('', housing)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "housing_p", "moduleId": "indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Vivienda", "units": null, "w": "100", "x": "62", "y": "503", "z": 1}, {"color": "#9999ff", "definition": "result = concat_index('', saving_accounts)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "saving_accounts_p", "moduleId": "indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Caja de Ahorros", "units": null, "w": "100", "x": "162", "y": "503", "z": 1}, {"color": "#9999ff", "definition": "result = concat_index('', purpose)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "purpose_p", "moduleId": "indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Destino del Pr\u00e9stamo", "units": null, "w": "100", "x": "261", "y": "503", "z": 1}, {"color": "#4cffa6", "definition": "result = choice(purpose_p,2, False)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "purpose_choice", "moduleId": "predictions_for_palestra_mod", "nodeClass": "decision", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Destino", "units": null, "w": "162", "x": "662", "y": "148", "z": "-2"}, {"color": "#4CFFA6", "definition": "result = purpose_choice", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "34", "identifier": "a501ac82a248042bd9bd45c1258d9023b", "moduleId": "predictions_for_palestra_mod", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": "purpose_choice", "picture": null, "title": "Destino", "units": null, "w": "276", "x": "643", "y": "145", "z": 1}, {"color": "#4CBCFF", "definition": "result = random_forest_method", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ad6441de53d6c49939ceba4a2c65b463a", "moduleId": "predictions_for_palestra_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "random_forest_method", "picture": null, "title": "M\u00e9todo Random Forest", "units": null, "w": "184", "x": "64", "y": "327", "z": 1}, {"color": "#4CBCFF", "definition": "result = logistic_regression_method", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ad9f9591211e844209b2fe75ec01be29d", "moduleId": "predictions_for_palestra_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "logistic_regression_method", "picture": null, "title": "M\u00e9todo Regresi\u00f3n Log\u00edstica", "units": null, "w": "184", "x": "64", "y": "372", "z": 1}, {"color": "#4CBCFF", "definition": "result = gaussian_naive_bayes_method", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "abe60194ed1834730a6fecb8193bb9f0b", "moduleId": "predictions_for_palestra_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "gaussian_naive_bayes_method", "picture": null, "title": "M\u00e9todo Gaussian Naive Bayes", "units": null, "w": "184", "x": "64", "y": "417", "z": 1}, {"color": "#4CBCFF", "definition": "# Numpy array with new loan\nresult = np.array([age_choice, sex_choice, job_category_transf, housing_default, saving_accounts_default, checking_account_choice, credit_amount_choice, duration_choice, purpose_choice])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "new_loan_array", "moduleId": "predictions_for_palestra_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "New Loan Array", "units": null, "w": "184", "x": "64", "y": "239", "z": 1}, {"color": "#4CBCFF", "definition": "# Transform parameters input into dictionary\n_da = xr.where(grid_search_cv_params_grid_rfm == 'None', None, xr.where(grid_search_cv_params_grid_rfm == '', np.nan, grid_search_cv_params_grid_rfm))\n\n_list = []\n_params_dict = {}\n\nfor param in rf_parameters:\n    _param = subscript(_da, rf_parameters, param)\n    _has_none = (_param == None).sum().values.tolist()\n    _list = _param.dropna(ten_lines.name).values.astype(int).tolist()\n    if _has_none > 0:\n        _list.append(None)\n    _params_dict[param] = _list\n\n# Import libraries\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Create default model\n_model = RandomForestClassifier(random_state = fixed_random_state)\n\n# Determine grid values\n_params_grid = {\n    'n_estimators': _params_dict['n_estimators'],\n    'max_features': _params_dict['max_features'],\n    'max_depth': _params_dict['max_depth']\n    }\n\n# Grid search\n_grid_search = GridSearchCV(estimator = _model, cv = 5, param_grid = _params_grid, scoring = metrics_switcher[metric_for_feature_engineering])\n_grid_search.fit(x_train, y_train)\n\nresult = _grid_search", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "grid_search_cv_rfm", "moduleId": "random_forest_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Grid Search CV - Random Forest", "units": null, "w": "184", "x": "327", "y": "352", "z": 1}, {"color": "#EEEEEE", "definition": "result = 0", "description": "Modelo y M\u00e9tricas", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "342", "identifier": "node1_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy", "moduleId": "random_forest_method_mod", "nodeClass": "text", "nodeFont": "Arial Black,15", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 1}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "658", "x": 304, "y": 415, "z": -1}, {"color": "#EEEEEE", "definition": "result = 0", "description": "Hyperparameter Tuning", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "304", "identifier": "node1_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy", "moduleId": "random_forest_method_mod", "nodeClass": "text", "nodeFont": "Arial Black,15", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 1}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "657", "x": 304, "y": 101, "z": -1}, {"color": "#CB98FF", "definition": "_best_params_dict = grid_search_cv_rfm.best_params_\n_values = list(_best_params_dict.values())\n_keys = list(_best_params_dict.keys())\n_da = xr.DataArray(_values, coords = {'rf_parameters': _keys}, dims = ('rf_parameters',))\n\nresult = set_domain(_da, {'rf_parameters': rf_parameters})", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "grid_search_cv_best_params_rfm", "moduleId": "random_forest_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Mejores Par\u00e1metros de Grid Search CV - RFM", "units": null, "w": "184", "x": "543", "y": "311", "z": 1}, {"color": "#CB98FF", "definition": "_best_params_dict = randomized_search_cv_rfm.best_params_\n_values = list(_best_params_dict.values())\n_keys = list(_best_params_dict.keys())\n_da = xr.DataArray(_values, coords = {'rf_parameters': _keys}, dims = ('rf_parameters',))\n\nresult = set_domain(_da, {'rf_parameters': rf_parameters})", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "randomized_search_cv_best_params_rfm", "moduleId": "random_forest_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Mejores Par\u00e1metros de Randomized Search CV - RFM", "units": null, "w": "184", "x": "543", "y": "229", "z": 1}, {"color": "#CB98FF", "definition": "result = grid_search_cv_rfm.best_score_ ", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "grid_search_cv_best_score_rfm", "moduleId": "random_forest_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Mejor Resultado de Grid Search CV - RFM", "units": null, "w": "184", "x": "543", "y": "352", "z": 1}, {"color": "#CB98FF", "definition": "result = randomized_search_cv_rfm.best_score_ ", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "randomized_search_cv_best_score_rfm", "moduleId": "random_forest_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Mejor Resultado de Randomized Search CV - RFM", "units": null, "w": "184", "x": "543", "y": "270", "z": 1}, {"color": "#EEEEEE", "definition": "result = 0", "description": "Datasets", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "656", "identifier": "node1_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy", "moduleId": "random_forest_method_mod", "nodeClass": "text", "nodeFont": "Arial Black,15", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 1}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "230", "x": "62", "y": "101", "z": -1}, {"color": "#FFFF4B", "definition": "result = {'max_depth': 7, 'max_features': None, 'n_estimators': 80}", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "parameters_rfm", "moduleId": "random_forest_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Par\u00e1metros de Random Forest", "units": null, "w": "184", "x": "327", "y": "452", "z": 1}, {"color": "#CBCBCB", "definition": "parameters_rfm.node.definition = 'result = ' + str(grid_search_cv_rfm.best_params_ )\n\nresult = 0", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "40", "identifier": "paste_grid_search_cv_best_params_rfm", "moduleId": "random_forest_method_mod", "nodeClass": "button", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Pegar Par\u00e1metros de Grid Search CV - RFM", "units": null, "w": "154", "x": "750", "y": "327", "z": 1}, {"color": "#FFFF4B", "definition": "# properties\n_input_properties = {'defaultValue': ''}\n\n# values\nresult = xr.DataArray([['60','75','90','105','120','','','','',''], ['1','10','20','25','None','','','','',''], ['5','10','15','20','25','None','','','','']], coords=[(rf_parameters.name, [\"n_estimators\", \"max_features\", \"max_depth\"]),(ten_lines.name, [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"])]).astype(\"O\")", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "grid_search_cv_params_grid_rfm", "moduleId": "random_forest_method_mod", "nodeClass": "inputtable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Par\u00e1metros para Grid Search CV - Random Forest", "units": null, "w": "184", "x": "327", "y": "311", "z": 1}, {"color": null, "definition": "result = 0", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "node1", "moduleId": "random_forest_method_mod", "nodeClass": "pdindex", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "100", "x": 974, "y": 169, "z": 1}, {"color": null, "definition": "result = 0", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "node2", "moduleId": "random_forest_method_mod", "nodeClass": "pdindex", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "100", "x": 1039, "y": 210, "z": 1}, {"color": null, "definition": "result = 0", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "node3", "moduleId": "credit_risk_analysis_prediction_demo_esp", "nodeClass": "pdindex", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "100", "x": 745, "y": 264, "z": 1}, {"color": null, "definition": "result = 0", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "node4", "moduleId": "credit_risk_analysis_prediction_demo_esp", "nodeClass": "pdindex", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "100", "x": 853, "y": 295, "z": 1}, {"color": null, "definition": "result = 0", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "node5", "moduleId": "credit_risk_analysis_prediction_demo_esp", "nodeClass": "pdindex", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "100", "x": 763, "y": 166, "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index(['n_estimators', 'max_features', 'max_depth'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "rf_parameters", "moduleId": "indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Par\u00e1metros de RF", "units": null, "w": "100", "x": "261", "y": "209", "z": 1}, {"color": "#9999ff", "definition": "result = sequence_index(1, 10, _step = 1)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "ten_lines", "moduleId": "indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "10 L\u00edneas", "units": null, "w": "100", "x": "62", "y": "209", "z": 1}, {"color": null, "definition": "result = 0", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "node7", "moduleId": "random_forest_method_mod", "nodeClass": "pdindex", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "100", "x": 1031, "y": 251, "z": 1}, {"color": null, "definition": "result = 0", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "node8", "moduleId": "random_forest_method_mod", "nodeClass": "pdindex", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "100", "x": 1126, "y": 251, "z": 1}, {"color": null, "definition": "result = 0", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "node9", "moduleId": "random_forest_method_mod", "nodeClass": "pdindex", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "100", "x": 1183, "y": 251, "z": 1}, {"color": "#4CBCFF", "definition": "# Import uniform for C parameter\nfrom scipy.stats import randint as sp_randint\n\n_params_dict = {\n    'n_estimators': sp_randint(5, 125),\n    'max_features': sp_randint(1, 26),\n    'max_depth': [3, 6, 9, 12, 15, 18, None]\n}\n\n# Import libraries\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Create default model\n_model = RandomForestClassifier(random_state = fixed_random_state)\n\n# Random search\n_random_search = RandomizedSearchCV(estimator = _model, param_distributions = _params_dict, n_iter = 100, cv = 3, verbose = 2, random_state = fixed_random_state, n_jobs = -1, scoring = metrics_switcher[metric_for_feature_engineering])\n_random_search.fit(x_train, y_train)\n\nresult = _random_search", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "randomized_search_cv_rfm", "moduleId": "random_forest_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Randomized Search CV - Random Forest", "units": null, "w": "184", "x": "327", "y": "270", "z": 1}, {"color": "#9999ff", "definition": "result = sequence_index(1, 25, _step = 1)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "twenty_five_lines", "moduleId": "indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "25 L\u00edneas", "units": null, "w": "100", "x": "162", "y": "209", "z": 1}, {"color": "#FFFF4B", "definition": "result = checking_account_choice", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "saving_accounts_default", "moduleId": "predictions_for_palestra_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Saving Accounts (default)", "units": null, "w": "184", "x": "689", "y": "79", "z": 1}, {"color": "#FFFF4B", "definition": "if checking_account_choice == 'alta':\n    result = 'propia'\nelse:\n    result = 'alquila'", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "housing_default", "moduleId": "predictions_for_palestra_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Housing (default)", "units": null, "w": "184", "x": "689", "y": "113", "z": 1}, {"color": "#FFFF4B", "definition": "if trabajo == 'sin estudios':\n    result = '1- sin estudios y residente'\nelse:\n    result = '2- con estudios'", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "job_category_transf", "moduleId": "predictions_for_palestra_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Job Category (transformation)", "units": null, "w": "184", "x": "64", "y": "196", "z": 1}, {"color": "#4cffa6", "definition": "result = choice(metrics,3, False)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "32", "identifier": "metric_for_feature_engineering", "moduleId": "indexes_mod", "nodeClass": "decision", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "M\u00e9trica para Hyperparameter Tuning", "units": null, "w": "216", "x": "108", "y": "593", "z": "-2"}, {"color": "#4CFFA6", "definition": "result = metric_for_feature_engineering", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "31", "identifier": "a75888c3c23044c5fa4441d72b6987250", "moduleId": "random_forest_method_mod", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": "metric_for_feature_engineering", "picture": null, "title": "M\u00e9trica para Hyperparameter Tuning", "units": null, "w": "416", "x": 332, "y": 130, "z": 1}, {"color": "#4CBCFF", "definition": "result = {\n    'Exactitud': 'accuracy',\n    'Precisi\u00f3n': 'precision',\n    'Sensibilidad': 'recall',\n    'Puntuaci\u00f3n F1': 'f1',\n    'Puntuaci\u00f3n': None\n}", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "metrics_switcher", "moduleId": "indexes_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Switcher M\u00e9tricas", "units": null, "w": "184", "x": "418", "y": "594", "z": 1}, {"color": "#FFFF4B", "definition": "# properties\n_input_properties = {'defaultValue': 0.0}\n\n# values\nresult = xr.DataArray([0.2], coords=[(one_element.name, [\"Item\"])])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "test_size_input", "moduleId": "machine_learning_training_and_test_mod", "nodeClass": "inputtable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Tama\u00f1o de Muestra de Testeo", "units": null, "w": "184", "x": "566", "y": "114", "z": 1}, {"color": "#EEEEEE", "definition": "result = 0", "description": "Hyperparameter Tuning", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "304", "identifier": "node1_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy", "moduleId": "logistic_regression_method_mod", "nodeClass": "text", "nodeFont": "Arial Black,15", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 1}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "655", "x": 304, "y": 105, "z": -1}, {"color": "#CCCCCC", "definition": "result = 0", "description": "M\u00e9todo Regresi\u00f3n Log\u00edstica", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "706", "identifier": "node1_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy", "moduleId": "logistic_regression_method_mod", "nodeClass": "text", "nodeFont": "Arial Black,15", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 1}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "927", "x": 47, "y": 69, "z": "-2"}, {"color": "#EEEEEE", "definition": "result = 0", "description": "Datasets", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "656", "identifier": "node1_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy", "moduleId": "logistic_regression_method_mod", "nodeClass": "text", "nodeFont": "Arial Black,15", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 1}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "230", "x": "62", "y": "105", "z": -1}, {"color": "#4CBCFF", "definition": "result = metrics_switcher", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a8f5eeaba164d42da9a9e7d4a2f86b5e2", "moduleId": "random_forest_method_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "metrics_switcher", "picture": null, "title": "Switcher M\u00e9tricas", "units": null, "w": "184", "x": "327", "y": "179", "z": 1}, {"color": "#4CFFA6", "definition": "result = metric_for_feature_engineering", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "32", "identifier": "a75888c3c23044c5fa4441d72b6987250_copy_copy", "moduleId": "logistic_regression_method_mod", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": "metric_for_feature_engineering", "picture": null, "title": "M\u00e9trica para Hyperparameter Tuning", "units": null, "w": "415", "x": 331, "y": 135, "z": 1}, {"color": "#4CBCFF", "definition": "result = metrics_switcher", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a8f5eeaba164d42da9a9e7d4a2f86b5e2_copy", "moduleId": "logistic_regression_method_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "metrics_switcher", "picture": null, "title": "Switcher M\u00e9tricas", "units": null, "w": "184", "x": "327", "y": "183", "z": 1}, {"color": "#4CFFA6", "definition": "result = metric_for_feature_engineering", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "36", "identifier": "a9bb94c6c5a8b498ca937535f54ef5943", "moduleId": "indexes_mod", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "metric_for_feature_engineering", "picture": null, "title": "M\u00e9trica para Hyperparameter Tuning", "units": null, "w": "308", "x": "62", "y": "591", "z": 1}, {"color": "#4CBCFF", "definition": "# Import uniform for C parameter\nfrom scipy.stats import uniform\n_params_dict = {'penalty': ['l1', 'l2'], 'C': uniform(loc = 0, scale = 15)}\n\n\n# Import libraries\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.linear_model import LogisticRegression\n\n# Create default model\n_model = LogisticRegression(random_state = fixed_random_state, solver = 'liblinear')\n\n# Random search\n_random_search = RandomizedSearchCV(estimator = _model, param_distributions = _params_dict, n_iter = 100, cv = 3, verbose = 2, random_state = fixed_random_state, n_jobs = -1, scoring = metrics_switcher[metric_for_feature_engineering])\n_random_search.fit(x_train, y_train)\n\nresult = _random_search", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "randomized_search_cv_lrm", "moduleId": "logistic_regression_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Randomized Search CV - Regresi\u00f3n Log\u00edstica", "units": null, "w": "184", "x": "327", "y": "274", "z": 1}, {"color": "#FFFF4B", "definition": "# properties\n_input_properties = {'defaultValue': ''}\n\n# values\nresult = xr.DataArray([['l1','l2','','','','','','','',''], ['0.5','0.75','1.','2','3','5','7','9','11','13']], coords=[(lr_parameters.name, [\"penalty\", \"C\"]),(ten_lines.name, [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"])]).astype(\"O\")", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "grid_search_cv_params_grid_lrm", "moduleId": "logistic_regression_method_mod", "nodeClass": "inputtable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Par\u00e1metros para Grid Search CV - LRM", "units": null, "w": "184", "x": "327", "y": "315", "z": 1}, {"color": "#4CBCFF", "definition": "# Transform parameters input into dictionary\n_da = xr.where(grid_search_cv_params_grid_lrm == '', np.nan, grid_search_cv_params_grid_lrm)\n\n_list = []\n_params_dict = {}\n\nfor param in lr_parameters:\n    _param = subscript(_da, lr_parameters, param).dropna(ten_lines.name).values\n    _list = _param.astype(float).tolist() if param == 'C' else _param.tolist()\n    _params_dict[param] = _list\n\n# Import libraries\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\n\n# Create default model\n_model = LogisticRegression(random_state = fixed_random_state, solver = 'liblinear')\n\n# Grid search\n_grid_search = GridSearchCV(estimator = _model, cv = 5, param_grid = _params_dict, scoring = metrics_switcher[metric_for_feature_engineering])\n_grid_search.fit(x_train, y_train)\n\nresult = _grid_search", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "grid_search_cv_lrm", "moduleId": "logistic_regression_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Grid Search CV - Regresi\u00f3n Log\u00edstica", "units": null, "w": "184", "x": "327", "y": "356", "z": 1}, {"color": "#CB98FF", "definition": "_best_params_dict = randomized_search_cv_lrm.best_params_\n_values = list(_best_params_dict.values())\n_keys = list(_best_params_dict.keys())\n_da = xr.DataArray(_values, coords = {'lr_parameters': _keys}, dims = ('lr_parameters',))\n\nresult = set_domain(_da, {'lr_parameters': lr_parameters})", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "randomized_search_cv_best_params_lrm", "moduleId": "logistic_regression_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Mejores Par\u00e1metros de Randomized Search CV - LRM", "units": null, "w": "184", "x": "543", "y": "233", "z": 1}, {"color": "#CB98FF", "definition": "result = randomized_search_cv_lrm.best_score_ ", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "randomized_search_cv_best_score_lrm", "moduleId": "logistic_regression_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Mejor Resultado de Randomized Search CV - LRM", "units": null, "w": "184", "x": "543", "y": "274", "z": 1}, {"color": "#CB98FF", "definition": "_best_params_dict = grid_search_cv_lrm.best_params_\n_values = list(_best_params_dict.values())\n_keys = list(_best_params_dict.keys())\n_da = xr.DataArray(_values, coords = {'lr_parameters': _keys}, dims = ('lr_parameters',))\n\nresult = set_domain(_da, {'lr_parameters': lr_parameters})", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "grid_search_cv_best_params_lrm", "moduleId": "logistic_regression_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Mejores Par\u00e1metros de Grid Search CV - LRM", "units": null, "w": "184", "x": "543", "y": "315", "z": 1}, {"color": "#CB98FF", "definition": "result = grid_search_cv_lrm.best_score_ ", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "grid_search_cv_best_score_lrm", "moduleId": "logistic_regression_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Mejor Resultado de Grid Search CV - LRM", "units": null, "w": "184", "x": "543", "y": "356", "z": 1}, {"color": "#CBCBCB", "definition": "parameters_lrm.node.definition = 'result = ' + str(grid_search_cv_lrm.best_params_ )\n\nresult = 0", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "40", "identifier": "paste_grid_search_cv_best_params_lrm", "moduleId": "logistic_regression_method_mod", "nodeClass": "button", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Pegar Par\u00e1metros de Grid Search CV - LRM", "units": null, "w": "154", "x": "750", "y": "331", "z": 1}, {"color": "#FFFF4B", "definition": "result = {'C': 0.1, 'penalty': 'l1'}", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "parameters_lrm", "moduleId": "logistic_regression_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Par\u00e1metros de Regresi\u00f3n Log\u00edstica", "units": null, "w": "184", "x": "327", "y": "456", "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index(['penalty', 'C'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "lr_parameters", "moduleId": "indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Par\u00e1metros de LR", "units": null, "w": "100", "x": "362", "y": "209", "z": 1}, {"color": "#CCCCCC", "definition": "_values = list(parameters_lrm.values())\n_keys = list(parameters_lrm.keys())\n_da = xr.DataArray(_values, coords = {'lr_parameters': _keys}, dims = ('lr_parameters',))\n\nresult = set_domain(_da, {'lr_parameters': lr_parameters})", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "current_parameters_lrm", "moduleId": "logistic_regression_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Par\u00e1metros Actuales - LRM", "units": null, "w": "184", "x": "543", "y": "456", "z": 1}, {"color": "#CCCCCC", "definition": "_values = list(parameters_rfm.values())\n_keys = list(parameters_rfm.keys())\n_da = xr.DataArray(_values, coords = {'rf_parameters': _keys}, dims = ('rf_parameters',))\n\nresult = set_domain(_da, {'rf_parameters': rf_parameters})", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "current_parameters_rfm", "moduleId": "random_forest_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Par\u00e1metros Actuales - RFM", "units": null, "w": "184", "x": "543", "y": "452", "z": 1}, {"color": "#4CBCFF", "definition": "result = \"\"\" \n\n<style type=\"text/css\">\n  .big-menu-header{\n \n  }\n    .big-menu-wrap {\n    width: 95%;\n    margin: 0 auto;\n     \n    }\n\t   .big-menu-wrap h1 {\n     \tfont-weight: 100;\n    }\n\t\n\n    .big-menu-box {\n      float: left;\n      position: relative;\n      width: 50%;\n      height: 50%;\n      padding-bottom: 40%;\n    }\n    .big-menu-boxInner {\n      position: absolute;\n      left: 20px;\n      right: 20px;\n      top: 20px;\n      bottom: 20px;\n      overflow: hidden;\n\t  background-color: #006ea0;\n    }\n   \n       .big-menu-boxInner-disable {\n        background-color: #999;\n    }\n    .big-menu-boxInner img {\n      width: 100%;\n    }\n\t  .big-menu-boxInner h3 {\n          color: #F9F8F9;\n    font-size: 3em;\n    font-weight: lighter;\n    font-style: italic;\n    }\n\t\n\t.big-menu-boxInner h4 {\n     color: #FBF7F7;\n    font-size: 1.6em;\n    font-weight: lighter;\n    }\n    .big-menu-boxInner .big-menu-title-box {\n      position: absolute;\n      bottom: 0;\n      left: 0;\n      right: 0;\n      margin-bottom: -50px;\n      background: #000;\n      background: rgba(0, 0, 0, 0.5);\n      color: #F4F4F4;\n      padding: 10px;\n      text-align: center;\n      -webkit-transition: all 0.3s ease-out;\n      -moz-transition: all 0.3s ease-out;\n      -o-transition: all 0.3s ease-out;\n      transition: all 0.3s ease-out;\n    }\n    body.no-touch .big-menu-boxInner:hover .big-menu-title-box, body.touch .big-menu-boxInner.touchFocus .big-menu-title-box {\n      margin-bottom: 0;\n    }\n\t.big-menu-boxInner {\n\t transition: all .15s ease-in-out;\n\t }\n\t.big-menu-boxInner:hover {\n    background: #368EE0;\n    z-index: 100;\n    transform: scale(1.15,1.15);\n    big-menu-box-shadow: 0 5px 10px 0 rgba(0,0,0,.2);\n}\n.big-menu-elem-content{\nmargin-left:0%;\nmargin-right:0%;\nmargin-bottom:5%;\n}\n.big-menu-icon{\nfont-size:5em;\ncolor: rgba(255, 255, 255, .5); \n    top: 0;\n    left: 0;\n    z-index: -1;\n\n\n}\n    @media only screen and (max-width : 480px) {\n      /* Smartphone view: 1 tile */\n      .big-menu-box {\n        width: 100%;\n        padding-bottom: 100%;\n      }\n\t  \n\t  .big-menu-icon{font-size:4em;}\n    }\n    @media only screen and (max-width : 650px) and (min-width : 481px) {\n      /* Tablet view: 2 tiles */\n      .big-menu-box {\n        width: 50%;\n        padding-bottom: 50%;\n      }\n\t   .big-menu-icon{font-size:2em;}\n    }\n    @media only screen and (max-width : 1050px) and (min-width : 651px) {\n      /* Small desktop / ipad view: 3 tiles */\n      .big-menu-box {\n        width: 25%;\n        padding-bottom: 25%;\n      }\n\t   .big-menu-icon{font-size:3em;}\n    }\n    @media only screen and (max-width : 1290px) and (min-width : 1051px) {\n      /* Medium desktop: 4 tiles */\n      .big-menu-box {\n        width: 33%;\n        padding-bottom: 33%;\n      }\n\t   .big-menu-icon{font-size:5em;}\n    }\n  </style>\n  <!-- Enable media queries for old IE -->\n  <!--[if lt IE 9]>\n\t<script src=\"http://css3-mediaqueries-js.googlecode.com/svn/trunk/css3-mediaqueries.js\"></script>\n  <![endif]-->\n\n\n  <div class=\"big-menu-wrap\">\n     <div class=\"big-menu-header\">\n     <div class=\"big-menu-wrap\">\n     <div class=\"big-menu-header\">\n <h1 style = \"color:#5f6670;\">Demo de An\u00e1lisis y Predicci\u00f3n de Riesgo Crediticio</h1>\n  </div><div class=\"big-menu-box\"><div class=\"big-menu-boxInner \"> <span class=\"link-to-dashboard\" data-dashboard-id=\"2841\" data-target=\"_blank\"><div class=\"big-menu-elem-content\"><h3>Exploraci\u00f3n y An\u00e1lisis de Datos</h3></div><div class=\"big-menu-icon\"> <i class=\"fa fa-area-chart fa-4x\"></i></div></div></div>\n  <div class=\"big-menu-box\"><div class=\"big-menu-boxInner \"> <span class=\"link-to-dashboard\" data-dashboard-id=\"2847\" data-target=\"_blank\"><div class=\"big-menu-elem-content\"><h3>Aprendizaje Autom\u00e1tico y Predicciones</h3></div><div class=\"big-menu-icon\"> <i class=\"fa fa-gear fa-4x\"></i></div></div></div>\n  <!-- /#big-menu-wrap -->\n  \n  \"\"\"", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "menu_blocks", "moduleId": "indexes_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Menu Blocks", "units": null, "w": "184", "x": "418", "y": "631", "z": 1}, {"color": "#CCCCCC", "definition": "from sklearn.metrics import roc_auc_score\n\nresult = roc_auc_score(y_test, probability_prediction_rfm)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "roc_auc_rfm", "moduleId": "random_forest_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "\u00c1rea Bajo la Curva ROC - Random Forest", "units": null, "w": "184", "x": 754, "y": 539, "z": 1}, {"color": "#CCCCCC", "definition": "from sklearn.metrics import roc_auc_score\n\nresult = roc_auc_score(y_test, probability_prediction_lrm)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "roc_auc_lrm", "moduleId": "logistic_regression_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "\u00c1rea Bajo la Curva ROC - Regresi\u00f3n Log\u00edstica", "units": null, "w": "184", "x": 754, "y": 584, "z": 1}, {"color": "#CCCCCC", "definition": "from sklearn.metrics import roc_auc_score\n\nresult = roc_auc_score(y_test, probability_prediction_gnb)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "roc_auc_gnb", "moduleId": "gaussian_naive_bayes_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "\u00c1rea Bajo la Curva ROC - Gaussian NB", "units": null, "w": "184", "x": 717, "y": 189, "z": 1}, {"color": "#4CBCFF", "definition": "# Variable to refresh calculations when the 'Add New Loans to CSV' or 'Delete New Loans From CSV' buttons are executed\n_reload = reload_new_loans\n\nimport os\n\n_file_path = current_path + '/Files/new_loans.csv'\n\n# Check if CSV file exists\nif not os.path.isfile(_file_path):\n    _data = original_data.copy()\nelse:\n    if consider_new_loans == 'S\u00ed':\n        # Concatenate original loans with new loans\n        _data = pd.concat([original_data, new_data])\n    else:\n        # Take original loans only\n        _data = original_data.copy()\n\n_data = _data.rename(columns = {'Sex': 'sex'})\n\nresult = _data", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "original_new_data", "moduleId": "data_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Datos Originales + Nuevos", "units": null, "w": "184", "x": 278, "y": 191, "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index(['S\u00ed', 'No'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "yes_no", "moduleId": "indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "S\u00ed / No", "units": null, "w": "100", "x": "62", "y": "89", "z": 1}, {"color": "#4CBCFF", "definition": "_eng_esp = {\n            'male': 'hombre',\n            'female': 'mujer'\n            }\n\n_esp_eng = {value: key for key, value in _eng_esp.items()}\n\nresult = {'English-Espa\u00f1ol': _eng_esp, 'Espa\u00f1ol-English': _esp_eng}", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "mapa_sexo", "moduleId": "indexes_mod", "nodeClass": "variable", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Mapa Sexo", "units": null, "w": "184", "x": 68, "y": 670, "z": 1}, {"color": "#4CBCFF", "definition": "_eng_esp = {\n            'own': 'propia',\n            'rent': 'alquila',\n            'free': 'libre'\n            }\n\n_esp_eng = {value: key for key, value in _eng_esp.items()}\n\nresult = {'English-Espa\u00f1ol': _eng_esp, 'Espa\u00f1ol-English': _esp_eng}", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "mapa_vivienda", "moduleId": "indexes_mod", "nodeClass": "variable", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Mapa Vivienda", "units": null, "w": "184", "x": 68, "y": 711, "z": 1}, {"color": "#4CBCFF", "definition": "_eng_esp = {\n            'little': 'peque\u00f1a', \n            'moderate': 'moderada',\n            'quite rich': 'alta',\n            'rich': 'muy alta'\n            }\n\n_esp_eng = {value: key for key, value in _eng_esp.items()}\n\nresult = {'English-Espa\u00f1ol': _eng_esp, 'Espa\u00f1ol-English': _esp_eng}", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "mapa_caja_ahorros", "moduleId": "indexes_mod", "nodeClass": "variable", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Mapa Caja de Ahorros", "units": null, "w": "184", "x": 68, "y": 752, "z": 1}, {"color": "#4CBCFF", "definition": "_eng_esp = {\n            'little': 'peque\u00f1a', \n            'moderate': 'moderada',\n            'quite rich': 'alta',\n            'rich': 'muy alta'\n            }\n            \n_esp_eng = {value: key for key, value in _eng_esp.items()}\n\nresult = {'English-Espa\u00f1ol': _eng_esp, 'Espa\u00f1ol-English': _esp_eng}", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "mapa_cuenta_corriente", "moduleId": "indexes_mod", "nodeClass": "variable", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Mapa Cuenta Corriente", "units": null, "w": "184", "x": 68, "y": 792, "z": 1}, {"color": "#4CBCFF", "definition": "_eng_esp = {'radio/TV': 'radio/TV',\n            'education': 'educaci\u00f3n',\n            'furniture/equipment': 'muebles/equipamiento',\n            'car': 'auto',\n            'business': 'negocio', \n            'domestic appliances': 'equipamiento dom\u00e9stico', \n            'repairs': 'reparaciones', \n            'vacation/others': 'vacaciones/otros'\n            }\n_esp_eng = {value: key for key, value in _eng_esp.items()}\n\nresult = {'English-Espa\u00f1ol': _eng_esp, 'Espa\u00f1ol-English': _esp_eng}", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "mapa_destino_prestamo", "moduleId": "indexes_mod", "nodeClass": "variable", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Mapa Destino del Pr\u00e9stamo", "units": null, "w": "184", "x": 287, "y": 670, "z": 1}, {"color": "#4CBCFF", "definition": "_eng_esp = {\n            'good': 'bueno',\n            'bad': 'malo'\n            }\n\n_esp_eng = {value: key for key, value in _eng_esp.items()}\n\nresult = {'English-Espa\u00f1ol': _eng_esp, 'Espa\u00f1ol-English': _esp_eng}", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "mapa_riesgo", "moduleId": "indexes_mod", "nodeClass": "variable", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Mapa Riesgo", "units": null, "w": "184", "x": 287, "y": 792, "z": 1}, {"color": "#4CBCFF", "definition": "_eng_esp = {\n            'Student': 'Estudiante',\n            'Young': 'Joven',\n            'Adult': 'Adulto',\n            'Senior': 'Mayor'\n            }\n\n_esp_eng = {value: key for key, value in _eng_esp.items()}\n\nresult = {'English-Espa\u00f1ol': _eng_esp, 'Espa\u00f1ol-English': _esp_eng}", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "mapa_categoria_edad", "moduleId": "indexes_mod", "nodeClass": "variable", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Mapa Categor\u00eda de Edad", "units": null, "w": "184", "x": 287, "y": 711, "z": 1}, {"color": "#4CBCFF", "definition": "_eng_esp = {\n            '0- unskilled and non-resident': '0- sin estudios y no residente',\n            '1- unskilled and resident': '1- sin estudios y residente',\n            '2- skilled': '2- con estudios',\n            '3- highly skilled': '3- altamente capacitado'\n            }\n\n_esp_eng = {value: key for key, value in _eng_esp.items()}\n\nresult = {'English-Espa\u00f1ol': _eng_esp, 'Espa\u00f1ol-English': _esp_eng}", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "mapa_categoria_trabajo", "moduleId": "indexes_mod", "nodeClass": "variable", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Mapa Categor\u00eda de Trabajo", "units": null, "w": "184", "x": 287, "y": 752, "z": 1}, {"color": "#4CBCFF", "definition": "_suggested_credit_amount = 0\n_suggested_credit_amount_list = []\n\n_orig_credit_amount = new_loans_pre_processing['Credit amount']\n_orig_credit_amount = xr.DataArray(_orig_credit_amount, [complete_new_loans])\n\n_original_predicts = random_forest_method.predict(normalized_new_loans_data.values)\n\n_original_data_i = data['Credit amount']\n_min = _original_data_i.min()\n_max = _original_data_i.max()\n_scale = 1 / (_max - _min)\n\n_lower_amounts = (to_dataarray(credit_amount).astype(int) < _orig_credit_amount) * to_dataarray(credit_amount).astype(int)\n\n_i_loan_pos = 0\nfor loan in complete_new_loans:\n    _original_predict = _original_predicts[_i_loan_pos]\n    \n    if _original_predict == 0.:\n        _actual_credit_amount = subscript(_orig_credit_amount, complete_new_loans, loan).astype(int).values.tolist()\n        _suggested_credit_amount_list.append(_actual_credit_amount)\n        pass\n    else:\n        _normalized_original_values = normalized_new_loans_data[_i_loan_pos:_i_loan_pos+1]\n        _normalized_new_values = _normalized_original_values.copy()\n        \n        _lower_amounts_list = subset(subscript(_lower_amounts, complete_new_loans, loan)).astype(int).values\n        # Sort in descending order\n        _lower_amounts_list = np.sort(_lower_amounts_list)[::-1]\n        \n        if len(_lower_amounts_list) == 0:\n            _suggested_credit_amount_list.append('N/A')\n        else:\n            for i in range(0, len(_lower_amounts_list)):\n                _credit_amount_to_test = _lower_amounts_list[i]\n                _normalized_values = _scale * _credit_amount_to_test - _min * _scale\n                _normalized_new_values['Credit amount'] = _normalized_values\n                _predict = random_forest_method.predict(_normalized_new_values.values)[0]\n                \n                # Exit loop when succesful\n                if _predict == 0.:\n                    _suggested_credit_amount = _credit_amount_to_test\n                    _suggested_credit_amount_list.append(_suggested_credit_amount)\n                    break\n                elif i == len(_lower_amounts_list)-1:\n                    _suggested_credit_amount_list.append('N/A')\n        \n    _i_loan_pos = _i_loan_pos + 1\n\nresult = _suggested_credit_amount_list", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "new_loans_suggested_credit_amount_rfm", "moduleId": "predictions_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Montos Sugeridos para Nuevos Pr\u00e9stamos - RFM", "units": null, "w": "184", "x": 520, "y": 444, "z": 1}, {"color": "#4CBCFF", "definition": "_suggested_credit_amount = 0\n_suggested_credit_amount_list = []\n\n_orig_credit_amount = new_loans_pre_processing['Credit amount']\n_orig_credit_amount = xr.DataArray(_orig_credit_amount, [complete_new_loans])\n\n_original_predicts = logistic_regression_method.predict(normalized_new_loans_data.values)\n\n_original_data_i = data['Credit amount']\n_min = _original_data_i.min()\n_max = _original_data_i.max()\n_scale = 1 / (_max - _min)\n\n_lower_amounts = (to_dataarray(credit_amount).astype(int) < _orig_credit_amount) * to_dataarray(credit_amount).astype(int)\n\n_i_loan_pos = 0\nfor loan in complete_new_loans:\n    _original_predict = _original_predicts[_i_loan_pos]\n    \n    if _original_predict == 0.:\n        _actual_credit_amount = subscript(_orig_credit_amount, complete_new_loans, loan).astype(int).values.tolist()\n        _suggested_credit_amount_list.append(_actual_credit_amount)\n        pass\n    else:\n        _normalized_original_values = normalized_new_loans_data[_i_loan_pos:_i_loan_pos+1]\n        _normalized_new_values = _normalized_original_values.copy()\n        \n        _lower_amounts_list = subset(subscript(_lower_amounts, complete_new_loans, loan)).astype(int).values\n        # Sort in descending order\n        _lower_amounts_list = np.sort(_lower_amounts_list)[::-1]\n        \n        if len(_lower_amounts_list) == 0:\n            _suggested_credit_amount_list.append('N/A')\n        else:\n            for i in range(0, len(_lower_amounts_list)):\n                _credit_amount_to_test = _lower_amounts_list[i]\n                _normalized_values = _scale * _credit_amount_to_test - _min * _scale\n                _normalized_new_values['Credit amount'] = _normalized_values\n                _predict = logistic_regression_method.predict(_normalized_new_values.values)[0]\n                \n                # Exit loop when succesful\n                if _predict == 0.:\n                    _suggested_credit_amount = _credit_amount_to_test\n                    _suggested_credit_amount_list.append(_suggested_credit_amount)\n                    break\n                elif i == len(_lower_amounts_list)-1:\n                    _suggested_credit_amount_list.append('N/A')\n        \n    _i_loan_pos = _i_loan_pos + 1\n\nresult = _suggested_credit_amount_list", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "new_loans_suggested_credit_amount_lrm", "moduleId": "predictions_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Montos Sugeridos para Nuevos Pr\u00e9stamos - LRM", "units": null, "w": "184", "x": 520, "y": 487, "z": 1}, {"color": "#4CBCFF", "definition": "_suggested_credit_amount = 0\n_suggested_credit_amount_list = []\n\n_orig_credit_amount = new_loans_pre_processing['Credit amount']\n_orig_credit_amount = xr.DataArray(_orig_credit_amount, [complete_new_loans])\n\n_original_predicts = gaussian_naive_bayes_method.predict(normalized_new_loans_data.values)\n\n_original_data_i = data['Credit amount']\n_min = _original_data_i.min()\n_max = _original_data_i.max()\n_scale = 1 / (_max - _min)\n\n_lower_amounts = (to_dataarray(credit_amount).astype(int) < _orig_credit_amount) * to_dataarray(credit_amount).astype(int)\n\n_i_loan_pos = 0\nfor loan in complete_new_loans:\n    _original_predict = _original_predicts[_i_loan_pos]\n    \n    if _original_predict == 0.:\n        _actual_credit_amount = subscript(_orig_credit_amount, complete_new_loans, loan).astype(int).values.tolist()\n        _suggested_credit_amount_list.append(_actual_credit_amount)\n        pass\n    else:\n        _normalized_original_values = normalized_new_loans_data[_i_loan_pos:_i_loan_pos+1]\n        _normalized_new_values = _normalized_original_values.copy()\n        \n        _lower_amounts_list = subset(subscript(_lower_amounts, complete_new_loans, loan)).astype(int).values\n        # Sort in descending order\n        _lower_amounts_list = np.sort(_lower_amounts_list)[::-1]\n        \n        if len(_lower_amounts_list) == 0:\n            _suggested_credit_amount_list.append('N/A')\n        else:\n            for i in range(0, len(_lower_amounts_list)):\n                _credit_amount_to_test = _lower_amounts_list[i]\n                _normalized_values = _scale * _credit_amount_to_test - _min * _scale\n                _normalized_new_values['Credit amount'] = _normalized_values\n                _predict = gaussian_naive_bayes_method.predict(_normalized_new_values.values)[0]\n                \n                # Exit loop when succesful\n                if _predict == 0.:\n                    _suggested_credit_amount = _credit_amount_to_test\n                    _suggested_credit_amount_list.append(_suggested_credit_amount)\n                    break\n                elif i == len(_lower_amounts_list)-1:\n                    _suggested_credit_amount_list.append('N/A')\n        \n    _i_loan_pos = _i_loan_pos + 1\n\nresult = _suggested_credit_amount_list", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "new_loans_suggested_credit_amount_gnb", "moduleId": "predictions_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Montos Sugeridos para Nuevos Pr\u00e9stamos - GNB", "units": null, "w": "184", "x": 520, "y": 530, "z": 1}, {"color": "#CB98FF", "definition": "# Checks if there is any complete loan\nif len(complete_new_loans) == 0:\n    result = 0\nelse:\n    # Create DataArray indexed by Machine Learning Method\n    result = xr.concat([\n        xr.DataArray(new_loans_suggested_credit_amount_rfm, [complete_new_loans]),\n        xr.DataArray(new_loans_suggested_credit_amount_lrm, [complete_new_loans]),\n        xr.DataArray(new_loans_suggested_credit_amount_gnb, [complete_new_loans])\n        ], dim = machine_learning_methods)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "new_loans_suggested_credit_amounts", "moduleId": "predictions_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Montos Sugeridos", "units": null, "w": "184", "x": 734, "y": 487, "z": 1}, {"color": "#4CBCFF", "definition": "result = \"\"\" \n\n<style type=\"text/css\">\n  .big-menu-header{\n \n  }\n    .big-menu-wrap {\n    width: 95%;\n    margin: 0 auto;\n     \n    }\n\t   .big-menu-wrap h1 {\n     \tfont-weight: 100;\n    }\n\t\n\n    .big-menu-box {\n      float: left;\n      position: relative;\n      width: 50%;\n      height: 50%;\n      padding-bottom: 40%;\n    }\n    .big-menu-boxInner {\n      position: absolute;\n      left: 20px;\n      right: 20px;\n      top: 20px;\n      bottom: 20px;\n      overflow: hidden;\n\t  background-color: #006ea0;\n    }\n   \n       .big-menu-boxInner-disable {\n        background-color: #999;\n    }\n    .big-menu-boxInner img {\n      width: 100%;\n    }\n\t  .big-menu-boxInner h3 {\n          color: #F9F8F9;\n    font-size: 3em;\n    font-weight: lighter;\n    font-style: italic;\n    }\n\t\n\t.big-menu-boxInner h4 {\n     color: #FBF7F7;\n    font-size: 1.6em;\n    font-weight: lighter;\n    }\n    .big-menu-boxInner .big-menu-title-box {\n      position: absolute;\n      bottom: 0;\n      left: 0;\n      right: 0;\n      margin-bottom: -50px;\n      background: #000;\n      background: rgba(0, 0, 0, 0.5);\n      color: #F4F4F4;\n      padding: 10px;\n      text-align: center;\n      -webkit-transition: all 0.3s ease-out;\n      -moz-transition: all 0.3s ease-out;\n      -o-transition: all 0.3s ease-out;\n      transition: all 0.3s ease-out;\n    }\n    body.no-touch .big-menu-boxInner:hover .big-menu-title-box, body.touch .big-menu-boxInner.touchFocus .big-menu-title-box {\n      margin-bottom: 0;\n    }\n\t.big-menu-boxInner {\n\t transition: all .15s ease-in-out;\n\t }\n\t.big-menu-boxInner:hover {\n    background: #368EE0;\n    z-index: 100;\n    transform: scale(1.15,1.15);\n    big-menu-box-shadow: 0 5px 10px 0 rgba(0,0,0,.2);\n}\n.big-menu-elem-content{\nmargin-left:0%;\nmargin-right:0%;\nmargin-bottom:5%;\n}\n.big-menu-icon{\nfont-size:5em;\ncolor: rgba(255, 255, 255, .5); \n    top: 0;\n    left: 0;\n    z-index: -1;\n\n\n}\n    @media only screen and (max-width : 480px) {\n      /* Smartphone view: 1 tile */\n      .big-menu-box {\n        width: 100%;\n        padding-bottom: 100%;\n      }\n\t  \n\t  .big-menu-icon{font-size:4em;}\n    }\n    @media only screen and (max-width : 650px) and (min-width : 481px) {\n      /* Tablet view: 2 tiles */\n      .big-menu-box {\n        width: 50%;\n        padding-bottom: 50%;\n      }\n\t   .big-menu-icon{font-size:2em;}\n    }\n    @media only screen and (max-width : 1050px) and (min-width : 651px) {\n      /* Small desktop / ipad view: 3 tiles */\n      .big-menu-box {\n        width: 25%;\n        padding-bottom: 25%;\n      }\n\t   .big-menu-icon{font-size:3em;}\n    }\n    @media only screen and (max-width : 1290px) and (min-width : 1051px) {\n      /* Medium desktop: 4 tiles */\n      .big-menu-box {\n        width: 33%;\n        padding-bottom: 33%;\n      }\n\t   .big-menu-icon{font-size:2em;}\n    }\n  </style>\n  <!-- Enable media queries for old IE -->\n  <!--[if lt IE 9]>\n\t<script src=\"http://css3-mediaqueries-js.googlecode.com/svn/trunk/css3-mediaqueries.js\"></script>\n  <![endif]-->\n\n\n  <div class=\"big-menu-wrap\">\n     <div class=\"big-menu-header\">\n     <div class=\"big-menu-wrap\">\n     <div class=\"big-menu-header\">\n <h1 style = \"color:#5f6670;\">Demo de An\u00e1lisis y Predicci\u00f3n de Riesgo Crediticio</h1>\n  </div><div class=\"big-menu-box\"><div class=\"big-menu-boxInner \"> <span class=\"link-to-dashboard\" data-dashboard-id=\"777\" data-target=\"_blank\"><div class=\"big-menu-elem-content\"><h3>Exploraci\u00f3n y An\u00e1lisis de Datos</h3></div><div class=\"big-menu-icon\"> <i class=\"fa fa-area-chart fa-4x\"></i></div></div></div><div class=\"big-menu-box\"><div class=\"big-menu-boxInner \"> <span class=\"link-to-dashboard\" data-dashboard-id=\"778\" data-target=\"_blank\"><div class=\"big-menu-elem-content\"><h3>Aprendizaje Autom\u00e1tico y Predicciones</h3></div><div class=\"big-menu-icon\"> <i class=\"fa fa-gear fa-4x\"></i></div></div></div>\n  <!-- /#big-menu-wrap -->\n  \n  \"\"\"", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "menu_blocks_low_res", "moduleId": "indexes_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Menu Blocks Low Res", "units": null, "w": "184", "x": 717, "y": 631, "z": 1}, {"color": "#CB98FF", "definition": "_max = 99999\n_aux = apply_fn(new_loans_suggested_credit_amounts, lambda x: _max if x == 'N/A' else int(x))\n_minimum = _aux.min(machine_learning_methods.name)\n\nresult = xr.where(_minimum == _max, 'N/A', _minimum.astype(str))", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "new_loans_suggested_credit_amount", "moduleId": "predictions_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Monto Sugerido", "units": null, "w": "184", "x": 734, "y": 530, "z": 1}, {"color": "#cccccc", "definition": "_data = original_data\n\n# Get column values information\n_unique_values = _data.nunique()\n_data_types = _data.dtypes.astype(str).values.tolist()\n_null_values = _data.isnull().sum()\n_empty_values = ((_data == '') | (_data == ' ')).sum()\n\n# Create dataframe\n_df = pd.DataFrame({\n    'Unique values': _unique_values,\n    'Data type': _data_types, \n    'Null values': _null_values, \n    'Empty values': _empty_values\n    }\n)\n\n# Bad and good loans count and percentage\n_observations = ((_data['Risk'] == 'good') | (_data['Risk'] == 'bad')).sum()\n_good_loans = (_data['Risk'] == 'good').sum()\n_bad_loans = (_data['Risk'] == 'bad').sum()\n_good_loans_pc = _good_loans / (_good_loans + _bad_loans)\n_bad_loans_pc = _bad_loans / (_good_loans + _bad_loans)\n\n_bad_good_loans = pd.DataFrame({\n    'Unique values': [_good_loans, _good_loans_pc, _bad_loans, _bad_loans_pc, _observations],\n    'Data type': ['NA', 'NA', 'NA', 'NA', 'NA'],\n    'Null values': ['NA', 'NA', 'NA', 'NA', 'NA'],\n    'Empty values': ['NA', 'NA', 'NA', 'NA', 'NA']\n    },\n    index = ['Good loans', 'Good loans %','Bad loans', 'Bad loans %', 'Number of observations']\n)\n\n# Concat dataframes\nresult = pd.concat([_df, _bad_good_loans])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "data_overview", "moduleId": "data_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Visi\u00f3n General de los Datos", "units": null, "w": "184", "x": 278, "y": 104, "z": 1}, {"color": "#cccccc", "definition": "_data = data\n\n# Get column values information\n_unique_values = _data.nunique()\n_data_types = _data.dtypes.astype(str).values.tolist()\n_null_values = _data.isnull().sum()\n_empty_values = ((_data == '') | (_data == ' ')).sum()\n\n# Create dataframe\n_df = pd.DataFrame({\n    'Unique values': _unique_values,\n    'Data type': _data_types, \n    'Null values': _null_values, \n    'Empty values': _empty_values\n    }\n)\n\n# Bad and good loans count and percentage\n_observations = ((_data['Risk'] == 'good') | (_data['Risk'] == 'bad')).sum()\n_good_loans = (_data['Risk'] == 'good').sum()\n_bad_loans = (_data['Risk'] == 'bad').sum()\n_good_loans_pc = _good_loans / (_good_loans + _bad_loans)\n_bad_loans_pc = _bad_loans / (_good_loans + _bad_loans)\n\n_bad_good_loans = pd.DataFrame({\n    'Unique values': [_good_loans, _good_loans_pc, _bad_loans, _bad_loans_pc, _observations],\n    'Data type': ['NA', 'NA', 'NA', 'NA', 'NA'],\n    'Null values': ['NA', 'NA', 'NA', 'NA', 'NA'],\n    'Empty values': ['NA', 'NA', 'NA', 'NA', 'NA']\n    },\n    index = ['Good loans', 'Good loans %','Bad loans', 'Bad loans %', 'Number of observations']\n)\n\n# Concat dataframes\nresult = pd.concat([_df, _bad_good_loans])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "data_overview_post_manip", "moduleId": "data_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Visi\u00f3n General de los Datos (Post Manipulaci\u00f3n)", "units": null, "w": "184", "x": 496, "y": 233, "z": 1}, {"color": "#ffff4b", "definition": "result = 42", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fixed_random_state", "moduleId": "indexes_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Fixed Random State", "units": null, "w": "184", "x": 489, "y": 670, "z": 1}, {"color": "#4CBCFF", "definition": "from imblearn.over_sampling import SMOTE\n\n# Create instance\n_os = SMOTE(random_state = fixed_random_state)\n\n# Fit\n_os_smote_x, _os_smote_y = _os.fit_sample(train_test_array['x_train'], train_test_array['y_train'])\n\n# Create dictionary with the two tables\nresult = {'os_smote_x': _os_smote_x, 'os_smote_y': _os_smote_y}", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "train_arrays_smote", "moduleId": "machine_learning_training_and_test_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Matriz de Entrenamiento con Sobremuestreo (SMOTE)", "units": null, "w": "184", "x": 349, "y": 240, "z": 1}, {"color": "#4cffa6", "definition": "result = choice(job_category_p,1, False)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "trabajo", "moduleId": "predictions_for_palestra_mod", "nodeClass": "decision", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Educaci\u00f3n", "units": null, "w": "162", "x": "77", "y": "148", "z": "-2"}, {"color": "#4CBCFF", "definition": "_eng_esp = {\n            'Age': 'Edad',\n            'Job': 'Trabajo',\n            'Housing': 'Vivienda',\n            'Saving accounts': 'Caja de Ahorros',\n            'Checking account': 'Cuenta Corriente', \n            'Credit amount': 'Monto de Pr\u00e9stamo', \n            'Duration': 'Duraci\u00f3n', \n            'Purpose': 'Destino del Pr\u00e9stamo', \n            'Risk': 'Riesgo', \n            'Age category': 'Categor\u00eda de Edad', \n            'Job category': 'Categor\u00eda de Trabajo',\n            'sex': 'sex',\n            'value': 'value'\n            }\n\n_esp_eng = {value: key for key, value in _eng_esp.items()}\n\nresult = {'English-Espa\u00f1ol': _eng_esp, 'Espa\u00f1ol-English': _esp_eng}", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "mapa_columnas", "moduleId": "indexes_mod", "nodeClass": "variable", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Mapa Columnas", "units": null, "w": "184", "x": 489, "y": 711, "z": 1}, {"color": "#4CBCFF", "definition": "# DATA PRE-PROCESSING FOR MACHINE LEARNING MODELS\n\nfrom sklearn.preprocessing import MinMaxScaler\n\n_data = data.copy()\n_data = _data.rename(columns = mapa_columnas['English-Espa\u00f1ol'])\n\n# Drop columns that will not be used\n_data = _data.drop(columns = ['value', 'Categor\u00eda de Trabajo'])\n\n# Create dummies for each categorical column\nfor i in categorical_columns_esp:\n    _data = _data.merge(pd.get_dummies(_data[i], drop_first = (True if i != 'Riesgo' else False), prefix = i), left_index = True, right_index = True)\n\n# Drop original categorical columns from dataframe and Risk_good dummy (Risk_bad is the only needed)\n_data = _data.drop(columns = categorical_columns_esp)\n_data = _data.drop(columns = 'Riesgo_bueno')\n_final_columns = _data.columns.values\n\n# Normalize numerical columns (returns numpy array)\n_scaler = MinMaxScaler(feature_range = (0,1)).fit(_data)\n_data_normalized = _scaler.transform(_data)\n\n# Create dataframe from numpy array\nresult = pd.DataFrame(_data_normalized, columns = _final_columns)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "normalized_data_esp", "moduleId": "machine_learning_training_and_test_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Datos Normalizados ESP", "units": null, "w": "184", "x": 80, "y": 199, "z": 1}, {"color": "#9999ff", "definition": "_dict = mapa_columnas['English-Espa\u00f1ol']\n_dict_keys = [key for key in _dict]\n_categorical_keys = [value for value in categorical_columns.values if value in _dict_keys]\n\nresult = [_dict[k] for k in _categorical_keys if k in _dict]", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "categorical_columns_esp", "moduleId": "indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Categorical Columns ESP", "units": null, "w": "100", "x": 560, "y": 149, "z": 1}, {"color": "#4CBCFF", "definition": "result = normalized_data_esp", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a396a7c6d1a0e4ea3b10a1539c3376727", "moduleId": "data_exploration_analysis_mod", "nodeClass": "alias", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "normalized_data_esp", "picture": null, "title": "Datos Normalizados ESP", "units": null, "w": "184", "x": 579, "y": 110, "z": 1}, {"color": "#CCCCCC", "definition": "_hist_data = [bad_credits['Credit amount'], good_credits['Credit amount']]\r\n\r\n_group_labels = ['Malo', 'Bueno']\r\n\r\n_fig = ff.create_distplot(_hist_data, _group_labels, bin_size = [250, 250], show_rug = False, colors = [bad_credits_color, good_credits_color])\r\n_fig['layout'].update(legend = dict(orientation = 'h'))\r\n\r\nresult = plot(_fig)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "credit_amount_risk_distribution_plotly_1", "moduleId": "data_exploration_analysis_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Distribuci\u00f3n del Riesgo por Monto del Pr\u00e9stamo", "units": null, "w": "184", "x": 579, "y": 572, "z": 1}, {"color": "#CCCCCC", "definition": "_fig = ff.create_distplot(\r\n    [bad_credits['Duration'], good_credits['Duration']],\r\n    ['Malo','Bueno'],\r\n    bin_size = [3, 1],\r\n    show_rug = False,\r\n    colors = [bad_credits_color, good_credits_color]\r\n)\r\n_fig['layout'].update(legend = dict(orientation = 'h'))\r\n\r\nresult = plot(_fig)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "duration_risk_distribution_plotly_1", "moduleId": "data_exploration_analysis_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Distribuci\u00f3n del Riesgo por Duraci\u00f3n del Pr\u00e9stamo", "units": null, "w": "184", "x": 579, "y": 298, "z": 1}, {"color": "#9fc5e8", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "pyplan_library", "moduleId": "indexes_mod", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Pyplan library", "units": null, "w": "100", "x": 530, "y": 763, "z": 1}, {"color": "#4CFFA6", "definition": "result = consider_new_loans", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "31", "identifier": "ab345081727584b359f57bbfe481a6b20_1", "moduleId": "credit_risk_analysis_prediction_demo_esp", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "consider_new_loans", "picture": null, "title": "\u00bfConsiderar Nuevos Pr\u00e9stamos?", "units": null, "w": "404", "x": 105, "y": 394, "z": 1}, {"color": "#9fc5e8", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "61", "identifier": "pyplan_xarray_extensions", "moduleId": "pyplan_library", "nodeClass": "module", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Pyplan XArray Extensions", "units": null, "w": "116", "x": 100, "y": 100, "z": 1}, {"color": "#cb98ff", "definition": "def _fn(pypi_name,import_name=None):\n    \"\"\" Install library from pypi or .libs dir\n    pypi_name : Library name in pypi\n    import_name: library name for use in import\n    \"\"\"\n    import importlib\n    \n    def _exists_module(import_name):\n        try:\n            importlib.import_module(import_name)\n            return True\n        except ImportError:\n            return False\n\n    if import_name is None:\n        import_name = pypi_name\n        \n    if not _exists_module(import_name):\n        #check in lib folder\n        import os  \n        _lib_path = current_path + \"libs\"\n        \n        if not os.path.isdir(_lib_path):\n            os.mkdir(_lib_path) \n\n        #install lib to libs folder    \n        os.system(f\"pip install -t \\\"{_lib_path}\\\" {pypi_name}\")\n        \n        importlib.invalidate_caches()\n        \n        if not _exists_module(import_name):\n            raise ValueError(f\"Can't install the module '{import_name}'\")\n    return True\n    \n\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "33", "identifier": "install_library", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Install Library", "units": null, "w": "179", "x": 306, "y": 497, "z": 1}, {"color": "#cb98ff", "definition": "def _fn(dataArray,domainDic, defaultValue=None):\n    _da = dataArray\n    for key in domainDic:\n        _da = _da.reindex({key:domainDic[key].values})\n        _da = _da.rename({key:domainDic[key].name})\n    if not defaultValue is None:\n        _da = _da.fillna(defaultValue)\n    return _da\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "33", "identifier": "set_domain", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Set domain", "units": null, "w": "179", "x": 107, "y": 90, "z": 1}, {"color": "#cb98ff", "definition": "def _fn(values,name=\"Report\"):\n    _titles = [str(xx.name) for xx in values]\n    _index = pd.Index( _titles, name=name)\n    \n    return xr.concat(values,_index)\n\n\nresult = _fn\n", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "33", "identifier": "build_report", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Build Report", "units": null, "w": "179", "x": 107, "y": 127, "z": 1}, {"color": null, "definition": "def _fn(filepath, useOpenpyxl=False, dataOnly=True, readOnly=True ):\r\n    \"\"\" Create excel object from filepath.\r\n    filepath: path to excel file\r\n    useOpenpyxl: True for use custom \r\n    dataOnly: True for view only the values, not formula\r\n    readOnly: True for read only, False for write options\r\n    Ex.\r\n            excel_connection(\"\\path\\to\\the\\excelfile.xlsx\")\r\n    \"\"\"\r\n    import os\r\n    \r\n\r\n    if self.model.isLinux():\r\n        filepath = filepath.replace(\"\\\\\",\"/\")        \r\n\r\n    fullFilename=filepath\r\n    \r\n    if not os.path.isfile(fullFilename):\r\n        fullFilename = self.node.model.getNode(\"current_path\").result + filepath     \r\n        \r\n\r\n    if os.path.isfile(fullFilename):\r\n        if useOpenpyxl:\r\n            from openpyxl import load_workbook\r\n            return load_workbook(fullFilename, data_only=dataOnly, read_only=readOnly)\r\n        else:\r\n            return filepath\r\n    else:\r\n        raise ValueError(\"File not found\") \r\n        \r\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "33", "identifier": "excel_connection", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Excel connection", "units": null, "w": "179", "x": 306, "y": 90, "z": 1}, {"color": null, "definition": "def _fn(value,coords,dtype=None):\n    _data = np.full( tuple([(len(x)) for x in coords]),value, dtype=dtype )\n    return xr.DataArray( _data, coords )\n\nresult = _fn\n", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "33", "identifier": "create_dataarray", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Create dataArray", "units": null, "w": "179", "x": 107, "y": 164, "z": 1}, {"color": null, "definition": "def _fn(excel,sheetName=None,namedRange=None,cellRange=None, indexes=None, driver=\"Driver={Microsoft Excel Driver (*.xls, *.xlsx, *.xlsm, *.xlsb)};DBQ=%s;READONLY=TRUE\"):\r\n    \"\"\" return a pandas dataframe from excel.\r\n    excel: path to excel file or cp.excel object\r\n    sheetName: sheet name to be read\r\n    namedRange: name of the range to be read\r\n    cellRange: used with sheetname, for read from a simple range\r\n    indexes: Listo of columns names for convert to index of dataframe\r\n        Ex.\r\n            pandas_from_excel(excelNode,\"Sheet 1\")\r\n            pandas_from_excel(excelNode,namedRange=\"name_range\")\r\n            pandas_from_excel(excelNode,\"Sheet 1\",cellRange=\"A1:H10\")\r\n\r\n    \"\"\"\r\n\r\n    if isinstance(excel,str):\r\n        import os\r\n        \r\n        \r\n        if not os.path.isfile(excel):\r\n            excel = os.path.join(self.model.getNode(\"current_path\").result,excel)\r\n            \r\n            \r\n        if self.model.isLinux():\r\n            filename=excel\r\n            target_dir = os.path.dirname(filename)\r\n            file_name, file_extension = os.path.splitext(filename)\r\n            target_dir = os.path.join(target_dir, file_name)\r\n\r\n            file_to_read = os.path.join(target_dir, (namedRange if namedRange else \"\")  +\".pkl\")\r\n            if os.path.isfile(file_to_read):\r\n                df = pd.read_pickle(file_to_read,compression='gzip')\r\n                if not indexes is None:\r\n                    df.set_index(indexes,inplace=True)\r\n                return df\r\n            else:\r\n                from openpyxl import load_workbook\r\n                _wb = load_workbook(filename, data_only=True, read_only=True)\r\n                return _fn(_wb,sheetName,namedRange,cellRange,indexes)\r\n        else:\r\n            \r\n\r\n            import pyodbc\r\n    \r\n            cnxn = pyodbc.connect(driver % excel, autocommit=True)\r\n            cursor = cnxn.cursor()\r\n            table = \"\"\r\n            if not sheetName is None: \r\n                table = \"[\"+sheetName+\"$]\"\r\n            if not namedRange is None:\r\n                table = \"[\"+namedRange+\"]\"\r\n            if not cellRange is None:\r\n                table = \"[\"+sheetName+\"$\"+cellRange+\"]\"\r\n    \r\n            cursor.execute(\"SELECT * FROM \" + table)\r\n            rows = cursor.fetchall()\r\n            columnNames = [str(x[0]) for x in cursor.description]\r\n            cnxn.close()\r\n    \r\n            _df = pd.DataFrame.from_records(rows,None,None,columnNames)\r\n            _df = _df.dropna(how =\"all\")\r\n            if not indexes is None:\r\n                _df.set_index(indexes,inplace=True)\r\n            return _df\r\n    else:\r\n        \r\n        if \"openpyxl.workbook\" in str(type(excel)):\r\n            rangeToRead = None\r\n            if not namedRange is None:\r\n                the_range = excel.defined_names[namedRange]\r\n                dests = the_range.destinations\r\n                for title, coord in dests:\r\n                    ws = excel[title]\r\n                    rangeToRead=ws[coord]\r\n            elif not cellRange is None:\r\n                ws = excel[sheetName]\r\n                rangeToRead = ws[cellRange]\r\n            else: \r\n                rangeToRead = excel[sheetName]\r\n\r\n            nn=0\r\n            cols=[]\r\n            values = []\r\n            for row in rangeToRead:\r\n                if nn==0:\r\n                    cols = [str(c.value) for c in row]\r\n                else:\r\n                    values.append([c.value for c in row]) \r\n                nn+=1\r\n            df = pd.DataFrame(values,None,cols)\r\n            if not indexes is None:\r\n                if isinstance(indexes,str):\r\n                    indexes=[indexes]\r\n                toIndex = []\r\n                for indexColumn in indexes:\r\n                    if indexColumn in df.columns.values:\r\n                        toIndex.append(indexColumn)\r\n                if len(toIndex)>0:\r\n                    df.set_index(toIndex, inplace=True)\r\n\r\n            return df.dropna(how =\"all\")\r\n        else:\r\n            raise ValueError(\"excel can be cp.excel object\") \r\n            \r\n            \r\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "33", "identifier": "pandas_from_excel", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Pandas from excel", "units": null, "w": "179", "x": 304, "y": 238, "z": 1}, {"color": null, "definition": "def _fn(dataframe, columnName=None, removeEmpty=True):\r\n    \"\"\" Return a pd.Index from an column of a pandas dataframe.\r\n    dataframe: pandas dataframe\r\n    columnName: dataframe column name used for create cp.index. By default is created using the first column\r\n    removeEmpty: True for remove empty rows\r\n        Ex.\r\n            index_from_pandas(df)\r\n            index_from_pandas(df,\"column10\")\r\n    \"\"\"                \r\n    \r\n    _serie= None\r\n    if columnName is None:\r\n        _serie=dataframe[dataframe.columns[0]]\r\n    else:\r\n        _serie=dataframe[columnName]\r\n\r\n    if removeEmpty:\r\n        _serie.dropna(inplace=True)\r\n        if kind_to_string( _serie.dtype.kind )==\"string\" or kind_to_string(_serie.dtype.kind )==\"object\":\r\n            _serie = _serie[_serie!=\"\"]\r\n\r\n    return pd.Index(_serie.unique())\r\n\r\n            \r\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "33", "identifier": "index_from_pandas", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Index from Pandas", "units": null, "w": "179", "x": 304, "y": 275, "z": 1}, {"color": "#cb98ff", "definition": "def _fn(kind):\n    \"\"\"Returns the data type on human-readable string\n    \"\"\"\n    if kind in {'U', 'S'}:\n        return \"string\"\n    elif kind in {'b'}:\n        return \"boolean\"\n    elif kind in {'i','u','f','c'}:\n        return \"numeric\"\n    elif kind in {'m','M'}:\n        return \"date\"\n    elif kind in {'O'}:\n        return \"object\"\n    elif kind in {'V'}:\n        return \"void\"\n\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "33", "identifier": "kind_to_string", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Kind to String", "units": null, "w": "179", "x": 304, "y": 201, "z": 1}, {"color": null, "definition": "def _fn(excel, sheetName=None,namedRange=None,cellRange=None, columnName=None, removeEmpty=True):\r\n    \"\"\" Return a pd.Index from an excel file.\r\n    excel: pp.excel object\r\n    sheetName: sheet name to be read\r\n    namedRange: name of the range to be read\r\n    cellRange: used with sheetname, for read from a simple range\r\n    columnName: dataframe column name used for create pp.index. By default is created using the first column\r\n    removeEmpty: True for remove empty rows\r\n        Ex.\r\n            index_from_excel(excelNode,\"Sheet 1\")\r\n            index_from_excel(excelNode,namedRange=\"name_range\")\r\n            index_from_excel(excelNode,namedRange=\"name_range\", columnName=\"indicadores\")\r\n    \"\"\"                \r\n    if isinstance(excel,str) or \"openpyxl.workbook\" in str(type(excel)):\r\n        _df = pandas_from_excel(excel,sheetName,namedRange,cellRange)\r\n        return index_from_pandas(_df,columnName,removeEmpty)\r\n    else:\r\n        raise ValueError(\"excel can be excel_connection object or a str path to the filename\")\r\n\r\n            \r\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "33", "identifier": "index_from_excel", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Index from Excel", "units": null, "w": "179", "x": 304, "y": 312, "z": 1}, {"color": null, "definition": "def _fn(excel, sheetName=None,namedRange=None,cellRange=None, indexes=None, valueColumns=None, indexColumnHeaders=None, replaceByIndex=None, defaultValue=0):\r\n    \"\"\" Return a xr.DataArray from excel file.\r\n    excel: excel_connection object.\r\n    sheetName: sheet name to be read\r\n    namedRange: name of the range to be read.\r\n    cellRange: used with sheetName to read from a simple range.\r\n    indexes: pd.Index objects to perform a change_index operation.\r\n    valueColumns: string with the column name of the dataframe that contains the values.\r\n                pd.Index with column names to convert columns to index.\r\n    indexColumnHeaders: (optional) column names in pandas to parse with indexes. Used if header on dataframe is not equal to index identifiers.\r\n    replaceByIndex: (optional) replace index used in valueColumns by this index (using change_index).\r\n\r\n        Ex.\r\n            dataarray_from_excel(excelNode,\"Sheet 1\",indexes=[indicadores],valueColumns=\"descuentos\")\r\n            pp.dataarray_from_excel(excelNode,namedRange=\"nombre_rango\",indexes=[indicadores],valueColumns=time)\r\n    \"\"\"\r\n\r\n    dataframe = pandas_from_excel(excel,sheetName,namedRange,cellRange)\r\n    # Check size of dataframe. If it is empty, create empty dataArray. Else, proceed\r\n    if len(dataframe) == 0:\r\n        if not isinstance(indexes, list):\r\n            indexes = [indexes]\r\n        if isinstance(valueColumns, pd.Index):\r\n            indexes.append(valueColumns)\r\n        \r\n        _data = np.full(tuple([(len(x)) for x in indexes]), defaultValue)\r\n        return xr.DataArray(_data, indexes)\r\n    else:\r\n        valueIndex=None\r\n        if isinstance(valueColumns,pd.Index):\r\n            valueIndex = valueColumns\r\n            valueColumns = valueIndex.values\r\n        elif isinstance(valueColumns,str):\r\n            valueColumns = [valueColumns]\r\n    \r\n        if indexColumnHeaders is None:\r\n            indexColumnHeaders = [index.name for index in indexes]\r\n            \r\n        # Create total index and index names\r\n        _allindexes = indexes\r\n        _allIndexNames = indexColumnHeaders[:]\r\n        if not valueIndex is None:\r\n            _allindexes.append(valueIndex)\r\n            _allIndexNames.append(\"data_index\")    \r\n            \r\n        #fill other columns for prevent melt error\r\n        cols_not_in_df = [col for col in valueColumns if col not in dataframe.columns]\r\n        for col in cols_not_in_df:\r\n            dataframe[col] = np.nan\r\n    \r\n        _full = dataframe.reset_index().melt(id_vars=indexColumnHeaders,value_vars=valueColumns, var_name=\"data_index\", value_name=\"data_value\")\r\n        \r\n        # sum for acum over duplicate records\r\n        _full = _full.groupby(_allIndexNames, as_index=False).sum()\r\n        _dtype = _full[\"data_value\"].dtype\r\n        \r\n        _dataType = kind_to_string(_dtype.kind )\r\n        if _dataType==\"string\":\r\n            _full = _full[ (_full[\"data_value\"]!=\"\") & (_full['data_value'].notna()) ]\r\n        else:\r\n            _full = _full[ (_full[\"data_value\"]!=0) & (_full['data_value'].notna()) ]\r\n    \r\n        _full.set_index(_allIndexNames, inplace=True)\r\n        _da = _full[\"data_value\"].to_xarray()  \r\n    \r\n        # If indexed, rename index\r\n        if not indexes is None and not indexColumnHeaders is None:\r\n            if not isinstance(indexes,list):\r\n                indexes = [indexes]\r\n            idxPos=0\r\n            for cubeIndex in indexes:\r\n                newIndexName=cubeIndex.name\r\n                if idxPos<= len(indexColumnHeaders)-1:\r\n                    oldIndexName=indexColumnHeaders[idxPos]\r\n                    if not newIndexName in _da.coords:\r\n                        _da.coords[newIndexName] = _da.coords[oldIndexName]\r\n                        _da = _da.swap_dims({oldIndexName:newIndexName}).drop(oldIndexName)\r\n                    idxPos+=1\r\n                    # Reindex to complete combinations\r\n                    _da = _da.reindex({newIndexName:cubeIndex.values})\r\n    \r\n        if not valueIndex is None:\r\n            newIndexName=valueIndex.name\r\n            oldIndexName=\"data_index\"\r\n            if not newIndexName in _da.coords:\r\n                _da.coords[newIndexName] = _da.coords[oldIndexName]\r\n                _da = _da.swap_dims({oldIndexName:newIndexName}).drop(oldIndexName)\r\n            # Reindex to complete combinations\r\n            _da = _da.reindex({newIndexName:valueIndex.values})\r\n    \r\n            if not replaceByIndex is None:\r\n                _da = change_index(_da,valueIndex,replaceByIndex, 2 )    \r\n                \r\n        return _da.fillna(defaultValue)\r\n\r\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "33", "identifier": "dataarray_from_excel", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "DataArray from Excel", "units": null, "w": "179", "x": 306, "y": 386, "z": 1}, {"color": null, "definition": "def _fn(dataArray, indexes, values):\r\n    \"\"\"\r\n    Filter dataArray using the filterList filters. \r\n\r\n    dataArray: dataArray to be filtered\r\n    indexes: the index to filter \r\n    values: the value to filter \r\n        Ex.\r\n            subscript(dataArray, index, value)\r\n    \"\"\"\r\n    if not isinstance(dataArray,xr.DataArray):\r\n        raise ValueError(\"the 'dataArray' parameter must be of the type xr.DataArray\")\r\n\r\n    if not isinstance(indexes,list):\r\n        indexes = [indexes]\r\n    if not isinstance(values,list):\r\n        values = [values]\r\n        \r\n    res = dataArray\r\n    filterDic = {}\r\n    for _pos, indexItem in enumerate(indexes):\r\n        filterDic[indexItem.name] = values[_pos]\r\n\r\n    if len(filterDic)>0:\r\n        res = res.sel(filterDic, drop=True)\r\n\r\n    return res\r\n        \r\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "33", "identifier": "subscript", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Subscript", "units": null, "w": "179", "x": 306, "y": 127, "z": 1}, {"color": null, "definition": "def _fn(dataArray,oldIndex,newIndex,compareMode=1,defaultValue=None):\r\n    \"\"\" Change index of a dataArray object.\r\n    \"\"\"\r\n    _da = dataArray\r\n\r\n\r\n    if compareMode==1:\r\n        _temp = _da.reindex({oldIndex.name:newIndex.values})\r\n        _temp[newIndex.name] = _temp[oldIndex.name]\r\n        _temp = _temp.swap_dims({oldIndex.name:newIndex.name}).drop(oldIndex.name)\r\n        if not defaultValue is None:\r\n            _temp = _temp.fillna(defaultValue)\r\n        return _temp\r\n    else:\r\n\r\n        if len(oldIndex.values) == len(newIndex.values):\r\n            _tmp = _da.copy()\r\n            _tmp.coords[newIndex.name] = _tmp.coords[oldIndex.name]\r\n            _tmp.coords[newIndex.name].data = newIndex.values\r\n            _tmp = _tmp.swap_dims({oldIndex.name : newIndex.name}).drop(oldIndex.name)\r\n            return _tmp\r\n        elif len(oldIndex.values) > len(newIndex.values):\r\n            raise ValueError(\"Changeindex by pos for indices of different size is not implemented\")\r\n        else:\r\n            raise ValueError(\"Changeindex by pos for indices of different size is not implemented\")\r\n    \r\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "33", "identifier": "change_index", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Change index", "units": null, "w": "179", "x": 306, "y": 164, "z": 1}, {"color": null, "definition": "def _fn(date_start,date_end,freq='M',format='%Y.%m'):\r\n    \"\"\"Create time index usign start and end dates and freq. The result is formated to format parameter\r\n        Ex.\r\n            create_time('2016.01','2018.12')\r\n            create_time('2016.01.01','2016.12.31',freq='D',format='%d/%m/%Y')\r\n    \"\"\"\r\n    if \".\" in date_start:\r\n        date_start = date_start.replace('.', '-')\r\n    if \".\" in date_end:\r\n        date_end = date_end.replace('.', '-')\r\n    return pd.Index(pd.period_range(start=date_start, end=date_end, freq=freq).strftime(format))\r\n        \r\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "33", "identifier": "create_time", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "CreateTime", "units": null, "w": "179", "x": 505, "y": 90, "z": 1}, {"color": null, "definition": "def _fn(param1, param2, compareType=1, caseSensitive = True):\r\n    \"\"\"\r\n    param1: value or indexarray for compare\r\n    param2: index compare to\r\n    compareType: exact=1, start_with=2, end_with=3, contain=4  \r\n    caseSensitive: able to differentiate between uppercase and lowercase (by default True)\r\n\r\n    If param1 is a scalar (numeric or str) and param2 is an index:  return a dataArray indexed by param2 with True on ocurrences of param2\r\n        Ex. result = find(\"te\", region, cp.end_with)\r\n    If param1 is an index and param2 is an index too:  return a dataArray indexed by param1 and param2 with True on ocurrences of param1 on param2\r\n        Ex. result = find(subregion, region, cp.contain)\r\n\r\n    \"\"\"\r\n    def _internalFn(item,value):\r\n        if not isinstance(item,str):\r\n            item = str(item)\r\n        if not isinstance(value,str):\r\n            value = str(value)\r\n            \r\n        if compareType==1:\r\n            if caseSensitive:\r\n                return item == value\r\n            else:\r\n                return item.lower() == value.lower()\r\n        elif compareType==2:\r\n            if caseSensitive:\r\n                return item[:len(value)] == value\r\n            else:\r\n                return item[:len(value)].lower() == value.lower()                                    \r\n        elif compareType==3:\r\n            if caseSensitive:\r\n                return item[-len(value):] == value\r\n            else:\r\n                return item[-len(value):].lower() == value.lower()                    \r\n        elif compareType==4:\r\n            if caseSensitive:\r\n                return value in item\r\n            else:\r\n                return value.lower() in item.lower()\r\n\r\n    if (isinstance(param1,str) or str(param1).isnumeric()) and isinstance(param2,pd.Index):\r\n        vfn = np.vectorize(_internalFn)\r\n        return xr.DataArray(vfn(param2.values,param1),[param2])\r\n\r\n    if isinstance(param1,pd.Index) and isinstance(param2,pd.Index):\r\n        _res = create_dataarray(False, [param1,param2], dtype=bool)\r\n        for row in param1.values:\r\n            for col in param2.values:\r\n                _res.loc[ {param1.name:slice(row,row), param2.name:slice(col,col) }] = _internalFn(col,row)\r\n        return _res \r\n            \r\nresult = _fn\r\n", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "33", "identifier": "find", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Find", "units": null, "w": "179", "x": 107, "y": 201, "z": 1}, {"color": null, "definition": "def _fn(dataArray, dataMap, sharedIndex, defaultValue=0): \n    \"\"\"\n    Returns the value of dataArray indexed by the index of dataMap.\n    dataArray must be indexed by sharedIndex and dataArray values must correspond to elements of sharedIndex.\n    For example: Let's say you have a cube with an estimated inflation rate by Country (\"inflation_rate\" is the name of the cube; \"country\" is the name of the index) and you want to assign it to the corresponding Company depending on its location. On the other hand, there's a many-to-one map where each Company is allocated to a single Country (\"country_to_company_allocation\"). The sharedIndex, in this case, is Country (\"country\").\n    As a result, \n        lookup( inflation_rate , country_to_company_allocation , country )\n    will return the estimated inflation rate by Company.\n    \"\"\"\n\n    try:\n        return dataArray.sel({sharedIndex.name: dataMap }, drop=True) \n    except Exception as ex:\n        filtro =  dataMap.isin(sharedIndex.values)\n        valuesOk =  dataMap[dataMap.isin(sharedIndex.values)]\n        lookOk =  dataArray.sel({sharedIndex.name: valuesOk }, drop=True) \n        final = lookOk.reindex({dataMap.dims[0]:dataMap.coords[dataMap.dims[0]].values})\n        return final.fillna(defaultValue)\n    \nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "33", "identifier": "lookup", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Lookup", "units": null, "w": "179", "x": 505, "y": 127, "z": 1}, {"color": null, "definition": "def _fn(dataArray, mapInfo, sourceIndex, targetIndex, aggregationFunction='sum'):\n    \"\"\" Aggregates the values in DataArray to generate the result indexed by  targetIndex.\n        mapInfo gives the value of targetIndex for each element of sourceIndex (If the map does not match then the element will not be set into target index and information will be lost)\n        aggregationFuction (optional) especifies the function to be used when grouping data (sum, mean, min, max, median)\n\n        Example for aggregating time information into annual index the syntax is:\n            aggregate(dataArray, map, time, years)\n    \"\"\"\n    _map = pd.DataFrame({targetIndex.name:mapInfo.to_series()})\n    _serie = dataArray.to_series()\n    _df = pd.DataFrame({\"value\":_serie})\n    _df = _df[ _df[\"value\"]!=0 ]\n    _df = _df.join(_map).reset_index()\n    _df.drop(columns=[sourceIndex.name],inplace=True)\n    _newDimList = [xx for xx in dataArray.dims if xx not in [sourceIndex.name]]\n    _newDimList.append(targetIndex.name)\n    _df = _df.groupby(_newDimList).agg(aggregationFunction)\n    _da = _df[\"value\"].to_xarray()\n\n    #reindex\n    _reindexDic={targetIndex.name:targetIndex.values}\n    for coord in dataArray.coords:\n        if coord!=sourceIndex.name:\n            _reindexDic[ coord] = dataArray.coords[coord].values\n    _da = _da.reindex(_reindexDic)\n    # fin reindex\n    return _da.fillna(0)\n    \nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "33", "identifier": "aggregate", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Aggregate", "units": null, "w": "179", "x": 505, "y": 164, "z": 1}, {"color": "#cb98ff", "definition": "def _fn(cube):\n    \"\"\"Returns a list of all the elements of the index for which cube is true. The function is used to create a new index that is a subset of an existing index.\n        Ex. subset(sales>0)\n    \"\"\"\n    cond = cube>0\n    values = cond.coords[cond.dims[0]].values[cond.values]\n    return pd.Index(values)\n\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "33", "identifier": "subset", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Subset", "units": null, "w": "179", "x": 107, "y": 275, "z": 1}, {"color": "#cb98ff", "definition": "def _fn( param1, separator, part=None ): \n    \"\"\"\n    Description: Returns a DataArray object with text values formed by splitting the elements of param1 text values at each occurrence of separator \"separator\". \n    The DataArray will have the original dimension plus a new dimension 'Parts' of length (number of separators + 1). \n    All text values must have the same number of separators separator.        \n    \"\"\"\n    if isinstance(param1, pd.Index) : \n        param1 = xr.DataArray(param1.values, [param1]) \n\n    _q_separators = apply_fn( param1, lambda x: x.count(separator) ) \n    _max_q_separators = np.asscalar( _q_separators.max().values ) \n    _result_coords = ['Part ' + str(i) for i in range( 1, _max_q_separators + 2)] \n    _result_dim = pd.Index( _result_coords ) \n    _result_dim.name = \"Parts\" \n\n    _results = [] \n\n    for _part in range( _max_q_separators + 1 ): \n        _dataarray = apply_fn( param1, lambda x: x.split(separator)[_part] ) \n        _results.append(_dataarray) \n\n    _res = xr.concat( _results, dim = _result_dim )\n\n    if not part is None:\n        _res = _res.sel(Parts=\"Part \" + str(part),drop=True)\n\n    return _res\n\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "33", "identifier": "split_text", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Split Text", "units": null, "w": "179", "x": 107, "y": 312, "z": 1}, {"color": "#cb98ff", "definition": "def _fn(index): \n    \"\"\"\n    Return datarray with pd.index and yours positions as values\n    \"\"\"\n    return xr.DataArray(range(0,len(index)), [index] )\n\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "33", "identifier": "get_pos", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Get pos", "units": null, "w": "179", "x": 107, "y": 349, "z": 1}, {"color": "#cb98ff", "definition": "def _fn(*args):\n    \"\"\"\n    Concatenates two or more indexes and/or atomic values into a single new index\n    Return: new index\n        Ex.\n            cp.concatIndex(index1,index2,index3,value1,value2)\n    \"\"\"\n    _list = []\n    for arg in args:\n        if isinstance(arg,pd.Index):\n            values = (arg.values).tolist()\n            _list.extend(values)\n        else:\n            _list.append(arg)\n\n    seripandas = pd.Series(_list)\n    return pd.Index(seripandas.unique())\n\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "33", "identifier": "concat_index", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Concat Index", "units": null, "w": "179", "x": 107, "y": 386, "z": 1}, {"color": "#cb98ff", "definition": "def _fn(index,selection,includeAll=False):\n    \"\"\"Return the element in the \"selection\" position of the index. \n    \"\"\"\n    if selection==0 and includeAll==1:\n        return \"All\"\n    else:\n        values = None\n        if isinstance(index,pd.Index):\n            values = (index.values[:1000]).tolist()\n        elif isinstance(index,np.ndarray):\n            values = (index[:1000]).tolist()\n        else:\n            values = list(index)[:1000]\n        if not values is None and len(values)>=selection:\n            return values[selection-1]\n    return \"\"\n\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "33", "identifier": "choice", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Choice", "units": null, "w": "179", "x": 505, "y": 201, "z": 1}, {"color": "#cb98ff", "definition": "def _fn(dataArray,index,shift, initialValues=None):\n    \"\"\"\n    Perform cyclic calculations betwwen nodes.\n    cube: cp.cube to evaluate\n    index: Index to shift \n    shift: amount of elemnts to shift. Can be positive or negative\n    initialValues: (optional), initial values to apply to first \"shift\" elemnts\n    \"\"\"\n    _da = dataArray.shift({index.name:(shift*-1)})\n    if not initialValues is None:\n        _da = _da.fillna(initialValues)\n    return _da\n\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "33", "identifier": "dynamic", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Dynamic", "units": null, "w": "179", "x": 505, "y": 238, "z": 1}, {"color": "#EEEEEE", "definition": null, "description": "Pyplan XArray Extensions - 21-Aug-2019", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "521", "identifier": "a46ff2bbf32b248e9abbbeed6c482547b", "moduleId": "pyplan_xarray_extensions", "nodeClass": "text", "nodeFont": "Helvetica,15", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 1}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "851", "x": 46, "y": 53, "z": -1}, {"color": null, "definition": "def _fn(dataArray, index, position):\r\n    \"\"\"\r\n    Filter dataArray by integer position along the specified index.\r\n    \r\n    dataArray: dataArray to be filtered\r\n    index: pp.index \r\n    position: int \r\n        Ex.\r\n            pp.isel(dataArray1, index1, 0)\r\n    \"\"\"\r\n    if not isinstance(dataArray,xr.DataArray):\r\n        raise ValueError(\"the 'dataArray' parameter must be of the type xr.DataArray\")\r\n    return dataArray.isel({index.name:position},drop=True)\r\n    \r\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "33", "identifier": "slice_dataarray", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Slice", "units": null, "w": "179", "x": 505, "y": 275, "z": 1}, {"color": "#cb98ff", "definition": "def _fn(param):\n   return xr.DataArray(param.values,[param])\n   \n\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "33", "identifier": "to_dataarray", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "To Dataarray", "units": null, "w": "179", "x": 306, "y": 423, "z": 1}, {"color": null, "definition": "def _fn(dataArray,value=0):\r\n    \"\"\"Fill np.inf values with default value\r\n        Ex.\r\n            fill_inf(dataArray,0)\r\n    \"\"\"\r\n    return apply_fn(dataArray,lambda x: value if np.isinf(x) else x)\r\n    \r\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "33", "identifier": "fill_inf", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Fill inf", "units": null, "w": "179", "x": 505, "y": 312, "z": 1}, {"color": null, "definition": "def _fn(dataArray,value=0):\r\n    \"\"\"Fill np.inf and np.nan with default value\r\n        Ex.\r\n            fill_all(dataArray,0)\r\n    \"\"\"\r\n    return fill_inf(dataArray.fillna(value),value)\r\n    \r\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "33", "identifier": "fill_all", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Fill all", "units": null, "w": "179", "x": 505, "y": 349, "z": 1}, {"color": "#cb98ff", "definition": "def _fn( obj, applyFn, *args):\n    \"\"\" Apply \"applyFn\" to \"obj\" where obj can be DataArray or Index\n    \"\"\"\n    vfn = np.vectorize(applyFn)\n    if isinstance(obj,pd.Index):\n        \n        return pd.Index(np.unique(vfn(obj.values,*args)))\n        \n    if isinstance(obj,xr.DataArray):\n        return xr.apply_ufunc(vfn,obj,*args)\n    return None\n\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "33", "identifier": "apply_fn", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Apply", "units": null, "w": "179", "x": 107, "y": 238, "z": 1}, {"color": "#cb98ff", "definition": "def _fn(start, periods, freq='M', format='%Y.%m'):\n    \"\"\"Add periods to a date. Can set freq and output format \n        Ex.\n            pp.addPeriods('2016.01',6)\n            pp.apply( pp.addPeriods, inicio_de_proyectos , duracin_de_proyectos)\n    \"\"\"\n    if \".\" in start:\n        start = start.replace('.', '-')\n    if periods<0:\n        return pd.period_range(end=start, periods=-periods+1, freq=freq).strftime(format)[0] \n    else:\n        return pd.period_range(start=start, periods=periods+1, freq=freq).strftime(format)[-1] \n   \n\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "33", "identifier": "add_periods", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Add Periods", "units": null, "w": "179", "x": 505, "y": 386, "z": 1}, {"color": "#cb98ff", "definition": "def _fn(nodeIdX, nodeIdObjective, goal=0, startValue=1, matrixIndex=None ): \n    \"\"\" Finds the value of nodeIdX that makes nodeIdObjective equal to goal.\n    nodeIdX: String with id of node X\n    nodeIdObjective: String with id of node X\n    matrixIndex: Index for multidimensional goal seek\n    \"\"\"\n    _aa=subscript\n    _getNodeFn = globals()[\"getNode\"]\n    from scipy.optimize import newton\n    \n    if matrixIndex is None:\n    \n        def _f(x):\n            _getNodeFn(nodeIdX).definition = \"result = \" + str(x)\n            value = _getNodeFn(nodeIdObjective).result\n            return value - goal\n        \n        _res = newton(_f, x0=startValue)\n        return _res\n        \n    else:\n        _indexName=matrixIndex.name\n        for item in years:\n            def _f(x):\n                _values = _getNodeFn(nodeIdX).result\n                _values.loc[{_indexName: slice(item, item)}] = x\n                np.set_printoptions(threshold = np.prod(_values.values.shape))\n                data = np.array2string(_values.values, separator=\",\", precision=20 , formatter={'float_kind':lambda x: repr(x)}).replace('\\n','')\n                _getNodeFn(nodeIdX).definition = f\"result = xr.DataArray({data},[{_indexName}])\"\n                value = _getNodeFn(nodeIdObjective).result\n                return subscript(value,matrixIndex,item)\n            _res = newton(_f, x0=1)\n\n\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "33", "identifier": "goal_seek", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Goal Seek", "units": null, "w": "179", "x": 306, "y": 460, "z": 1}, {"color": "#cb98ff", "definition": "def _fn(rate, flow, time_index, offset = 1): \n    \"\"\"\"Returns the Net Present Value (NPV) of a cash flow with equally spaced periods. The flow parameter must contain a series of periodic payments (negative values) and inflows (positive values), indexed by time_index.\n        The optional offset parameter especifies the offset of the first value relative to the current time period. By default, offset is set to 1, indicating that the first value is discounted as if it is one step in the future\n    \"\"\"\n    _number_of_periods = get_pos(time_index) + offset \n    _present_values = flow / ( 1 + rate ) ** _number_of_periods \n    _npv = _present_values.sum(time_index.name ) \n    return _npv\n\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "33", "identifier": "npv", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "NPV", "units": null, "w": "179", "x": 505, "y": 423, "z": 1}, {"color": "#cb98ff", "definition": "def _fn(flow, time_index ):\n    \"\"\"Returns the Internal Rate of Return (IRR) of a series of periodic payments (negative values) and inflows (positive values). The IRR is the discount rate at which the Net Present Value (NPV) of the flows equals zero. \n        The variable flow must be indexed by time_index.\n\n    If the cash flow never changes sign, cp.irr() has no solution and returns NAN (Not A Number).\n    \"\"\"\n    import pandas as pd\n    _getNodeFn = globals()[\"getNode\"]\n    \n\n    _rest_of_indexes_labels = np.setdiff1d( flow.dims, [time_index.name])\n\n    _cube = None\n    if len( _rest_of_indexes_labels ) == 0: \n        _cube = np.irr( flow.values ) \n    else:\n        _rest_of_indexes = [_getNodeFn(xx).result for xx in _rest_of_indexes_labels]\n        _cube = create_dataarray(0.,_rest_of_indexes)\n        _multivalues = [idx.values for idx in _rest_of_indexes] \n        _values = pd.MultiIndex.from_product( _multivalues ).values \n        \n        for _item in _values: \n            _filter = {}\n\n            for _nn in range(len(_item)): \n                _filter[ _rest_of_indexes[_nn].name ] = _item[_nn]\n                \n            _toIrr = flow.sel(_filter).values\n            _irr = np.irr( _toIrr ) \n            _cube.loc[_filter] = _irr\n\n\n    return _cube\n\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "33", "identifier": "irr", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "IRR", "units": null, "w": "179", "x": 107, "y": 460, "z": 1}, {"color": "#cb98ff", "definition": "def _fn(investments, usefulLife, timeIndex, includeInCurrentMonth=False):\n    \"\"\" TODO: comment\n        investments: investments\n        usefulLife: useful life in years\n    \n        Ex.\n            linear_depreciation(investments, usefulLife)\n    \"\"\"\n    \n    timeCoords = xr.DataArray(timeIndex.values, [timeIndex])\n    _cuota = investments/usefulLife/12\n    _newTime = xr.DataArray( timeCoords.values, [('new_time',timeCoords.values ) ] )\n    _ending = apply_fn(timeCoords, add_periods, usefulLife*12)\n    if includeInCurrentMonth:\n        _proy = xr.where( (_newTime >= timeCoords) & (_newTime < _ending), _cuota , 0  )\n    else:\n        _proy = xr.where( (_newTime > timeCoords) & (_newTime <= _ending), _cuota , 0  )\n    _final = _proy.sum(timeIndex.name)\n    _final = _final.rename({\"new_time\":timeIndex.name})\n    return _final\n   \n\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "33", "identifier": "linear_depreciation", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Linear depreciation", "units": null, "w": "179", "x": 107, "y": 423, "z": 1}, {"color": "#cb98ff", "definition": "def _fn(dataArray, sortValues=True):\n    \"\"\"Generates a pd.Index with the unique values of the dataArray.\n    \"\"\"\n    np_values = dataArray.values.flatten()\n    \n    # Numpy unique function automatically reorders. Pandas unique, does not. \n    if sortValues is True:\n        return pd.Index(np.unique(np_values))\n    else:\n        return pd.Index(np_values).unique()\n\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "33", "identifier": "copy_index", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Copy Index", "units": null, "w": "179", "x": 505, "y": 460, "z": 1}, {"color": "#cb98ff", "definition": "def _fn(source, targetId):\n    \"\"\"Copy values of datArray \"source\" into dataArray with id 'targetId'. This function alter the definition of dataArray with 'targetId' identifier.\n            source: dataArray/index from copy values\n            targetId: identifier (string) of the target node \n    \"\"\"\n    \n    _getNodeFn = globals()[\"getNode\"]\n\n    if isinstance(source,str):\n        source = self.node.model._getNodeFn(source).result\n\n\n    if not isinstance(source,xr.DataArray) and not isinstance(source,pd.Index) and not isinstance(source,float) and not isinstance(source,int):\n        raise ValueError(\"The 'source' parameter must be a xr.DataArray, pd.Index, float or int\")\n\n    if not isinstance(targetId,str):\n        raise ValueError(\"The 'targetId' parameter must be a string (identifier of node)\")\n    \n        \n    newDef = \"\"\n    if isinstance(source,float) or isinstance(source,int):\n        newDef = f\"result = {str(source)}\" \n    elif isinstance(source,xr.DataArray):\n        _indexes = str(list(source.dims)).replace(\"'\",'')\n        np.set_printoptions(threshold = np.prod(source.values.shape))\n        _data = np.array2string(source.values, separator=\",\", precision=20 , formatter={'float_kind':lambda x: repr(x)}).replace('\\n','')\n        newDef = f\"result = xr.DataArray({_data},{_indexes})\"\n    elif isinstance(source,pd.Index):\n        np.set_printoptions(threshold = np.prod(source.values.shape))\n        _data = np.array2string(source.values, separator=\",\", precision=20 , formatter={'float_kind':lambda x: repr(x)}).replace('\\n','')\n        newDef = f\"result = pd.Index({_data})\"\n    \n    _getNodeFn(targetId).definition = newDef\n    return True\n\n\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "33", "identifier": "copy_as_values", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Copy as values", "units": null, "w": "179", "x": 106, "y": 497, "z": 1}, {"color": "#cb98ff", "definition": "def _sequence(_start, _end, _step=1):\n   \"\"\"\n   Returns a pd.Index with the sequence between 'start' and 'end' parameters. Both limits are inclusive. Values are converted to string.\n   \"\"\"\n   \n   try:\n       _start = int(_start)\n       _end = int(_end) + 1\n       _step = int(_step)\n   except:\n       raise ValueError(\"Only numbers are allowed as 'start', 'end' and 'step' parameters\")\n   \n   _list = [str(x) for x in range(_start, _end, _step)]\n   _index = pd.Index(_list)\n   return _index\n\nresult = _sequence", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "33", "identifier": "sequence_index", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Sequence Index", "units": null, "w": "179", "x": 505, "y": 497, "z": 1}, {"color": "#cb98ff", "definition": "def _fn(dataframe, domainDic, valueColumns, defaultValue = None, valueColumnsAsDim = True, sumDuplicateRecords = True):\r\n    \"\"\" Returns a DataArray (valueColumns is string or (valueColumns is pd.Index and valueColumnsAsDim is True)) or Dataset (valueColumns is a list or (valueColumns is a pd.Index and valueColumnsAsDim is False)) from a Pandas dataframe applying the set_domain function.\r\n    dataframe: Pandas dataframe with no index columns.\r\n    domainDic: Dictionary of column names and index names. Ex. {'Column Name': index_name}.\r\n    valueColumns: String, list or pd.Index. Dataframe's value columns.\r\n    defaultValue: Default value when applying set_domain function.\r\n    valueColumnsAsDim: If True, valueColumns becomes a dimension of resulting DataArray. If False, each value column becomes a variable of the resulting Dataset.\r\n    sumDuplicateRecords: If True, sums identical rows. Otherwise, removes duplicates (except the first one). \r\n    \r\n    Ex. pandas_to_dataarray(sales_dataframe, {'Sales Channel': sales_channels, 'Market Segment': market_segments, 'Month': time}, 'Sales', 0.)\r\n    \"\"\"\r\n    _index_value_columns = None\r\n    \r\n    # Check if valueColumns is string, list, np.ndarray or pd.Index (transform to list) and indexes is dict.\r\n    if isinstance(valueColumns, pd.Index):\r\n        _index_value_columns = valueColumns.copy()\r\n        _index_value_columns_name = _index_value_columns.name\r\n        valueColumns = valueColumns.values.tolist()\r\n    elif isinstance(valueColumns, np.ndarray):\r\n        valueColumns = valueColumns.tolist()\r\n    elif not isinstance(valueColumns, str) and not isinstance(valueColumns, list):\r\n        raise ValueError(\"valueColumns must be a string, a list or a pd.Index\")\r\n    if not isinstance(domainDic, dict):\r\n        raise ValueError(\"Indexes must be a dictionary\")\r\n    \r\n    # Transform indexes into list and create list with all columns.\r\n    _index_cols = list(domainDic.keys())\r\n    _cols = _index_cols.copy()\r\n    \r\n    if isinstance(valueColumns, list):\r\n        _cols = _cols + valueColumns\r\n    else:\r\n        _cols.append(valueColumns)\r\n    \r\n    # If valueColumnsAsDim is True, check if every column is in dataframe and filter it.\r\n    if (valueColumnsAsDim is True) and isinstance(_index_value_columns, pd.Index):\r\n        _df_columns = dataframe.columns.values.tolist()\r\n        _cols = [value for value in _df_columns if value in _cols]\r\n    \r\n    # Filter dataframe by columns.\r\n    _df = dataframe[_cols]\r\n    \r\n    # Sum identical rows or remove duplicates.\r\n    if sumDuplicateRecords is True:\r\n        _df = _df.groupby(_index_cols, as_index = False).sum()\r\n    else:\r\n        _duplicate_rows =_df.duplicated(_index_cols)\r\n        _df = _df[~_duplicate_rows]\r\n    \r\n    # If valueColumnsAsDim is True, melt valueColumns.\r\n    if (valueColumnsAsDim is True) and isinstance(_index_value_columns, pd.Index):\r\n        # Unpivot dataframe from wide format to long format by valueColumns.\r\n        _df = pd.melt(_df, id_vars = _index_cols, value_vars = _index_value_columns, var_name = _index_value_columns_name, value_name = 'values')\r\n        _index_cols = _index_cols + [_index_value_columns_name]\r\n        domainDic[_index_value_columns_name] = _index_value_columns\r\n        \r\n        # Create DataArray\r\n        _data = _df.set_index(_index_cols)['values'].to_xarray()\r\n        \r\n        # Appy set_domain function to DataArray / Dataset.\r\n        _data = set_domain(_data, domainDic, defaultValue)\r\n    else:\r\n        # Create DataArray / Dataset.\r\n        _data = _df.set_index(_index_cols)[valueColumns].to_xarray()\r\n        \r\n        # Appy set_domain function to DataArray / Dataset.\r\n        _data = set_domain(_data, domainDic, defaultValue)\r\n        \r\n    return _data\r\n\r\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "33", "identifier": "dataarray_from_pandas", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "DataArray from Pandas", "units": null, "w": "179", "x": 306, "y": 349, "z": 1}, {"color": "#cb98ff", "definition": "def _fn(dataArray, targetValue, targetIndex, method = 'Last'):\n    \"\"\" Returns a dataArray containing the value of targetIndex for which dataArray (indexed by targetIndex) is equal to targetValue.\n    dataArray: Xarray dataArray.\n    targetValue: Integer, Float or String.\n    targetIndex: Pandas Index.\n    method: There are two options: \"Last\" returns the last occurrence of targetIndex for which dataArray is equal to targetValue. \"First\" returns the first occurrence.\n    \"\"\"\n    \n    # Equals dataArray to targetValue and cumulates it along targetIndex.\n    _matriz_1_0 = xr.where(dataArray == targetValue, 1, 0)\n    _matriz_1_0_acum = xr.where(_matriz_1_0 == 1, _matriz_1_0.cumsum(targetIndex.name), 0)\n    \n    if method == 'Last':\n        # Get max cumulated value along targetIndex\n        _max = _matriz_1_0_acum.max(targetIndex.name)\n        _max = xr.where(_max == 0, np.nan, _max)\n        _matriz_max = xr.where(_matriz_1_0_acum == _max, to_dataarray(targetIndex), np.nan)\n        return _matriz_max.max(targetIndex.name)\n    elif method == 'First':\n        # Get min (1) cumulated value along targetIndex\n        _matriz_min = xr.where(_matriz_1_0_acum == 1, to_dataarray(targetIndex), np.nan)\n        return _matriz_min.max(targetIndex.name)\n    else:\n        raise ValueError(\"Insert a valid method\")\n\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "33", "identifier": "subindex", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Subindex", "units": null, "w": "179", "x": 700, "y": 90, "z": 1}, {"color": "#cb98ff", "definition": "def _concat_rows(array_param, index_param):\n   _index = pd.Index([])\n   for i in index_param.values:\n       _index = concat_index(_index , pd.Index(array_param.sel({index_param.name:i}, drop=True).values))\n   return _index\n\nresult = _concat_rows", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "33", "identifier": "concat_rows", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Concat Rows", "units": null, "w": "179", "x": 700, "y": 127, "z": 1}, {"color": "#cb98ff", "definition": "import plotly.io as pio\nfrom plotly.graph_objs._figure import Figure\n\ndef _fn(fig, **kwargs):\n    \"\"\"\n        Generate HTML with plotly chart\n        Params:\n            fig: plotly fig\n    \"\"\"\n    if isinstance(fig, dict):\n        fig = Figure(fig)\n    \n    if isinstance(fig,Figure):\n        if not \"layout\" in fig or not \"margin\" in fig[\"layout\"] or fig[\"layout\"][\"margin\"][\"b\"] is None:\n            fig.update_layout(margin=dict(b=10))\n        if not \"layout\" in fig or not \"margin\" in fig[\"layout\"] or fig[\"layout\"][\"margin\"][\"t\"] is None:\n            fig.update_layout(margin=dict(t=10))\n        if not \"layout\" in fig or not \"margin\" in fig[\"layout\"] or fig[\"layout\"][\"margin\"][\"l\"] is None:\n            fig.update_layout(margin=dict(l=10))\n            \n\n    return pio.to_html(fig,full_html=False, include_plotlyjs=False, **kwargs)\n\n\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "33", "identifier": "plot", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Plot", "units": null, "w": "179", "x": 700, "y": 164, "z": 1}, {"color": "#cb98ff", "definition": "def _fn(task_state=\"PROGRESS\",task_description=None,task_activity=None, task_info=None):\n    \"\"\"\n        Generate log entry. Used for schedule tasks\n        params:\n          task_state: PROGRESS, INFO, WARNING, FAILURE, RETRY, SUCCESS, REVOKED, STARTED, PENDING, RECEIVED\n          task_description: Shot description of task. example: start process\n          task_activity: other short description\n          task_info: json with more info \n    \"\"\"\n\n    import requests\n    from os import environ\n    import json\n    _params = {\n            \"state\": task_state,\n            \"description\": task_description,\n            \"activity\": task_activity,\n            \"info\": json.dumps(task_info)}\n    \n    res=None\n\n    if task_log_endpoint:\n        base_host = environ['PYPLAN_API_HOST'] + task_log_endpoint\n        res = requests.post(base_host, data=_params)\n    else:\n        print(str(_params))\n        \n    return res\n\n\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "33", "identifier": "log_task", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Log Task", "units": null, "w": "179", "x": 700, "y": 201, "z": 1}, {"color": "#cb98ff", "definition": "install_library(\"pyxlsb\")\n\ndef _fn(filepath):\n    from pyxlsb import open_workbook as open_xlsb\n    \n    _df = []\n    \n    with open_xlsb(filepath) as wb:\n        with wb.get_sheet(1) as sheet:\n            for row in sheet.rows():\n                _df.append([item.v for item in row])\n    \n    return pd.DataFrame(_df[1:], columns = _df[0])\n\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "33", "identifier": "pandas_from_xlsb_file", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Pandas from XLSB File", "units": null, "w": "179", "x": 700, "y": 238, "z": 1}]}