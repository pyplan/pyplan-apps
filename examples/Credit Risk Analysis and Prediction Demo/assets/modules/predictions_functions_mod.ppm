{"nodeList": [{"identifier": "acd3b2d839c6748f6a1969c751a07e21e", "definition": "result = random_forest_method", "title": "Random Forest Method", "nodeClass": "alias", "moduleId": "predictions_functions_mod", "x": 670, "y": 70, "z": 1, "w": 184, "h": 30, "description": null, "units": null, "color": "#4CBCFF", "errorInDef": false, "nodeInfo": {"showInputs": 1, "showOutputs": 1, "showLabel": 1, "showBorder": 1, "fill": 1, "useNodeFont": 0}, "nodeFont": null, "numberFormat": null, "originalId": "random_forest_method", "extraData": null, "picture": null, "evaluateOnStart": false, "defaultView": null, "prefixIdentifier": null, "hierarchy": null, "_isNodeCircular": null}, {"identifier": "a2c565a1880bf4e89b76e7d9ee06beaee", "definition": "result = logistic_regression_method", "title": "Logistic Regression Method", "nodeClass": "alias", "moduleId": "predictions_functions_mod", "x": 670, "y": 200, "z": 1, "w": 184, "h": 30, "description": null, "units": null, "color": "#4CBCFF", "errorInDef": false, "nodeInfo": {"showInputs": 1, "showOutputs": 1, "showLabel": 1, "showBorder": 1, "fill": 1, "useNodeFont": 0}, "nodeFont": null, "numberFormat": null, "originalId": "logistic_regression_method", "extraData": null, "picture": null, "evaluateOnStart": false, "defaultView": null, "prefixIdentifier": null, "hierarchy": null, "_isNodeCircular": null}, {"identifier": "ae5a80b7287fb40179953f656bc2e30a2", "definition": "result = gaussian_naive_bayes_method", "title": "Gaussian Naive Bayes Method", "nodeClass": "alias", "moduleId": "predictions_functions_mod", "x": 670, "y": 330, "z": 1, "w": 184, "h": 30, "description": null, "units": null, "color": "#4CBCFF", "errorInDef": false, "nodeInfo": {"showInputs": 1, "showOutputs": 1, "showLabel": 1, "showBorder": 1, "fill": 1, "useNodeFont": 0}, "nodeFont": null, "numberFormat": null, "originalId": "gaussian_naive_bayes_method", "extraData": null, "picture": null, "evaluateOnStart": false, "defaultView": null, "prefixIdentifier": null, "hierarchy": null, "_isNodeCircular": null}, {"identifier": "get_completed_loans_fn", "definition": "def _get_completed_loans(df: pd.DataFrame) -> list[int]:\n    _df = df[form_columns].reset_index()\n    _df = _df.melt(id_vars=['id'], value_vars=form_columns, var_name='columns', value_name='value')\n    _df['is_incomplete'] = (_df['value'].isna()) | (_df['value'] == 0)\n    _df = _df.groupby(['id'])[['is_incomplete']].agg('sum')\n\n    return _df[_df['is_incomplete'] == 0].index.tolist()\n\nresult = _get_completed_loans", "title": "Get completed loans", "nodeClass": "outputnode", "moduleId": "predictions_functions_mod", "x": 40, "y": 70, "z": 1, "w": 184, "h": 30, "description": null, "units": null, "color": "#4CBCFF", "errorInDef": false, "nodeInfo": {"showInputs": 1, "showOutputs": 1, "showLabel": 1, "showBorder": 1, "fill": 1, "useNodeFont": 0}, "nodeFont": null, "numberFormat": null, "originalId": null, "extraData": null, "picture": null, "evaluateOnStart": false, "defaultView": null, "prefixIdentifier": null, "hierarchy": null, "_isNodeCircular": false}, {"identifier": "pre_process_new_loans_fn", "definition": "def _preprocess_new_loans(df: pd.DataFrame) -> pd.DataFrame:\n    # Numpy array with new loans\n    _complete_loans = get_completed_loans_fn(df)\n\n    # Keep complete loans only from New Loans dataframe\n    _df = df[form_columns].reset_index()\n    _filter = _df['id'].isin(_complete_loans)\n    _df = _df[_filter]\n\n    # Checks if there is any complete loan\n    if len(_complete_loans) > 0:    \n        # Create Age category column\n        _age_interval = (17, 25, 35, 60, 120)\n        _age_categories = ['Student', 'Young', 'Adult', 'Senior']\n        _df['Age category'] = pd.cut(_df['age'], _age_interval, labels = _age_categories)\n        \n        # Add Job column (input is Job category)\n        _job_categories = {'job_category': ['0- unskilled and non-resident', '1- unskilled and resident', '2- skilled', '3- highly skilled'], 'Job': [0, 1, 2, 3]}\n        _job_categories_df = pd.DataFrame(_job_categories)\n        _df = _df.merge(_job_categories_df, on = 'job_category', how = 'left').drop(columns = 'job_category')\n\n        _df = _df.rename(columns={\n            'age': 'Age',\n            'sex': 'Sex',\n            'housing': 'Housing',\n            'savings_account': 'Saving accounts',\n            'checking_account': 'Checking account',\n            'credit_amount': 'Credit amount',\n            'duration': 'Duration',\n            'purpose': 'Purpose'\n        })\n        _df = _df.drop(columns=['id'])\n        \n        return _df\n    else:\n        return pd.DataFrame()\n\nresult = _preprocess_new_loans", "title": "Pre-process new loans", "nodeClass": "outputnode", "moduleId": "predictions_functions_mod", "x": 250, "y": 70, "z": 1, "w": 184, "h": 30, "description": null, "units": null, "color": "#4CBCFF", "errorInDef": false, "nodeInfo": {"showInputs": 1, "showOutputs": 1, "showLabel": 1, "showBorder": 1, "fill": 1, "useNodeFont": 0}, "nodeFont": null, "numberFormat": null, "originalId": null, "extraData": null, "picture": null, "evaluateOnStart": false, "defaultView": null, "prefixIdentifier": null, "hierarchy": null, "_isNodeCircular": false}, {"identifier": "normalize_new_loans_fn", "definition": "def _normalize_new_loans(df: pd.DataFrame) -> pd.DataFrame:\n    # DATA PRE-PROCESSING FOR MACHINE LEARNING PREDICTION\n\n    _data = pre_process_new_loans_fn(df)\n\n    # Categorical columns\n    _categorical_columns = [i for i in _data.columns if i not in numerical_columns]\n\n    # Create dummies for each categorical column\n    for i in _categorical_columns:\n        _data = _data.merge(pd.get_dummies(_data[i], drop_first = False, prefix = i), left_index = True, right_index = True)\n\n    # Fill rest of categorical columns with 0\n    _normalized_columns = normalized_data.columns\n    _normalized_columns_exc = [i for i in _normalized_columns if i not in _data.columns]\n    for i in _normalized_columns_exc:\n        _data[i] = 0\n\n    # Drop Risk_bad column\n    _data = _data[_normalized_columns].drop(columns = 'Risk_bad')\n\n    # Normalize numerical columns\n    for i in numerical_columns:\n        _original_data_i = data[i]\n        _min = _original_data_i.min()\n        _max = _original_data_i.max()\n        _scale = 1 / (_max - _min)\n        _normalized_values = _scale * _data[i] - _min * _scale\n        _data[i] = _normalized_values\n\n    return _data\n\nresult = _normalize_new_loans", "title": "Normalize new loans", "nodeClass": "variable", "moduleId": "predictions_functions_mod", "x": 460, "y": 70, "z": 1, "w": 184, "h": 30, "description": null, "units": null, "color": "#4CBCFF", "errorInDef": false, "nodeInfo": {"showInputs": 1, "showOutputs": 1, "showLabel": 1, "showBorder": 1, "fill": 1, "useNodeFont": 0}, "nodeFont": null, "numberFormat": null, "originalId": null, "extraData": null, "picture": null, "evaluateOnStart": false, "defaultView": null, "prefixIdentifier": null, "hierarchy": null, "_isNodeCircular": false}, {"identifier": "get_rfm_loan_prediction_fn", "definition": "def _get_rfm_loan_prediction(df: pd.DataFrame) -> pd.DataFrame:\n    return get_loan_prediction_fn(df, random_forest_method)\n\nresult = _get_rfm_loan_prediction", "title": "Get RFM loan prediction", "nodeClass": "outputnode", "moduleId": "predictions_functions_mod", "x": 670, "y": 110, "z": 1, "w": 184, "h": 30, "description": null, "units": null, "color": "#4CBCFF", "errorInDef": false, "nodeInfo": {"showInputs": 1, "showOutputs": 1, "showLabel": 1, "showBorder": 1, "fill": 1, "useNodeFont": 0}, "nodeFont": null, "numberFormat": null, "originalId": null, "extraData": null, "picture": null, "evaluateOnStart": false, "defaultView": null, "prefixIdentifier": null, "hierarchy": null, "_isNodeCircular": false}, {"identifier": "get_lrm_loan_prediction_fn", "definition": "def _get_lrm_loan_prediction(df: pd.DataFrame) -> pd.DataFrame:\n    return get_loan_prediction_fn(df, logistic_regression_method)\n\nresult = _get_lrm_loan_prediction", "title": "Get LRM loan prediction", "nodeClass": "outputnode", "moduleId": "predictions_functions_mod", "x": 670, "y": 240, "z": 1, "w": 184, "h": 30, "description": null, "units": null, "color": "#4CBCFF", "errorInDef": false, "nodeInfo": {"showInputs": 1, "showOutputs": 1, "showLabel": 1, "showBorder": 1, "fill": 1, "useNodeFont": 0}, "nodeFont": null, "numberFormat": null, "originalId": null, "extraData": null, "picture": null, "evaluateOnStart": false, "defaultView": null, "prefixIdentifier": null, "hierarchy": null, "_isNodeCircular": false}, {"identifier": "get_gnbm_loan_prediction_fn", "definition": "def _get_gnbm_loan_prediction(df: pd.DataFrame) -> pd.DataFrame:\n    return get_loan_prediction_fn(df, gaussian_naive_bayes_method)\n\nresult = _get_gnbm_loan_prediction", "title": "Get GNB loan prediction", "nodeClass": "outputnode", "moduleId": "predictions_functions_mod", "x": 670, "y": 370, "z": 1, "w": 184, "h": 30, "description": null, "units": null, "color": "#4CBCFF", "errorInDef": false, "nodeInfo": {"showInputs": 1, "showOutputs": 1, "showLabel": 1, "showBorder": 1, "fill": 1, "useNodeFont": 0}, "nodeFont": null, "numberFormat": null, "originalId": null, "extraData": null, "picture": null, "evaluateOnStart": false, "defaultView": null, "prefixIdentifier": null, "hierarchy": null, "_isNodeCircular": false}, {"identifier": "get_loan_prediction_fn", "definition": "def _get_loan_prediction(df: pd.DataFrame, predictor) -> pd.DataFrame:\n    _complete_new_loans = get_completed_loans_fn(df)\n    if len(_complete_new_loans) > 0:\n        _normalized_new_loans_data = normalize_new_loans_fn(df)\n        _predict = predictor.predict(_normalized_new_loans_data.values)\n\n        # Create dataframe with predictions index by Complete New Loans\n        _df = pd.DataFrame(_predict, _complete_new_loans)[0]\n        _df = _df.reindex(df.index.tolist()).fillna(-1).astype(int)\n    else:\n        _df = pd.DataFrame([-1] * len(df))\n    \n    return _df\n\nresult = _get_loan_prediction", "title": "Get loan prediction", "nodeClass": "variable", "moduleId": "predictions_functions_mod", "x": 460, "y": 110, "z": 1, "w": 184, "h": 30, "description": null, "units": null, "color": "#4CBCFF", "errorInDef": false, "nodeInfo": {"showInputs": 1, "showOutputs": 1, "showLabel": 1, "showBorder": 1, "fill": 1, "useNodeFont": 0}, "nodeFont": null, "numberFormat": null, "originalId": null, "extraData": null, "picture": null, "evaluateOnStart": false, "defaultView": null, "prefixIdentifier": null, "hierarchy": null, "_isNodeCircular": false}, {"identifier": "new_loans_suggested_credit_amount_fn", "definition": "def _get_suggested_credit_amount(df: pd.DataFrame, predictor) -> list[int]:\n    _complete_new_loans = get_completed_loans_fn(df)\n    if len(_complete_new_loans) > 0:\n        _complete_new_loans_index = pd.Index(_complete_new_loans, name='complete_new_loans')\n        _new_loans_pre_processing = pre_process_new_loans_fn(df)\n        _normalized_new_loans_data = normalize_new_loans_fn(df)\n\n        _suggested_credit_amount = 0\n        _suggested_credit_amount_list = []\n\n        _orig_credit_amount = _new_loans_pre_processing['Credit amount']\n        _orig_credit_amount = xr.DataArray(_orig_credit_amount, [_complete_new_loans_index])\n\n        _original_predicts = predictor.predict(_normalized_new_loans_data.values)\n\n        _original_data_i = data['Credit amount']\n        _min = _original_data_i.min()\n        _max = _original_data_i.max()\n        _scale = 1 / (_max - _min)\n\n        _lower_amounts = (pp.to_dataarray(credit_amount).astype(int) < _orig_credit_amount) * pp.to_dataarray(credit_amount).astype(int)\n\n        _i_loan_pos = 0\n        for loan in _complete_new_loans_index:\n            _original_predict = _original_predicts[_i_loan_pos]\n            \n            if _original_predict == 0.:\n                _actual_credit_amount = pp.subscript(_orig_credit_amount, _complete_new_loans_index, loan).astype(int).values.tolist()\n                _suggested_credit_amount_list.append(_actual_credit_amount)\n                pass\n            else:\n                _normalized_original_values = _normalized_new_loans_data[_i_loan_pos:_i_loan_pos+1]\n                _normalized_new_values = _normalized_original_values.copy()\n                \n                _lower_amounts_list = pp.subset(pp.subscript(_lower_amounts, _complete_new_loans_index, loan)).astype(int).values\n                # Sort in descending order\n                _lower_amounts_list = np.sort(_lower_amounts_list)[::-1]\n                \n                if len(_lower_amounts_list) == 0:\n                    _suggested_credit_amount_list.append(-1)\n                else:\n                    for i in range(0, len(_lower_amounts_list)):\n                        _credit_amount_to_test = _lower_amounts_list[i]\n                        _normalized_values = _scale * _credit_amount_to_test - _min * _scale\n                        _normalized_new_values['Credit amount'] = _normalized_values\n                        _predict = predictor.predict(_normalized_new_values.values)[0]\n                        \n                        # Exit loop when succesful\n                        if _predict == 0.:\n                            _suggested_credit_amount = _credit_amount_to_test\n                            _suggested_credit_amount_list.append(_suggested_credit_amount)\n                            break\n                        elif i == len(_lower_amounts_list)-1:\n                            _suggested_credit_amount_list.append(-1)\n                \n            _i_loan_pos = _i_loan_pos + 1\n        \n        _df = pd.DataFrame(_suggested_credit_amount_list, _complete_new_loans_index)[0]\n        _df = _df.reindex(df.index.tolist()).fillna(-1).astype(int)\n    else:\n        _df = pd.DataFrame([-1] * len(df))\n\n    return _df\n\nresult = _get_suggested_credit_amount", "title": "New Loans Suggested Credit Amount", "nodeClass": "variable", "moduleId": "predictions_functions_mod", "x": 460, "y": 150, "z": 1, "w": 184, "h": 30, "description": null, "units": null, "color": "#4CBCFF", "errorInDef": false, "nodeInfo": {"showInputs": 1, "showOutputs": 1, "showLabel": 1, "showBorder": 1, "fill": 1, "useNodeFont": 0}, "nodeFont": null, "numberFormat": null, "originalId": null, "extraData": null, "picture": null, "evaluateOnStart": false, "defaultView": null, "prefixIdentifier": null, "hierarchy": null, "_isNodeCircular": false}, {"identifier": "new_loans_suggested_credit_amount_rfm_fn", "definition": "def _get_suggested_credit_amount_rfm(df: pd.DataFrame) -> pd.DataFrame:\n    return new_loans_suggested_credit_amount_fn(df, random_forest_method)\n\nresult = _get_suggested_credit_amount_rfm", "title": "New Loans Suggested Credit Amount - RFM", "nodeClass": "outputnode", "moduleId": "predictions_functions_mod", "x": 670, "y": 150, "z": 1, "w": 184, "h": 30, "description": null, "units": null, "color": "#4CBCFF", "errorInDef": false, "nodeInfo": {"showInputs": 1, "showOutputs": 1, "showLabel": 1, "showBorder": 1, "fill": 1, "useNodeFont": 0}, "nodeFont": null, "numberFormat": null, "originalId": null, "extraData": null, "picture": null, "evaluateOnStart": false, "defaultView": null, "prefixIdentifier": null, "hierarchy": null, "_isNodeCircular": false}, {"identifier": "new_loans_suggested_credit_amount_lrm_fn", "definition": "def _get_suggested_credit_amount_lrm(df: pd.DataFrame) -> pd.DataFrame:\n    return new_loans_suggested_credit_amount_fn(df, logistic_regression_method)\n\nresult = _get_suggested_credit_amount_lrm", "title": "New Loans Suggested Credit Amount - LRM", "nodeClass": "outputnode", "moduleId": "predictions_functions_mod", "x": 670, "y": 280, "z": 1, "w": 184, "h": 30, "description": null, "units": null, "color": "#4CBCFF", "errorInDef": false, "nodeInfo": {"showInputs": 1, "showOutputs": 1, "showLabel": 1, "showBorder": 1, "fill": 1, "useNodeFont": 0}, "nodeFont": null, "numberFormat": null, "originalId": null, "extraData": null, "picture": null, "evaluateOnStart": false, "defaultView": null, "prefixIdentifier": null, "hierarchy": null, "_isNodeCircular": false}, {"identifier": "new_loans_suggested_credit_amount_gnbm_fn", "definition": "def _get_suggested_credit_amount_gnbm(df: pd.DataFrame) -> pd.DataFrame:\n    return new_loans_suggested_credit_amount_fn(df, gaussian_naive_bayes_method)\n\nresult = _get_suggested_credit_amount_gnbm", "title": "New Loans Suggested Credit Amount - GNBM", "nodeClass": "outputnode", "moduleId": "predictions_functions_mod", "x": 670, "y": 410, "z": 1, "w": 184, "h": 30, "description": null, "units": null, "color": "#4CBCFF", "errorInDef": false, "nodeInfo": {"showInputs": 1, "showOutputs": 1, "showLabel": 1, "showBorder": 1, "fill": 1, "useNodeFont": 0}, "nodeFont": null, "numberFormat": null, "originalId": null, "extraData": null, "picture": null, "evaluateOnStart": false, "defaultView": null, "prefixIdentifier": null, "hierarchy": null, "_isNodeCircular": false}, {"identifier": "pred_func_txt", "definition": "result = 0", "title": "Predictions functions", "nodeClass": "text", "moduleId": "predictions_functions_mod", "x": 20, "y": 50, "z": "-3", "w": 860, "h": 420, "description": null, "units": null, "color": "#eeeeee", "errorInDef": false, "nodeInfo": {"showInputs": 0, "showOutputs": 0, "showLabel": 1, "showBorder": 0, "fill": 1, "useNodeFont": 1}, "nodeFont": "Helvetica,21", "numberFormat": null, "originalId": null, "extraData": null, "picture": null, "evaluateOnStart": false, "defaultView": null, "prefixIdentifier": null, "hierarchy": null, "_isNodeCircular": null}]}