{
  "nodeList": [
    {
      "identifier": "filtered_regions",
      "definition": "_df = regions_by_user.value\n\nresult = pd.Index(\n    _df[_df['users'] == who_am_i.value]['regions'].unique()\n)",
      "title": "Filtered regions",
      "nodeClass": "index",
      "moduleId": "_root_",
      "x": 250,
      "y": 570,
      "z": 1,
      "w": "100",
      "h": "50",
      "description": null,
      "units": null,
      "color": "#9999ff",
      "errorInDef": false,
      "nodeInfo": {
        "showInputs": 0,
        "showOutputs": 0,
        "showLabel": 1,
        "showBorder": 1,
        "fill": 1,
        "useNodeFont": 0
      },
      "nodeFont": null,
      "numberFormat": null,
      "originalId": null,
      "extraData": null,
      "picture": null,
      "evaluateOnStart": false,
      "defaultView": null,
      "prefixIdentifier": null,
      "hierarchy": null,
      "_isNodeCircular": false
    },
    {
      "identifier": "users",
      "definition": "result = pd.Index(['User A', 'User B', 'User C'])",
      "title": "Users",
      "nodeClass": "index",
      "moduleId": "_root_",
      "x": 360,
      "y": 570,
      "z": 1,
      "w": "100",
      "h": "50",
      "description": null,
      "units": null,
      "color": "#9999ff",
      "errorInDef": false,
      "nodeInfo": {
        "showInputs": 0,
        "showOutputs": 0,
        "showLabel": 1,
        "showBorder": 1,
        "fill": 1,
        "useNodeFont": 0
      },
      "nodeFont": null,
      "numberFormat": null,
      "originalId": null,
      "extraData": null,
      "picture": null,
      "evaluateOnStart": false,
      "defaultView": null,
      "prefixIdentifier": null,
      "hierarchy": null,
      "_isNodeCircular": false
    },
    {
      "identifier": "regions",
      "definition": "result = pd.Index(['North America', 'South America', 'Europe', 'Asia', 'Africa'])",
      "title": "Regions",
      "nodeClass": "index",
      "moduleId": "_root_",
      "x": 160,
      "y": 470,
      "z": 1,
      "w": "100",
      "h": "50",
      "description": null,
      "units": null,
      "color": "#9999ff",
      "errorInDef": false,
      "nodeInfo": {
        "showInputs": 0,
        "showOutputs": 0,
        "showLabel": 1,
        "showBorder": 1,
        "fill": 1,
        "useNodeFont": 0
      },
      "nodeFont": null,
      "numberFormat": null,
      "originalId": null,
      "extraData": null,
      "picture": null,
      "evaluateOnStart": false,
      "defaultView": null,
      "prefixIdentifier": null,
      "hierarchy": null,
      "_isNodeCircular": false
    },
    {
      "identifier": "time",
      "definition": "result = pp.create_time('2023.01', '2023.12')",
      "title": "Time",
      "nodeClass": "index",
      "moduleId": "_root_",
      "x": 50,
      "y": 270,
      "z": 1,
      "w": "100",
      "h": "50",
      "description": null,
      "units": null,
      "color": "#9999ff",
      "errorInDef": false,
      "nodeInfo": {
        "showInputs": 0,
        "showOutputs": 0,
        "showLabel": 1,
        "showBorder": 1,
        "fill": 1,
        "useNodeFont": 0
      },
      "nodeFont": null,
      "numberFormat": null,
      "originalId": null,
      "extraData": null,
      "picture": null,
      "evaluateOnStart": false,
      "defaultView": null,
      "prefixIdentifier": null,
      "hierarchy": null,
      "_isNodeCircular": false
    },
    {
      "identifier": "forms_path",
      "definition": "result = 'forms_data/forms.db'",
      "title": "Forms path",
      "nodeClass": "inputscalar",
      "moduleId": "_root_",
      "x": 40,
      "y": 1360,
      "z": 1,
      "w": "180",
      "h": "30",
      "description": null,
      "units": null,
      "color": null,
      "errorInDef": false,
      "nodeInfo": {
        "showInputs": 1,
        "showOutputs": 0,
        "showLabel": 1,
        "showBorder": 1,
        "fill": 1,
        "useNodeFont": 0
      },
      "nodeFont": null,
      "numberFormat": null,
      "originalId": null,
      "extraData": null,
      "picture": null,
      "evaluateOnStart": false,
      "defaultView": null,
      "prefixIdentifier": null,
      "hierarchy": null,
      "_isNodeCircular": false
    },
    {
      "identifier": "revenue_report",
      "definition": "result = form_dataframe.groupby(['region', 'item_type'])['revenue'].agg('sum')",
      "title": "Revenue report",
      "nodeClass": "report",
      "moduleId": "_root_",
      "x": 1110,
      "y": 470,
      "z": 1,
      "w": "180",
      "h": "40",
      "description": null,
      "units": null,
      "color": null,
      "errorInDef": false,
      "nodeInfo": {
        "showInputs": 1,
        "showOutputs": 1,
        "showLabel": 1,
        "showBorder": 1,
        "fill": 1,
        "useNodeFont": 0
      },
      "nodeFont": null,
      "numberFormat": null,
      "originalId": null,
      "extraData": null,
      "picture": null,
      "evaluateOnStart": false,
      "defaultView": {
        "component_type": "core.Chart",
        "component_id": "ce745f6b-f221-4e56-aead-677157cbbaa9",
        "namespace": "ppc",
        "node_id": "revenue_report",
        "x": 0,
        "y": 0,
        "w": 6,
        "h": 3,
        "error_code": null,
        "error_detail": null,
        "properties": {
          "code": null,
          "custom_code": false,
          "title": {
            "enabled": true,
            "text": "Revenue report",
            "custom_text": "",
            "show_units": true,
            "units_text": ""
          },
          "type": "bar",
          "chart_properties": {
            "template": "simple_white"
          },
          "chart_layout": {},
          "selected_event": false,
          "hover_event": false,
          "hover_select_targets": [],
          "drilldown_event": true,
          "unlink": [],
          "pivot": {
            "agg": "sum",
            "params": {
              "x": "item_type",
              "y": "values",
              "color": "region"
            }
          },
          "page_size": {
            "rows": 1000,
            "columns": 1000
          },
          "hide_empty_data": false,
          "drilldowns": [],
          "show_pivot_toolbar": false,
          "show_filter_toolbar": false,
          "value_format": {
            "type": null,
            "thousands_separator": false,
            "decimal_places": null,
            "prefix": "",
            "suffix": "",
            "date_format": null
          },
          "available_drilldown_indexes": [],
          "supported_types_for_drilldown": [
            "bar",
            "line",
            "scatter",
            "area",
            "pie",
            "funnel",
            "funnel_area",
            "histogram",
            "strip"
          ]
        },
        "filters": {}
      },
      "prefixIdentifier": null,
      "hierarchy": null,
      "_isNodeCircular": false
    },
    {
      "identifier": "item_type",
      "definition": "result = pd.Index(['Beverages', 'Food', 'Others'])",
      "title": "Item types",
      "nodeClass": "index",
      "moduleId": "_root_",
      "x": 50,
      "y": 470,
      "z": 1,
      "w": "100",
      "h": "50",
      "description": null,
      "units": null,
      "color": "#9999ff",
      "errorInDef": false,
      "nodeInfo": {
        "showInputs": 0,
        "showOutputs": 0,
        "showLabel": 1,
        "showBorder": 1,
        "fill": 1,
        "useNodeFont": 0
      },
      "nodeFont": null,
      "numberFormat": null,
      "originalId": null,
      "extraData": null,
      "picture": null,
      "evaluateOnStart": false,
      "defaultView": null,
      "prefixIdentifier": null,
      "hierarchy": null,
      "_isNodeCircular": false
    },
    {
      "identifier": "product",
      "definition": "result = pd.Index(['Product A', 'Product B', 'Product C'])",
      "title": "Products",
      "nodeClass": "index",
      "moduleId": "_root_",
      "x": 50,
      "y": 870,
      "z": 1,
      "w": "100",
      "h": "50",
      "description": null,
      "units": null,
      "color": "#9999ff",
      "errorInDef": false,
      "nodeInfo": {
        "showInputs": 0,
        "showOutputs": 0,
        "showLabel": 1,
        "showBorder": 1,
        "fill": 1,
        "useNodeFont": 0
      },
      "nodeFont": null,
      "numberFormat": null,
      "originalId": null,
      "extraData": null,
      "picture": null,
      "evaluateOnStart": false,
      "defaultView": null,
      "prefixIdentifier": null,
      "hierarchy": null,
      "_isNodeCircular": false
    },
    {
      "identifier": "sales_data",
      "definition": "result = pd.read_pickle(current_path + 'inputs/sales_data.pkl', compression='gzip')",
      "title": "Sales data",
      "nodeClass": "datareading",
      "moduleId": "_root_",
      "x": 60,
      "y": 1040,
      "z": 1,
      "w": "180",
      "h": "40",
      "description": null,
      "units": null,
      "color": null,
      "errorInDef": false,
      "nodeInfo": {
        "showInputs": 1,
        "showOutputs": 1,
        "showLabel": 1,
        "showBorder": 1,
        "fill": 1,
        "useNodeFont": 0
      },
      "nodeFont": null,
      "numberFormat": null,
      "originalId": null,
      "extraData": null,
      "picture": null,
      "evaluateOnStart": false,
      "defaultView": null,
      "prefixIdentifier": null,
      "hierarchy": null,
      "_isNodeCircular": false
    },
    {
      "identifier": "sales_data_for_form",
      "definition": "_df = sales_data[sales_data['region'] == sales_data_region.value]\n_df['id_col'] = _df.index  # must be unique and constant for every individual record\n\nresult = _df",
      "title": "Sales data for form",
      "nodeClass": "variable",
      "moduleId": "_root_",
      "x": 390,
      "y": 1040,
      "z": 1,
      "w": "180",
      "h": "40",
      "description": null,
      "units": null,
      "color": "#4CBCFF",
      "errorInDef": false,
      "nodeInfo": {
        "showInputs": 1,
        "showOutputs": 1,
        "showLabel": 1,
        "showBorder": 1,
        "fill": 1,
        "useNodeFont": 0
      },
      "nodeFont": null,
      "numberFormat": null,
      "originalId": null,
      "extraData": null,
      "picture": null,
      "evaluateOnStart": false,
      "defaultView": null,
      "prefixIdentifier": null,
      "hierarchy": null,
      "_isNodeCircular": false
    },
    {
      "identifier": "sales_data_regions",
      "definition": "result = pd.Index(sales_data['region'].unique())",
      "title": "Sales data regions",
      "nodeClass": "index",
      "moduleId": "_root_",
      "x": 270,
      "y": 980,
      "z": 1,
      "w": "100",
      "h": "50",
      "description": null,
      "units": null,
      "color": "#9999ff",
      "errorInDef": false,
      "nodeInfo": {
        "showInputs": 0,
        "showOutputs": 0,
        "showLabel": 1,
        "showBorder": 1,
        "fill": 1,
        "useNodeFont": 0
      },
      "nodeFont": null,
      "numberFormat": null,
      "originalId": null,
      "extraData": null,
      "picture": null,
      "evaluateOnStart": false,
      "defaultView": null,
      "prefixIdentifier": null,
      "hierarchy": null,
      "_isNodeCircular": false
    },
    {
      "identifier": "sales_data_region",
      "definition": "result = pp.selector(sales_data_regions, 1, False)",
      "title": "Sales data region",
      "nodeClass": "inputselector",
      "moduleId": "_root_",
      "x": 390,
      "y": 990,
      "z": 1,
      "w": "180",
      "h": "30",
      "description": null,
      "units": null,
      "color": "#4cffa6",
      "errorInDef": false,
      "nodeInfo": {
        "showInputs": 1,
        "showOutputs": 1,
        "showLabel": 1,
        "showBorder": 1,
        "fill": 1,
        "useNodeFont": 0
      },
      "nodeFont": null,
      "numberFormat": null,
      "originalId": null,
      "extraData": null,
      "picture": null,
      "evaluateOnStart": false,
      "defaultView": null,
      "prefixIdentifier": null,
      "hierarchy": null,
      "_isNodeCircular": false
    },
    {
      "identifier": "form_basico10",
      "definition": "",
      "title": "With custom rows",
      "nodeClass": "text",
      "moduleId": "_root_",
      "x": 30,
      "y": 1180,
      "z": -1,
      "w": "830",
      "h": "150",
      "description": null,
      "units": null,
      "color": "#EEEEEE",
      "errorInDef": false,
      "nodeInfo": {
        "showInputs": 0,
        "showOutputs": 0,
        "showLabel": 1,
        "showBorder": 0,
        "fill": 1,
        "useNodeFont": 0
      },
      "nodeFont": null,
      "numberFormat": null,
      "originalId": null,
      "extraData": null,
      "picture": null,
      "evaluateOnStart": false,
      "defaultView": null,
      "prefixIdentifier": null,
      "hierarchy": null,
      "_isNodeCircular": false
    },
    {
      "identifier": "form_w_checkboxes",
      "definition": "import os\nfrom pyplan_core.classes.FormTypes import FormColumn, FormSettings, DataType, ColumnType, DatabaseConnectionString, SQLiteConnection\n\nresult = pp.form(\n    table_name='form_w_checkboxes',\n    columns=[\n        FormColumn(\n            field='region',\n            title='Region',\n            data_type=DataType.string,\n            column_type=ColumnType.input,\n        ),\n        # Selector field\n        FormColumn(\n            field='item_type',\n            title='Item type',\n            data_type=DataType.string,\n            column_type=ColumnType.selector,\n            values=item_type.tolist()  # list of values\n        ),\n        FormColumn(\n            field='price',\n            title='Price',\n            data_type=DataType.float,\n            column_type=ColumnType.input,\n        ),\n        FormColumn(\n            field='quantity',\n            title='Quantity',\n            data_type=DataType.float,\n            column_type=ColumnType.input,\n        ),\n        FormColumn(\n            field='revenue',\n            title='Revenue',\n            data_type=DataType.float,\n            column_type=ColumnType.calc,\n            formula='price*quantity'\n        ),\n        FormColumn(\n            field='active',\n            title='Is active?',\n            data_type=DataType.boolean,\n            column_type=ColumnType.checkbox,\n        ),\n    ],\n    settings=FormSettings(\n        database_engine=DatabaseConnectionString.sqlite,\n        database_connection=SQLiteConnection(database_path=forms_path),\n        initial_empty_rows=5,\n        allow_add_rows=True,\n        allow_remove_rows=True\n    )\n)",
      "title": "Form with checkboxes",
      "nodeClass": "form",
      "moduleId": "_root_",
      "x": 660,
      "y": 170,
      "z": 1,
      "w": "180",
      "h": "40",
      "description": "<p>Functionalities:</p>\n<ul>\n<li>Input fields</li>\n<li>Calculated fields by column</li>\n<li>Selector fields (basic)</li>\n<li>Checkbox field</li>\n</ul>",
      "units": null,
      "color": "#4CBCFF",
      "errorInDef": false,
      "nodeInfo": {
        "showInputs": 1,
        "showOutputs": 1,
        "showLabel": 1,
        "showBorder": 1,
        "fill": 1,
        "useNodeFont": 0
      },
      "nodeFont": null,
      "numberFormat": null,
      "originalId": null,
      "extraData": null,
      "picture": null,
      "evaluateOnStart": false,
      "defaultView": null,
      "prefixIdentifier": null,
      "hierarchy": null,
      "_isNodeCircular": false
    },
    {
      "identifier": "basic_form",
      "definition": "from pyplan_core.classes.FormTypes import FormColumn, FormSettings, DataType, ColumnType, DatabaseConnectionString, SQLiteConnection, PostgreSQLConnection\n            \nresult = pp.form(\n    table_name='basic_form',\n    columns=[\n        FormColumn(field='region', title='Region', column_type=ColumnType.input, data_type=DataType.string),\n        FormColumn(field='item_type', title='Item type', column_type=ColumnType.selector, data_type=DataType.string, values=['Item 1', 'Item 2', 'Item 3']),\n        FormColumn(field='price', title='Price', column_type=ColumnType.input, data_type=DataType.float),\n        FormColumn(field='quantity', title='Quantity', column_type=ColumnType.input, data_type=DataType.float),\n        FormColumn(field='revenue', title='Revenue', column_type=ColumnType.calc, data_type=DataType.float, formula='price*quantity')\n    ],\n    settings=FormSettings(\n        database_engine=DatabaseConnectionString.sqlite,\n        database_connection=SQLiteConnection(database_path=forms_path),\n        initial_empty_rows=5,\n        allow_add_rows=True,\n        allow_remove_rows=True\n    )\n)",
      "title": "Basic form",
      "nodeClass": "form",
      "moduleId": "_root_",
      "x": 660,
      "y": 70,
      "z": 1,
      "w": "180",
      "h": "40",
      "description": "<p>Functionalities:</p>\n<ul>\n<li>Input fields</li>\n</ul>",
      "units": null,
      "color": "#4CBCFF",
      "errorInDef": false,
      "nodeInfo": {
        "showInputs": 1,
        "showOutputs": 1,
        "showLabel": 1,
        "showBorder": 1,
        "fill": 1,
        "useNodeFont": 0
      },
      "nodeFont": null,
      "numberFormat": null,
      "originalId": null,
      "extraData": null,
      "picture": null,
      "evaluateOnStart": false,
      "defaultView": null,
      "prefixIdentifier": null,
      "hierarchy": null,
      "_isNodeCircular": false
    },
    {
      "identifier": "basic_form_txt",
      "definition": "",
      "title": "Basic",
      "nodeClass": "text",
      "moduleId": "_root_",
      "x": 30,
      "y": 50,
      "z": -1,
      "w": "830",
      "h": "90",
      "description": null,
      "units": null,
      "color": "#EEEEEE",
      "errorInDef": false,
      "nodeInfo": {
        "showInputs": 0,
        "showOutputs": 0,
        "showLabel": 1,
        "showBorder": 0,
        "fill": 1,
        "useNodeFont": 0
      },
      "nodeFont": null,
      "numberFormat": null,
      "originalId": null,
      "extraData": null,
      "picture": null,
      "evaluateOnStart": false,
      "defaultView": null,
      "prefixIdentifier": null,
      "hierarchy": null,
      "_isNodeCircular": false
    },
    {
      "identifier": "checkboxes_txt",
      "definition": "",
      "title": "Checkboxes",
      "nodeClass": "text",
      "moduleId": "_root_",
      "x": 30,
      "y": 150,
      "z": -1,
      "w": "830",
      "h": "90",
      "description": null,
      "units": null,
      "color": "#EEEEEE",
      "errorInDef": false,
      "nodeInfo": {
        "showInputs": 0,
        "showOutputs": 0,
        "showLabel": 1,
        "showBorder": 0,
        "fill": 1,
        "useNodeFont": 0
      },
      "nodeFont": null,
      "numberFormat": null,
      "originalId": null,
      "extraData": null,
      "picture": null,
      "evaluateOnStart": false,
      "defaultView": null,
      "prefixIdentifier": null,
      "hierarchy": null,
      "_isNodeCircular": false
    },
    {
      "identifier": "last_actual_month",
      "definition": "result = pp.selector([pp.add_periods(time[0], periods=-1)] + time.tolist(), 3, False)",
      "title": "Last actual month",
      "nodeClass": "inputselector",
      "moduleId": "_root_",
      "x": 170,
      "y": 270,
      "z": 1,
      "w": "140",
      "h": "30",
      "description": null,
      "units": null,
      "color": "#4cffa6",
      "errorInDef": false,
      "nodeInfo": {
        "showInputs": 0,
        "showOutputs": 0,
        "showLabel": 1,
        "showBorder": 1,
        "fill": 1,
        "useNodeFont": 0
      },
      "nodeFont": null,
      "numberFormat": null,
      "originalId": null,
      "extraData": null,
      "picture": null,
      "evaluateOnStart": false,
      "defaultView": {
        "component_type": "core.Selector",
        "component_id": "138e5b9e-0822-432e-8286-8a9db88a6905",
        "namespace": "ppc",
        "node_id": "last_actual_month",
        "x": 0,
        "y": 0,
        "w": 6,
        "h": 3,
        "error_code": null,
        "error_detail": null,
        "properties": {
          "code": null,
          "custom_code": false,
          "title": {
            "enabled": true,
            "text": "Último mes real",
            "custom_text": "",
            "show_units": true,
            "units_text": ""
          },
          "format": "radio",
          "orientation": "vertical",
          "page_size": 25
        }
      },
      "prefixIdentifier": null,
      "hierarchy": null,
      "_isNodeCircular": false
    },
    {
      "identifier": "form_w_blocked_columns",
      "definition": "import os\nfrom pyplan_core.classes.FormTypes import FormColumn, FormSettings, DataType, ColumnType, DatabaseConnectionString, SQLiteConnection\n\n# Generate form columns dynamically\n_time_cols = []\nfor n, t in enumerate(time, 1):\n    _col = FormColumn(\n        field=f'month_{n:02d}',  # month_01, month_02, ..., month_12\n        title=t,\n        data_type=DataType.float,\n        column_type=ColumnType.input,\n        read_only=t <= last_actual_month.value  # condition that determines if a column must be read only\n    )\n    _time_cols.append(_col)\n\nresult = pp.form(\n    table_name='form_w_blocked_columns',\n    columns=[\n        FormColumn(\n            field='item_type',\n            title='Item type',\n            data_type=DataType.string,\n            column_type=ColumnType.selector,\n            values=item_type.tolist()\n        )\n    ] + \n        _time_cols + \n    [\n        FormColumn(\n            field='total',\n            title='Total',\n            data_type=DataType.float,\n            column_type=ColumnType.calc,\n            formula='+'.join([col.field for col in _time_cols])  # sum of all months: `month_01+month_02+...+month_12`\n        )\n    ],\n    settings=FormSettings(\n        database_engine=DatabaseConnectionString.sqlite,\n        database_connection=SQLiteConnection(database_path=forms_path),\n        initial_empty_rows=5,\n        allow_add_rows=True,\n        allow_remove_rows=True,\n        fixed_columns=1\n    )\n)",
      "title": "Form with blocked columns",
      "nodeClass": "form",
      "moduleId": "_root_",
      "x": 660,
      "y": 270,
      "z": 1,
      "w": "180",
      "h": "40",
      "description": "<p>Functionalities:</p>\n<ul>\n<li>Input fields</li>\n<li>Calculated fields by column (Total)</li>\n<li>Selector fields (basic)</li>\n<li>Blocked columns base on Last actual month selector</li>\n<li>Fixed columns (Item Type)</li>\n</ul>",
      "units": null,
      "color": "#4CBCFF",
      "errorInDef": false,
      "nodeInfo": {
        "showInputs": 1,
        "showOutputs": 1,
        "showLabel": 1,
        "showBorder": 1,
        "fill": 1,
        "useNodeFont": 0
      },
      "nodeFont": null,
      "numberFormat": null,
      "originalId": null,
      "extraData": null,
      "picture": null,
      "evaluateOnStart": false,
      "defaultView": null,
      "prefixIdentifier": null,
      "hierarchy": null,
      "_isNodeCircular": false
    },
    {
      "identifier": "form_w_calc_fields",
      "definition": "from pyplan_core.classes.Form import FormSettings, FormColumn, ColumnType, DataType\nfrom pyplan_core.classes.FormTypes import SQLiteConnection, DatabaseConnectionString\n\ndef weighted_revenue_fn(df):\n    return df['revenue'] / df['revenue'].sum()\n\nresult = pp.form(\n    table_name='form_w_calc_fields',\n    columns=[\n        FormColumn(field='product', title='Product',data_type=DataType.string, default_value='Product'),\n        FormColumn(field='price', title='Price',data_type=DataType.float, default_value=0),\n        FormColumn(field='quantity', title='Quantity', data_type=DataType.integer, default_value=1),\n        FormColumn(field='revenue', title='Revenue', data_type=DataType.float, column_type=ColumnType.calc, formula='price*quantity'),  # formula from string\n        FormColumn(field='weighted_revenue', title='Weighted revenue', data_type=DataType.float, column_type=ColumnType.calc, formula=weighted_revenue_fn)  # formula from function\n    ],\n    settings=FormSettings(\n        database_engine=DatabaseConnectionString.sqlite,\n        database_connection=SQLiteConnection(database_path=forms_path),\n        initial_empty_rows=5,\n        allow_add_rows=True,\n        allow_remove_rows=True\n    )\n)",
      "title": "Form with calculated fields",
      "nodeClass": "form",
      "moduleId": "_root_",
      "x": 660,
      "y": 370,
      "z": 1,
      "w": "180",
      "h": "40",
      "description": "<p>Functionalities:</p>\n<ul>\n<li>Calculated field Revenue = Quantity * Price</li>\n<li>Calculated field with custom function Weighted Revenue = Revenue / sum of Revenue</li>\n</ul>",
      "units": null,
      "color": null,
      "errorInDef": false,
      "nodeInfo": {
        "showInputs": 1,
        "showOutputs": 1,
        "showLabel": 1,
        "showBorder": 1,
        "fill": 1,
        "useNodeFont": 0
      },
      "nodeFont": null,
      "numberFormat": null,
      "originalId": null,
      "extraData": null,
      "picture": null,
      "evaluateOnStart": false,
      "defaultView": {
        "component_type": "core.Form",
        "component_id": "10b5fee3-b8fe-4802-86f7-9c7daf66c199",
        "namespace": "ppc",
        "node_id": "form_w_calc_fields",
        "x": 0,
        "y": 0,
        "w": 6,
        "h": 3,
        "error_code": null,
        "error_detail": null,
        "properties": {
          "code": null,
          "custom_code": false,
          "title": {
            "enabled": true,
            "text": "Form con campo calculado",
            "custom_text": "",
            "show_units": true,
            "units_text": ""
          },
          "table_properties": {
            "colHeaders": true,
            "manualColumnResize": true,
            "multiColumnSorting": true,
            "rowHeaders": false
          },
          "calc_fields": {},
          "function_calc_fields": {},
          "unlink": [],
          "pivot": {
            "agg": "",
            "params": {
              "rows": [],
              "columns": [],
              "measures": []
            }
          },
          "page_size": {
            "rows": 100,
            "columns": 500
          },
          "sort": {},
          "renderers": {},
          "columns": {
            "id": {
              "readOnly": true
            },
            "total_price": {
              "readOnly": true,
              "className": ""
            },
            "weighted_price": {
              "readOnly": true,
              "className": ""
            },
            "category": {
              "type": "dropdown",
              "renderer": "custom_dropdown_renderer",
              "source": [
                "CatA",
                "CatB",
                "Catc"
              ]
            },
            "region": {
              "type": "dropdown",
              "renderer": "custom_dropdown_renderer",
              "source": [
                "North America",
                "South America",
                "Europe",
                "Asia",
                "Africa"
              ]
            },
            "revenue": {
              "readOnly": true,
              "className": ""
            }
          },
          "right_total": false,
          "bottom_total": false,
          "hide_empty_data": "",
          "show_pivot_toolbar": false,
          "show_filter_toolbar": false,
          "value_format": {
            "type": "number",
            "thousands_separator": true,
            "decimal_places": 2,
            "prefix": "",
            "suffix": "",
            "date_format": null
          },
          "drilldowns": [],
          "style": {}
        },
        "filters": {},
        "cell_properties": null
      },
      "prefixIdentifier": null,
      "hierarchy": null,
      "_isNodeCircular": false
    },
    {
      "identifier": "blocked_columns_txt",
      "definition": "",
      "title": "Blocked columns",
      "nodeClass": "text",
      "moduleId": "_root_",
      "x": 30,
      "y": 250,
      "z": -1,
      "w": "830",
      "h": "90",
      "description": null,
      "units": null,
      "color": "#EEEEEE",
      "errorInDef": false,
      "nodeInfo": {
        "showInputs": 0,
        "showOutputs": 0,
        "showLabel": 1,
        "showBorder": 0,
        "fill": 1,
        "useNodeFont": 0
      },
      "nodeFont": null,
      "numberFormat": null,
      "originalId": null,
      "extraData": null,
      "picture": null,
      "evaluateOnStart": false,
      "defaultView": null,
      "prefixIdentifier": null,
      "hierarchy": null,
      "_isNodeCircular": false
    },
    {
      "identifier": "calc_fields_txt",
      "definition": "",
      "title": "Calculated fields",
      "nodeClass": "text",
      "moduleId": "_root_",
      "x": 30,
      "y": 350,
      "z": -1,
      "w": "830",
      "h": "90",
      "description": null,
      "units": null,
      "color": "#EEEEEE",
      "errorInDef": false,
      "nodeInfo": {
        "showInputs": 0,
        "showOutputs": 0,
        "showLabel": 1,
        "showBorder": 0,
        "fill": 1,
        "useNodeFont": 0
      },
      "nodeFont": null,
      "numberFormat": null,
      "originalId": null,
      "extraData": null,
      "picture": null,
      "evaluateOnStart": false,
      "defaultView": null,
      "prefixIdentifier": null,
      "hierarchy": null,
      "_isNodeCircular": false
    },
    {
      "identifier": "form_w_selectors",
      "definition": "import os\nfrom pyplan_core.classes.FormTypes import FormColumn, FormSettings, DataType, ColumnType, DatabaseConnectionString, SQLiteConnection\n\nresult = pp.form(\n    table_name='form_w_selectors',\n    columns=[\n        FormColumn(\n            field='region',\n            title='Region',\n            data_type=DataType.string,\n            column_type=ColumnType.input,\n        ),\n        # Selector field\n        FormColumn(\n            field='item_type',\n            title='Item type',\n            data_type=DataType.string,\n            column_type=ColumnType.selector,\n            values=item_type.tolist()\n        ),\n        FormColumn(\n            field='price',\n            title='Price',\n            data_type=DataType.float,\n            column_type=ColumnType.input,\n        ),\n        FormColumn(\n            field='quantity',\n            title='Quantity',\n            data_type=DataType.float,\n            column_type=ColumnType.input,\n        ),\n        FormColumn(\n            field='revenue',\n            title='Revenue',\n            data_type=DataType.float,\n            column_type=ColumnType.calc,\n            formula='price*quantity'\n        )\n    ],\n    settings=FormSettings(\n        database_engine=DatabaseConnectionString.sqlite,\n        database_connection=SQLiteConnection(database_path=forms_path),\n        initial_empty_rows=5,\n        allow_add_rows=True,\n        allow_remove_rows=True\n    )\n)",
      "title": "Form with selectors",
      "nodeClass": "form",
      "moduleId": "_root_",
      "x": 660,
      "y": 470,
      "z": 1,
      "w": "180",
      "h": "40",
      "description": "<p>Functionalities:</p>\n<ul>\n<li>Input fields</li>\n<li>Calculated fields by column</li>\n<li>Selector fields (basic)</li>\n</ul>",
      "units": null,
      "color": "#4CBCFF",
      "errorInDef": false,
      "nodeInfo": {
        "showInputs": 1,
        "showOutputs": 1,
        "showLabel": 1,
        "showBorder": 1,
        "fill": 1,
        "useNodeFont": 0
      },
      "nodeFont": null,
      "numberFormat": null,
      "originalId": null,
      "extraData": null,
      "picture": null,
      "evaluateOnStart": false,
      "defaultView": null,
      "prefixIdentifier": null,
      "hierarchy": null,
      "_isNodeCircular": false
    },
    {
      "identifier": "form_dataframe",
      "definition": "result = form_w_selectors.value",
      "title": "Form DataFrame",
      "nodeClass": "variable",
      "moduleId": "_root_",
      "x": 890,
      "y": 470,
      "z": 1,
      "w": "180",
      "h": "40",
      "description": null,
      "units": null,
      "color": "#4CBCFF",
      "errorInDef": false,
      "nodeInfo": {
        "showInputs": 1,
        "showOutputs": 1,
        "showLabel": 1,
        "showBorder": 1,
        "fill": 1,
        "useNodeFont": 0
      },
      "nodeFont": null,
      "numberFormat": null,
      "originalId": null,
      "extraData": null,
      "picture": null,
      "evaluateOnStart": false,
      "defaultView": null,
      "prefixIdentifier": null,
      "hierarchy": null,
      "_isNodeCircular": false
    },
    {
      "identifier": "basic_selectors_txt",
      "definition": "",
      "title": "Basic selectors",
      "nodeClass": "text",
      "moduleId": "_root_",
      "x": 30,
      "y": 450,
      "z": -1,
      "w": "830",
      "h": "90",
      "description": null,
      "units": null,
      "color": "#EEEEEE",
      "errorInDef": false,
      "nodeInfo": {
        "showInputs": 0,
        "showOutputs": 0,
        "showLabel": 1,
        "showBorder": 0,
        "fill": 1,
        "useNodeFont": 0
      },
      "nodeFont": null,
      "numberFormat": null,
      "originalId": null,
      "extraData": null,
      "picture": null,
      "evaluateOnStart": false,
      "defaultView": null,
      "prefixIdentifier": null,
      "hierarchy": null,
      "_isNodeCircular": false
    },
    {
      "identifier": "filtered_by_user_selectors_txt",
      "definition": "",
      "title": "Filtered by user selectors",
      "nodeClass": "text",
      "moduleId": "_root_",
      "x": 30,
      "y": 550,
      "z": -1,
      "w": "830",
      "h": "90",
      "description": null,
      "units": null,
      "color": "#EEEEEE",
      "errorInDef": false,
      "nodeInfo": {
        "showInputs": 0,
        "showOutputs": 0,
        "showLabel": 1,
        "showBorder": 0,
        "fill": 1,
        "useNodeFont": 0
      },
      "nodeFont": null,
      "numberFormat": null,
      "originalId": null,
      "extraData": null,
      "picture": null,
      "evaluateOnStart": false,
      "defaultView": null,
      "prefixIdentifier": null,
      "hierarchy": null,
      "_isNodeCircular": false
    },
    {
      "identifier": "form_w_filt_by_user_selector",
      "definition": "import os\nfrom pyplan_core.classes.FormTypes import FormColumn, FormSettings, DataType, ColumnType, DatabaseConnectionString, SQLiteConnection\n\nresult = pp.form(\n    table_name='form_w_filt_by_user_selector',\n    columns=[\n        # Selector field\n        FormColumn(\n            field='region',\n            title='Region',\n            data_type=DataType.string,\n            column_type=ColumnType.selector,\n            values=filtered_regions.tolist(),  # dynamic index from 'Who am I?'\n            filter_rows_by_domain=True  # filters form rows based on values from 'values' field\n        ),\n        FormColumn(\n            field='item_type',\n            title='Item type',\n            data_type=DataType.string,\n            column_type=ColumnType.selector,\n            values=item_type.tolist()  # puede ser una lista a mano\n        ),\n        FormColumn(\n            field='price',\n            title='Price',\n            data_type=DataType.float,\n            column_type=ColumnType.input,\n        ),\n        FormColumn(\n            field='quantity',\n            title='Quantity',\n            data_type=DataType.float,\n            column_type=ColumnType.input,\n        ),\n        FormColumn(\n            field='revenue',\n            title='Revenue',\n            data_type=DataType.float,\n            column_type=ColumnType.calc,\n            formula='price*quantity'\n        )\n    ],\n    settings=FormSettings(\n        database_engine=DatabaseConnectionString.sqlite,\n        database_connection=SQLiteConnection(database_path=forms_path),\n        initial_empty_rows=5,\n        allow_add_rows=True,\n        allow_remove_rows=True\n    )\n)",
      "title": "Form with filtered by user selector",
      "nodeClass": "form",
      "moduleId": "_root_",
      "x": 660,
      "y": 570,
      "z": 1,
      "w": "180",
      "h": "40",
      "description": "<p>Functionalities:</p>\n<ul>\n<li>Input fields</li>\n<li>Calculated fields by column</li>\n<li>Selector field Region returns values based on selected user from Who am I? selector</li>\n<li>Rows are filtered based on selected region</li>\n</ul>",
      "units": null,
      "color": "#4CBCFF",
      "errorInDef": false,
      "nodeInfo": {
        "showInputs": 1,
        "showOutputs": 1,
        "showLabel": 1,
        "showBorder": 1,
        "fill": 1,
        "useNodeFont": 0
      },
      "nodeFont": null,
      "numberFormat": null,
      "originalId": null,
      "extraData": null,
      "picture": null,
      "evaluateOnStart": false,
      "defaultView": {
        "component_type": "core.Form",
        "component_id": "fd3e8144-3976-4082-adf5-d830069741a3",
        "namespace": "ppc",
        "node_id": "form_w_filt_by_user_selector",
        "x": 0,
        "y": 0,
        "w": 6,
        "h": 3,
        "error_code": null,
        "error_detail": null,
        "properties": {
          "code": null,
          "custom_code": false,
          "title": {
            "enabled": true,
            "text": "Form con selectores filtrados por usuario",
            "custom_text": "",
            "show_units": true,
            "units_text": ""
          },
          "table_properties": {
            "colHeaders": true,
            "manualColumnResize": true,
            "multiColumnSorting": true,
            "rowHeaders": false
          },
          "calc_fields": {},
          "function_calc_fields": {},
          "unlink": [],
          "pivot": {
            "agg": "",
            "params": {
              "rows": [],
              "columns": [],
              "measures": []
            }
          },
          "page_size": {
            "rows": 100,
            "columns": 500
          },
          "sort": {},
          "renderers": {},
          "columns": {
            "id": {
              "readOnly": true
            },
            "region": {
              "type": "dropdown",
              "source": [
                "North America",
                "South America",
                "Europe"
              ],
              "renderer": "custom_dropdown_renderer"
            },
            "item_type": {
              "type": "dropdown",
              "source": [
                "Beverages",
                "Food",
                "Others"
              ],
              "renderer": "custom_dropdown_renderer"
            },
            "revenue": {
              "readOnly": true,
              "className": ""
            },
            "unit_revenue": {
              "readOnly": true,
              "className": ""
            }
          },
          "right_total": false,
          "bottom_total": false,
          "hide_empty_data": "",
          "show_pivot_toolbar": false,
          "show_filter_toolbar": false,
          "value_format": {
            "type": null,
            "thousands_separator": false,
            "decimal_places": null,
            "prefix": "",
            "suffix": "",
            "date_format": null
          },
          "drilldowns": [],
          "style": {}
        },
        "filters": {},
        "index_cell_properties": null
      },
      "prefixIdentifier": null,
      "hierarchy": null,
      "_isNodeCircular": false
    },
    {
      "identifier": "who_am_i",
      "definition": "result = pp.selector(users, 0, False)",
      "title": "Who am I?",
      "nodeClass": "inputselector",
      "moduleId": "_root_",
      "x": 480,
      "y": 570,
      "z": 1,
      "w": "110",
      "h": "30",
      "description": null,
      "units": null,
      "color": "#4cffa6",
      "errorInDef": false,
      "nodeInfo": {
        "showInputs": 1,
        "showOutputs": 1,
        "showLabel": 1,
        "showBorder": 1,
        "fill": 1,
        "useNodeFont": 0
      },
      "nodeFont": null,
      "numberFormat": null,
      "originalId": null,
      "extraData": null,
      "picture": null,
      "evaluateOnStart": false,
      "defaultView": null,
      "prefixIdentifier": null,
      "hierarchy": null,
      "_isNodeCircular": false
    },
    {
      "identifier": "regions_by_user",
      "definition": "import os\nfrom pyplan_core.classes.FormTypes import FormColumn, FormSettings, DataType, ColumnType, DatabaseConnectionString, SQLiteConnection\n\nresult = pp.form(\n    table_name='regions_by_user',\n    columns=[\n        FormColumn(\n            field='regions',\n            title='Region',\n            data_type=DataType.string,\n            column_type=ColumnType.selector,\n            values=regions.tolist()\n        ),\n        FormColumn(\n            field='users',\n            title='User',\n            data_type=DataType.string,\n            column_type=ColumnType.selector,\n            values=users.tolist()\n        )\n    ],\n    settings=FormSettings(\n        database_engine=DatabaseConnectionString.sqlite,\n        database_connection=SQLiteConnection(database_path=forms_path),\n        initial_empty_rows=5,\n        allow_add_rows=True,\n        allow_remove_rows=True\n    )\n)",
      "title": "Regions by user",
      "nodeClass": "form",
      "moduleId": "_root_",
      "x": 50,
      "y": 570,
      "z": 1,
      "w": "180",
      "h": "40",
      "description": "<p>Funcionalidades:</p>\n<ul>\n<li>Campos input</li>\n<li>Campos calculados por columna</li>\n</ul>",
      "units": null,
      "color": "#4CBCFF",
      "errorInDef": false,
      "nodeInfo": {
        "showInputs": 1,
        "showOutputs": 1,
        "showLabel": 1,
        "showBorder": 1,
        "fill": 1,
        "useNodeFont": 0
      },
      "nodeFont": null,
      "numberFormat": null,
      "originalId": null,
      "extraData": null,
      "picture": null,
      "evaluateOnStart": false,
      "defaultView": null,
      "prefixIdentifier": null,
      "hierarchy": null,
      "_isNodeCircular": false
    },
    {
      "identifier": "related_selectors_txt",
      "definition": "",
      "title": "Related selectors",
      "nodeClass": "text",
      "moduleId": "_root_",
      "x": 30,
      "y": 650,
      "z": -1,
      "w": "830",
      "h": "90",
      "description": null,
      "units": null,
      "color": "#EEEEEE",
      "errorInDef": false,
      "nodeInfo": {
        "showInputs": 0,
        "showOutputs": 0,
        "showLabel": 1,
        "showBorder": 0,
        "fill": 1,
        "useNodeFont": 0
      },
      "nodeFont": null,
      "numberFormat": null,
      "originalId": null,
      "extraData": null,
      "picture": null,
      "evaluateOnStart": false,
      "defaultView": null,
      "prefixIdentifier": null,
      "hierarchy": null,
      "_isNodeCircular": false
    },
    {
      "identifier": "brand_taste_packing_prod_alloc",
      "definition": "import os\nfrom pyplan_core.classes.FormTypes import FormColumn, FormSettings, DataType, ColumnType, DatabaseConnectionString, SQLiteConnection\n\nresult = pp.form(\n    table_name='form_asign_marca_sab_emp_prod_tbl',\n    columns=[\n        FormColumn(\n            field='brand',\n            title='Brand',\n            data_type=DataType.string,\n            column_type=ColumnType.input,\n        ),\n        FormColumn(\n            field='taste',\n            title='Taste',\n            data_type=DataType.string,\n            column_type=ColumnType.input,\n        ),\n        FormColumn(\n            field='packing',\n            title='Packing',\n            data_type=DataType.string,\n            column_type=ColumnType.input,\n        ),\n        FormColumn(\n            field='product',\n            title='Product',\n            data_type=DataType.string,\n            column_type=ColumnType.input,\n        ),\n    ],\n    settings=FormSettings(\n        database_engine=DatabaseConnectionString.sqlite,\n        database_connection=SQLiteConnection(database_path=forms_path),\n        initial_empty_rows=50,\n        allow_add_rows=True,\n        allow_remove_rows=True\n    )\n)",
      "title": "Brand, Taste, Packing, Product Allocation",
      "nodeClass": "form",
      "moduleId": "_root_",
      "x": 50,
      "y": 670,
      "z": 1,
      "w": "180",
      "h": "40",
      "description": "<p>Funcionalidades:</p>\n<ul>\n<li>Campos input</li>\n<li>Campos calculados por columna</li>\n</ul>",
      "units": null,
      "color": "#4CBCFF",
      "errorInDef": false,
      "nodeInfo": {
        "showInputs": 1,
        "showOutputs": 1,
        "showLabel": 1,
        "showBorder": 1,
        "fill": 1,
        "useNodeFont": 0
      },
      "nodeFont": null,
      "numberFormat": null,
      "originalId": null,
      "extraData": null,
      "picture": null,
      "evaluateOnStart": false,
      "defaultView": null,
      "prefixIdentifier": null,
      "hierarchy": null,
      "_isNodeCircular": false
    },
    {
      "identifier": "form_w_related_selectors",
      "definition": "import os\nfrom pyplan_core.classes.FormTypes import FormColumn, FormSettings, DataType, ColumnType, DatabaseConnectionString, SQLiteConnection, PostgreSQLConnection\n\nresult = pp.form(\n    table_name='form_w_related_selectors',\n    columns=[\n        FormColumn(\n            field='brand',\n            title='Brand',\n            data_type=DataType.string,\n            column_type=ColumnType.selector,\n            values=brand_taste_packing_prod_alloc.value['brand'].unique().tolist()\n        ),\n        FormColumn(\n            field='taste',\n            title='Taste',\n            data_type=DataType.string,\n            column_type=ColumnType.related_selector,\n            related_map=brand_taste_packing_prod_alloc,\n            related_map_column_values='taste',\n            related_columns='brand'\n        ),\n        FormColumn(\n            field='packing',\n            title='Packing',\n            data_type=DataType.string,\n            column_type=ColumnType.related_selector,\n            related_map=brand_taste_packing_prod_alloc,\n            related_map_column_values='packing',\n            related_columns=['brand', 'taste']\n        ),\n        FormColumn(\n            field='product',\n            title='Product',\n            data_type=DataType.string,\n            column_type=ColumnType.related_selector,\n            related_map=brand_taste_packing_prod_alloc,\n            related_map_column_values='product',\n            related_columns=['brand', 'taste', 'packing']\n        ),\n        FormColumn(\n            field='price',\n            title='Price',\n            data_type=DataType.float,\n            column_type=ColumnType.input,\n        ),\n        FormColumn(\n            field='quantity',\n            title='Quantity',\n            data_type=DataType.float,\n            column_type=ColumnType.input,\n        ),\n        FormColumn(\n            field='revenue',\n            title='Revenue',\n            data_type=DataType.float,\n            column_type=ColumnType.calc,\n            formula='price*quantity'\n        )\n    ],\n    settings=FormSettings(\n        database_engine=DatabaseConnectionString.sqlite,\n        database_connection=SQLiteConnection(database_path=forms_path),\n        initial_empty_rows=5,\n        allow_add_rows=True,\n        allow_remove_rows=True\n    )\n)",
      "title": "Form with related selectors",
      "nodeClass": "form",
      "moduleId": "_root_",
      "x": 660,
      "y": 670,
      "z": 1,
      "w": "180",
      "h": "40",
      "description": "<p>Functionalities:</p>\n<ul>\n<li>Input fields</li>\n<li>Calculated fields by column</li>\n<li>Fields Product, Packing and Taste return values based on previous inputs (according to products allocation map)</li>\n</ul>",
      "units": null,
      "color": "#4CBCFF",
      "errorInDef": false,
      "nodeInfo": {
        "showInputs": 1,
        "showOutputs": 1,
        "showLabel": 1,
        "showBorder": 1,
        "fill": 1,
        "useNodeFont": 0
      },
      "nodeFont": null,
      "numberFormat": null,
      "originalId": null,
      "extraData": null,
      "picture": null,
      "evaluateOnStart": false,
      "defaultView": {
        "component_type": "core.Form",
        "component_id": "d4082669-7f94-4ca1-9859-58980c6dac95",
        "namespace": "ppc",
        "node_id": "form_w_related_selectors",
        "x": 0,
        "y": 0,
        "w": 6,
        "h": 3,
        "error_code": null,
        "error_detail": null,
        "properties": {
          "code": null,
          "custom_code": false,
          "title": {
            "enabled": true,
            "text": "Form con selectores relacionados",
            "custom_text": "",
            "show_units": true,
            "units_text": ""
          },
          "table_properties": {
            "colHeaders": true,
            "manualColumnResize": true,
            "multiColumnSorting": true,
            "rowHeaders": false
          },
          "calc_fields": {},
          "function_calc_fields": {},
          "unlink": [],
          "pivot": {
            "agg": "",
            "params": {
              "rows": [],
              "columns": [],
              "measures": []
            }
          },
          "page_size": {
            "rows": 100,
            "columns": 500
          },
          "sort": {},
          "renderers": {},
          "columns": {
            "id": {
              "readOnly": true
            },
            "region": {
              "type": "dropdown",
              "source": [
                "North America",
                "South America",
                "Europe"
              ],
              "renderer": "custom_dropdown_renderer"
            },
            "item_type": {
              "type": "dropdown",
              "source": [
                "Beverages",
                "Food",
                "Others"
              ],
              "renderer": "custom_dropdown_renderer"
            },
            "revenue": {
              "readOnly": true,
              "className": ""
            },
            "unit_revenue": {
              "readOnly": true,
              "className": ""
            },
            "marca": {
              "type": "dropdown",
              "source": [
                "ADES",
                "CC",
                "SP"
              ],
              "renderer": "custom_dropdown_renderer"
            },
            "sabor": {
              "type": "dropdown",
              "renderer": "custom_dropdown_renderer"
            },
            "empaque": {
              "type": "dropdown",
              "renderer": "custom_dropdown_renderer"
            },
            "producto": {
              "type": "dropdown",
              "renderer": "custom_dropdown_renderer"
            }
          },
          "right_total": false,
          "bottom_total": false,
          "hide_empty_data": "",
          "show_pivot_toolbar": false,
          "show_filter_toolbar": false,
          "value_format": {
            "type": null,
            "thousands_separator": false,
            "decimal_places": null,
            "prefix": "",
            "suffix": "",
            "date_format": null
          },
          "drilldowns": [],
          "style": {}
        },
        "filters": {},
        "index_cell_properties": null
      },
      "prefixIdentifier": null,
      "hierarchy": null,
      "_isNodeCircular": false
    },
    {
      "identifier": "changes_value_of_another_cell_txt",
      "definition": "",
      "title": "Changes value of another cell",
      "nodeClass": "text",
      "moduleId": "_root_",
      "x": 30,
      "y": 750,
      "z": -1,
      "w": "830",
      "h": "90",
      "description": null,
      "units": null,
      "color": "#EEEEEE",
      "errorInDef": false,
      "nodeInfo": {
        "showInputs": 0,
        "showOutputs": 0,
        "showLabel": 1,
        "showBorder": 0,
        "fill": 1,
        "useNodeFont": 0
      },
      "nodeFont": null,
      "numberFormat": null,
      "originalId": null,
      "extraData": null,
      "picture": null,
      "evaluateOnStart": false,
      "defaultView": null,
      "prefixIdentifier": null,
      "hierarchy": null,
      "_isNodeCircular": false
    },
    {
      "identifier": "form_changes_value_of_another_cell",
      "definition": "import os\nfrom pyplan_core.classes.FormTypes import FormColumn, FormSettings, DataType, ColumnType, DatabaseConnectionString, SQLiteConnection\n\nresult = pp.form(\n    table_name='form_changes_value_of_another_cell',\n    columns=[\n        FormColumn(\n            field='brand',\n            title='Brand',\n            data_type=DataType.string,\n            column_type=ColumnType.selector,\n            values=brand_taste_packing_prod_alloc.value['brand'].unique().tolist()\n        ),\n        FormColumn(\n            field='taste',\n            title='Taste',\n            data_type=DataType.string,\n            column_type=ColumnType.related_selector,\n            related_map=brand_taste_packing_prod_alloc,\n            related_map_column_values='taste',\n            related_columns='brand'\n        ),\n        FormColumn(\n            field='packing',\n            title='Packing',\n            data_type=DataType.string,\n            column_type=ColumnType.related_selector,\n            related_map=brand_taste_packing_prod_alloc,\n            related_map_column_values='packing',\n            related_columns=['brand', 'taste']\n        ),\n        FormColumn(\n            field='product',\n            title='Product',\n            data_type=DataType.string,\n            column_type=ColumnType.related_selector,\n            related_map=brand_taste_packing_prod_alloc,\n            related_map_column_values='product',\n            related_columns=['brand', 'taste', 'packing']\n        ),\n        FormColumn(\n            field='price',\n            title='Price',\n            data_type=DataType.float,\n            column_type=ColumnType.input,\n        ),\n        FormColumn(\n            field='quantity',\n            title='Quantity',\n            data_type=DataType.float,\n            column_type=ColumnType.input,\n        ),\n        FormColumn(\n            field='revenue',\n            title='Revenue',\n            data_type=DataType.float,\n            column_type=ColumnType.calc,\n            formula='price*quantity'\n        )\n    ],\n    settings=FormSettings(\n        database_engine=DatabaseConnectionString.sqlite,\n        database_connection=SQLiteConnection(database_path=forms_path),\n        initial_empty_rows=5,\n        allow_add_rows=True,\n        allow_remove_rows=True\n    )\n)",
      "title": "Form that changes the value of another cell",
      "nodeClass": "form",
      "moduleId": "_root_",
      "x": 660,
      "y": 770,
      "z": 1,
      "w": "180",
      "h": "40",
      "description": "<p>Functionalities:</p>\n<ul>\n<li>Input fields</li>\n<li>Calculated fields by column</li>\n<li>Fields Product, Packing and Taste return values based on previous inputs (according to products allocation map)</li>\n<li>When Taste field is filled with \"Coca-Cola\", Packing and Product fields are auto-completed (see custom component code)</li>\n</ul>",
      "units": null,
      "color": "#4CBCFF",
      "errorInDef": false,
      "nodeInfo": {
        "showInputs": 1,
        "showOutputs": 1,
        "showLabel": 1,
        "showBorder": 1,
        "fill": 1,
        "useNodeFont": 0
      },
      "nodeFont": null,
      "numberFormat": null,
      "originalId": null,
      "extraData": null,
      "picture": null,
      "evaluateOnStart": false,
      "defaultView": {
        "component_type": "core.Form",
        "component_id": "d53051f3-6ed9-4058-935b-32097cfd8c54",
        "namespace": "ppc",
        "node_id": "form_changes_value_of_another_cell",
        "x": 0,
        "y": 0,
        "w": 6,
        "h": 3,
        "error_code": null,
        "error_detail": null,
        "properties": {
          "code": "from typing import Union, List\nimport pandas as pd\nimport pyplan_core.interface.components.core as ppc\nfrom pyplan_core.classes.Form import FormChange\nfrom pyplan_core.interface.components.events import BaseEvent, FormChangeEvent\nfrom pyplan_core.interface.classes import FormData\n\nclass MyComponent(ppc.Form):\n\n    def apply_changes(self, changes: List[FormChange]):\n        \"\"\"Updates in-memory dataframe\"\"\"\n        form = self.get_form()\n        form_changes = []\n        for table_change in changes:\n            row = table_change.get('row_id')\n            col_name = table_change.get('column_name')\n            value = table_change.get('value')\n            # Cambio original\n            form_change = FormChange(\n                row=row,\n                column=col_name,\n                value=value,\n            )\n            form_changes.append(form_change)\n            # Cambio personalizado\n            if col_name == 'taste' and value == 'Coca-Cola':\n                    form_changes.append(\n                        FormChange(\n                            row=row,\n                            column='packing',\n                            value='PET 1500',\n                        )\n                    )\n                    form_changes.append(\n                        FormChange(\n                            row=row,\n                            column='product',\n                            value='CC 1,500 PETALOID',\n                        )\n                    )\n        if form_changes:\n            form.apply_changes(form_changes)\n            result = self.generate_result(None)\n            return result.data.values\n    \n    def render(self, df: pd.DataFrame, event: BaseEvent) -> FormData:\n        \"\"\"Renders the component and returns a FormData object\"\"\"\n        form = self.get_form()\n        return self.utils.generate_result_data(\n            df=df,\n            form=form,\n            table_properties=self.properties,\n            row_page_number=self.row_page_number,\n            column_page_number=self.column_page_number,\n            edit_mode=self.edit_mode,\n            cell_properties=self.cell_properties,\n            has_unconfirmed_changes=self.has_unconfirmed_changes(),\n        )\n\n\ncomponent: MyComponent = MyComponent.parse_obj(component_definition)\nresult = component\n",
          "custom_code": true,
          "title": {
            "enabled": true,
            "text": "Form that changes the value of another cell",
            "custom_text": "",
            "show_units": true,
            "units_text": ""
          },
          "hide_header": null,
          "hide_border": null,
          "table_properties": {
            "colHeaders": true,
            "manualColumnResize": true,
            "multiColumnSorting": true,
            "rowHeaders": false
          },
          "calculated_fields": [],
          "unlink": [],
          "pivot": {
            "agg": {},
            "params": {
              "rows": [],
              "columns": [],
              "measures": []
            }
          },
          "page_size": {
            "rows": 100,
            "columns": 500
          },
          "sort": {},
          "renderers": {},
          "columns": {
            "id": {
              "readOnly": true
            },
            "region": {
              "type": "dropdown",
              "source": [
                "North America",
                "South America",
                "Europe"
              ],
              "renderer": "custom_dropdown_renderer"
            },
            "item_type": {
              "type": "dropdown",
              "source": [
                "Beverages",
                "Food",
                "Others"
              ],
              "renderer": "custom_dropdown_renderer"
            },
            "revenue": {
              "readOnly": true,
              "className": ""
            },
            "unit_revenue": {
              "readOnly": true,
              "className": ""
            },
            "marca": {
              "type": "dropdown",
              "source": [
                "ADES",
                "CC",
                "SP"
              ],
              "renderer": "custom_dropdown_renderer"
            },
            "sabor": {
              "type": "dropdown",
              "renderer": "custom_dropdown_renderer"
            },
            "empaque": {
              "type": "dropdown",
              "renderer": "custom_dropdown_renderer"
            },
            "producto": {
              "type": "dropdown",
              "renderer": "custom_dropdown_renderer"
            },
            "brand": {
              "type": "dropdown",
              "renderer": "custom_dropdown_renderer",
              "source": [
                "Ades",
                "Coca-Cola",
                "Sprite"
              ]
            },
            "taste": {
              "type": "dropdown",
              "renderer": "custom_dropdown_renderer"
            },
            "packing": {
              "type": "dropdown",
              "renderer": "custom_dropdown_renderer"
            },
            "product": {
              "type": "dropdown",
              "renderer": "custom_dropdown_renderer"
            }
          },
          "right_total": false,
          "bottom_total": false,
          "hide_empty_data": "",
          "show_pivot_toolbar": false,
          "show_filter_toolbar": false,
          "drilldowns": [],
          "styles": {
            "all": {
              "style": {},
              "conditional_format": [],
              "value_format": {
                "type": "number",
                "thousands_separator": true,
                "decimal_places": 2,
                "prefix": "",
                "suffix": "",
                "date_format": ""
              }
            },
            "custom": []
          },
          "applied_hierarchies": {},
          "hide_id_column": true,
          "n_rows_to_add": 1,
          "function_calc_fields": {},
          "value_format": {
            "type": null,
            "thousands_separator": false,
            "decimal_places": null,
            "prefix": "",
            "suffix": "",
            "date_format": null
          },
          "calc_fields": {},
          "style": {}
        },
        "alternative_properties": null,
        "filters": {},
        "cell_properties": null
      },
      "prefixIdentifier": null,
      "hierarchy": null,
      "_isNodeCircular": false
    },
    {
      "identifier": "form_w_custom_formatting",
      "definition": "from pyplan_core.classes.Form import FormSettings, FormColumn, ColumnType, DataType\nfrom pyplan_core.classes.FormTypes import SQLiteConnection, DatabaseConnectionString\n\ndef weighted_price_fn(df):\n    return df['revenue'] / df['revenue'].sum()\n\nresult = pp.form(\n    table_name='form_w_custom_formatting',\n    columns=[\n        FormColumn(field='product', title='Product', data_type=DataType.string, column_type=ColumnType.selector, values=product.tolist(), default_value=product[0]),\n        FormColumn(field='price', title='Price', data_type=DataType.float, default_value=0),\n        FormColumn(field='quantity', title='Quantity', data_type=DataType.integer, default_value=1),\n        FormColumn(field='revenue', title='Revenue', data_type=DataType.float, column_type=ColumnType.calc, formula='price*quantity'),\n        FormColumn(field='weighted_revenue', title='Weighted revenue', data_type=DataType.float, column_type=ColumnType.calc, formula=weighted_price_fn)\n    ],\n    settings=FormSettings(\n        database_engine=DatabaseConnectionString.sqlite,\n        database_connection=SQLiteConnection(database_path=forms_path),\n        initial_empty_rows=5,\n        allow_add_rows=True,\n        allow_remove_rows=True\n    )\n)",
      "title": "Form with custom formatting",
      "nodeClass": "form",
      "moduleId": "_root_",
      "x": 660,
      "y": 870,
      "z": 1,
      "w": "180",
      "h": "40",
      "description": "<p>Functionalities:</p>\n<ul>\n<li>Input fields</li>\n<li>Calculated fields by column</li>\n<li>Progress bar on Weighted revenue column</li>\n<li>Conditional format on Price column (0-10, 10-20, 20-999999)</li>\n<li>Conditional format for rows with product 'Product B'</li>\n</ul>",
      "units": null,
      "color": null,
      "errorInDef": false,
      "nodeInfo": {
        "showInputs": 1,
        "showOutputs": 1,
        "showLabel": 1,
        "showBorder": 1,
        "fill": 1,
        "useNodeFont": 0
      },
      "nodeFont": null,
      "numberFormat": null,
      "originalId": null,
      "extraData": null,
      "picture": null,
      "evaluateOnStart": false,
      "defaultView": {
        "component_type": "core.Form",
        "component_id": "531001d3-266e-4b6e-b57f-fc278444fa25",
        "namespace": "ppc",
        "node_id": "form_w_custom_formatting",
        "x": 0,
        "y": 0,
        "w": 6,
        "h": 3,
        "error_code": null,
        "error_detail": null,
        "properties": {
          "code": "from typing import Union, List\nimport pandas as pd\nimport pyplan_core.interface.components.core as ppc\nfrom pyplan_core.classes.Form import FormChange\nfrom pyplan_core.interface.components.events import BaseEvent, FormChangeEvent\nfrom pyplan_core.interface.classes import FormData, TableCellProperties, ProgressBar, ConditionalFormat, ColumnCellProperty, RowCellProperty\n\nclass MyComponent(ppc.Form):\n    \n    def render(self, df: pd.DataFrame, event: BaseEvent) -> FormData:\n        \"\"\"Renders the component and returns a FormData object\"\"\"\n        form = self.get_form()\n        return self.utils.generate_result_data(\n            df=df,\n            form=form,\n            table_properties=self.properties,\n            row_page_number=self.row_page_number,\n            column_page_number=self.column_page_number,\n            edit_mode=self.edit_mode,\n            cell_properties=self.cell_properties,\n            has_unconfirmed_changes=self.has_unconfirmed_changes(),\n        )\n\ncomponent: MyComponent = MyComponent.parse_obj(component_definition)\n\nprogress_bar_renderer = TableCellProperties()\nprogress_bar_renderer.progress_bar = ProgressBar(\n    min_hue=0,\n    max_hue=120,\n    max_value=1,\n    saturation=90,\n    lightness=50,\n    show_value=True\n)\n\nprice_conditional = TableCellProperties()\nprice_conditional.conditional_format = [\n    ConditionalFormat(\n        from_=0,\n        to=10, \n        style={\n            'backgroundColor': '#ff2222', \n            'color': '#020202'\n        }\n    ),\n    ConditionalFormat(\n        from_=10, \n        to=20, \n        style={\n            'backgroundColor': '#ffff22',\n            'color': '#020202'\n        }\n    ),\n    ConditionalFormat(\n        from_=20,\n        to=999999,\n        style={\n            'backgroundColor': '#22ff22',\n            'color': '#020202'\n        }\n    ),\n]\n\nrow_conditional = TableCellProperties()\nrow_conditional.style = {\n        'font-weight': 'bold',\n        'color': '#adfafa'\n}\n\ncomponent.cell_properties = [\n    ColumnCellProperty(columns=['weighted_revenue'], cell_properties=progress_bar_renderer),\n    ColumnCellProperty(columns=['price'], cell_properties=price_conditional),\n    RowCellProperty(column='product', values=['Product B'], cell_properties=row_conditional),\n]\n\nresult = component\n",
          "custom_code": true,
          "title": {
            "enabled": true,
            "text": "Form con formatos",
            "custom_text": "",
            "show_units": true,
            "units_text": ""
          },
          "table_properties": {
            "colHeaders": true,
            "manualColumnResize": true,
            "multiColumnSorting": true,
            "rowHeaders": false
          },
          "calc_fields": {},
          "function_calc_fields": {},
          "unlink": [],
          "pivot": {
            "agg": "",
            "params": {
              "rows": [],
              "columns": [],
              "measures": []
            }
          },
          "page_size": {
            "rows": 100,
            "columns": 500
          },
          "sort": {},
          "renderers": {},
          "columns": {
            "id": {
              "readOnly": true
            },
            "total_price": {
              "readOnly": true,
              "className": ""
            },
            "weighted_price": {
              "readOnly": true,
              "className": ""
            },
            "category": {
              "type": "dropdown",
              "renderer": "custom_dropdown_renderer",
              "source": [
                "CatA",
                "CatB",
                "Catc"
              ]
            },
            "region": {
              "type": "dropdown",
              "renderer": "custom_dropdown_renderer",
              "source": [
                "North America",
                "South America",
                "Europe",
                "Asia",
                "Africa"
              ]
            },
            "revenue": {
              "readOnly": true,
              "className": ""
            },
            "weighted_revenue": {
              "readOnly": true,
              "className": ""
            },
            "product": {
              "type": "dropdown",
              "renderer": "custom_dropdown_renderer",
              "source": [
                "Product A",
                "Product B",
                "Product C"
              ]
            }
          },
          "right_total": false,
          "bottom_total": false,
          "hide_empty_data": "",
          "show_pivot_toolbar": false,
          "show_filter_toolbar": false,
          "value_format": {
            "type": "number",
            "thousands_separator": true,
            "decimal_places": 2,
            "prefix": "",
            "suffix": "",
            "date_format": null
          },
          "drilldowns": [],
          "style": {}
        },
        "filters": {},
        "cell_properties": [
          {
            "columns": [
              "weighted_revenue"
            ],
            "cell_properties": {
              "progress_bar": {
                "max_value": 1,
                "min_hue": 0,
                "max_hue": 120,
                "saturation": 90,
                "lightness": 50,
                "show_value": true
              }
            }
          },
          {
            "columns": [
              "price"
            ],
            "cell_properties": {
              "conditional_format": [
                {
                  "from_": 0,
                  "to": 10,
                  "style": {
                    "backgroundColor": "#ff2222",
                    "color": "#020202"
                  }
                },
                {
                  "from_": 0,
                  "to": 20,
                  "style": {
                    "backgroundColor": "#ffff22",
                    "color": "#020202"
                  }
                },
                {
                  "from_": 0,
                  "to": 999999,
                  "style": {
                    "backgroundColor": "#22ff22",
                    "color": "#020202"
                  }
                }
              ]
            }
          },
          {
            "column": "product",
            "values": [
              "Product B"
            ],
            "cell_properties": {
              "style": {
                "font-weight": "bold",
                "color": "#adfafa"
              }
            }
          }
        ]
      },
      "prefixIdentifier": null,
      "hierarchy": null,
      "_isNodeCircular": false
    },
    {
      "identifier": "custom_formatting_txt",
      "definition": "",
      "title": "Custom formatting",
      "nodeClass": "text",
      "moduleId": "_root_",
      "x": 30,
      "y": 850,
      "z": -1,
      "w": "830",
      "h": "90",
      "description": null,
      "units": null,
      "color": "#EEEEEE",
      "errorInDef": false,
      "nodeInfo": {
        "showInputs": 0,
        "showOutputs": 0,
        "showLabel": 1,
        "showBorder": 0,
        "fill": 1,
        "useNodeFont": 0
      },
      "nodeFont": null,
      "numberFormat": null,
      "originalId": null,
      "extraData": null,
      "picture": null,
      "evaluateOnStart": false,
      "defaultView": null,
      "prefixIdentifier": null,
      "hierarchy": null,
      "_isNodeCircular": false
    },
    {
      "identifier": "add_pc_to_revenue",
      "definition": "def _fn(df: pd.DataFrame):\n    return df['revenue_plus_extra'] * (1 + df['extra_revenue_pc'])\n\nresult = _fn",
      "title": "Add % to Revenue",
      "nodeClass": "variable",
      "moduleId": "_root_",
      "x": 390,
      "y": 1100,
      "z": 1,
      "w": "180",
      "h": "40",
      "description": null,
      "units": null,
      "color": "#4CBCFF",
      "errorInDef": false,
      "nodeInfo": {
        "showInputs": 1,
        "showOutputs": 1,
        "showLabel": 1,
        "showBorder": 1,
        "fill": 1,
        "useNodeFont": 0
      },
      "nodeFont": null,
      "numberFormat": null,
      "originalId": null,
      "extraData": null,
      "picture": null,
      "evaluateOnStart": false,
      "defaultView": null,
      "prefixIdentifier": null,
      "hierarchy": null,
      "_isNodeCircular": false
    },
    {
      "identifier": "form_form_dataframe",
      "definition": "from pyplan_core.classes.FormTypes import FormColumn, FormSettings, DataType, ColumnType, DatabaseConnectionString, SQLiteConnection, PostgreSQLConnection\n\nresult = pp.form(\n    table_name='form_form_dataframe',\n    columns=[\n        FormColumn(field='region', title='Region', column_type=ColumnType.dataframe_column),\n        FormColumn(field='country', title='Country', column_type=ColumnType.dataframe_column),\n        FormColumn(field='item_type', title='Item Type', column_type=ColumnType.dataframe_column),\n        FormColumn(field='sales_channel', title='Sales Channel', column_type=ColumnType.dataframe_column),\n        FormColumn(field='total_revenue', title='Revenue', column_type=ColumnType.dataframe_column),\n        FormColumn(field='extra_revenue_val', title='Extra Revenue ($)', column_type=ColumnType.input, data_type=DataType.float, default_value=0.),\n        FormColumn(field='revenue_plus_extra', title='Revenue + Extra', column_type=ColumnType.calc, read_only=True, formula='total_revenue+extra_revenue_val'),\n        FormColumn(field='extra_revenue_pc', title='Extra Revenue (%)', column_type=ColumnType.input, data_type=DataType.float, default_value=0.),\n        FormColumn(field='revenue_plus_pc', title='Final Revenue', column_type=ColumnType.calc, read_only=True, formula=add_pc_to_revenue)\n    ],\n    settings=FormSettings(database_engine=DatabaseConnectionString.sqlite, database_connection=SQLiteConnection(database_path=forms_path), from_dataframe=True, source_dataframe_node=sales_data_for_form, source_dataframe_id_column='id_col')\n    )",
      "title": "Form from DataFrame",
      "nodeClass": "form",
      "moduleId": "_root_",
      "x": 660,
      "y": 1100,
      "z": 1,
      "w": "180",
      "h": "40",
      "description": null,
      "units": null,
      "color": null,
      "errorInDef": false,
      "nodeInfo": {
        "showInputs": 1,
        "showOutputs": 1,
        "showLabel": 1,
        "showBorder": 1,
        "fill": 1,
        "useNodeFont": 0
      },
      "nodeFont": null,
      "numberFormat": null,
      "originalId": null,
      "extraData": null,
      "picture": null,
      "evaluateOnStart": false,
      "defaultView": {
        "component_type": "core.Form",
        "component_id": "728d1892-11c4-4b5b-bc1b-543ff17cbd6d",
        "namespace": "ppc",
        "node_id": "form_form_dataframe",
        "x": 0,
        "y": 0,
        "w": 6,
        "h": 3,
        "error_code": null,
        "error_detail": null,
        "properties": {
          "code": null,
          "custom_code": false,
          "title": {
            "enabled": true,
            "text": "Form desde DataFrame",
            "custom_text": "",
            "show_units": true,
            "units_text": ""
          },
          "table_properties": {
            "colHeaders": true,
            "manualColumnResize": true,
            "multiColumnSorting": true,
            "rowHeaders": false
          },
          "calc_fields": {},
          "function_calc_fields": {},
          "unlink": [],
          "pivot": {
            "agg": "",
            "params": {
              "rows": [],
              "columns": [],
              "measures": []
            }
          },
          "page_size": {
            "rows": 100,
            "columns": 500
          },
          "sort": {},
          "renderers": {},
          "columns": {
            "id_col": {
              "readOnly": true
            },
            "region": {
              "readOnly": true,
              "className": ""
            },
            "country": {
              "readOnly": true,
              "className": ""
            },
            "item_type": {
              "readOnly": true,
              "className": ""
            },
            "sales_channel": {
              "readOnly": true,
              "className": ""
            },
            "total_revenue": {
              "readOnly": true,
              "className": ""
            },
            "revenue_calc": {
              "readOnly": true,
              "className": ""
            }
          },
          "right_total": false,
          "bottom_total": false,
          "hide_empty_data": "",
          "show_pivot_toolbar": false,
          "show_filter_toolbar": false,
          "value_format": {
            "type": "number",
            "thousands_separator": true,
            "decimal_places": 2,
            "prefix": "",
            "suffix": "",
            "date_format": null
          },
          "drilldowns": [],
          "style": {},
          "heatmap_properties": null
        },
        "filters": {
          "country": []
        },
        "cell_properties": null
      },
      "prefixIdentifier": null,
      "hierarchy": null,
      "_isNodeCircular": false
    },
    {
      "identifier": "from_dataframe_txt",
      "definition": "",
      "title": "From DataFrame",
      "nodeClass": "text",
      "moduleId": "_root_",
      "x": 30,
      "y": 950,
      "z": -1,
      "w": "830",
      "h": "220",
      "description": null,
      "units": null,
      "color": "#EEEEEE",
      "errorInDef": false,
      "nodeInfo": {
        "showInputs": 0,
        "showOutputs": 0,
        "showLabel": 1,
        "showBorder": 0,
        "fill": 1,
        "useNodeFont": 0
      },
      "nodeFont": null,
      "numberFormat": null,
      "originalId": null,
      "extraData": null,
      "picture": null,
      "evaluateOnStart": false,
      "defaultView": null,
      "prefixIdentifier": null,
      "hierarchy": null,
      "_isNodeCircular": false
    },
    {
      "identifier": "form_w_custom_rows",
      "definition": "from pyplan_core.classes.FormTypes import FormColumn, FormSettings, DataType, ColumnType, DatabaseConnectionString, SQLiteConnection, PostgreSQLConnection\n\nresult = pp.form(\n    table_name='form_w_custom_rows',\n    columns=[\n        FormColumn(field='sku', title='SKU', column_type=ColumnType.input, data_type=DataType.integer),\n        FormColumn(field='type', title='Type', column_type=ColumnType.input, default_value='Adjustment', read_only=True, data_type=DataType.string),\n        FormColumn(field='demand', title='Demanda', column_type=ColumnType.input, data_type=DataType.float)\n    ],\n    settings=FormSettings(database_engine=DatabaseConnectionString.sqlite, database_connection=SQLiteConnection(database_path='forms_data/forms.db'), initial_empty_rows=2, allow_add_rows=False, allow_remove_rows=False, fixed_columns=0, from_dataframe=False, remove_old_rows=False)\n)",
      "title": "Form with custom rows",
      "nodeClass": "form",
      "moduleId": "_root_",
      "x": 660,
      "y": 1200,
      "z": 1,
      "w": "180",
      "h": "40",
      "description": null,
      "units": null,
      "color": null,
      "errorInDef": false,
      "nodeInfo": {
        "showInputs": 1,
        "showOutputs": 1,
        "showLabel": 1,
        "showBorder": 1,
        "fill": 1,
        "useNodeFont": 0
      },
      "nodeFont": null,
      "numberFormat": null,
      "originalId": null,
      "extraData": null,
      "picture": null,
      "evaluateOnStart": false,
      "defaultView": {
        "component_type": "core.Form",
        "component_id": "6fdc37ca-61ae-49a3-a010-56db2a578845",
        "namespace": "ppc",
        "node_id": "form_w_custom_rows",
        "x": 0,
        "y": 0,
        "w": 6,
        "h": 3,
        "error_code": "1",
        "error_detail": "'NoneType' object has no attribute 'silentInvalidate'",
        "properties": {
          "code": "from typing import List\nimport pyplan_core.interface.components.core as ppc\nimport pyplan_core.interface.classes as ppcl\nfrom pyplan_core.classes.Form import FormChange\nfrom pyplan_core.interface.components.events import BaseEvent\nimport pyplan_core.interface.results as results\n\nfrom pyplan_core.interface.classes.BaseComponent import ComponentErrorCode\n\nfrom pyplan_core.interface.components.properties.FormProperties import FormData\nfrom pyplan_core.interface.components.properties.TableProperties import RowCellProperty\n\n\nclass MyComponent(ppc.Form):\n\n    def render(self, df: pd.DataFrame, event) -> FormData:\n        \"\"\"Renders the component and returns a FormData object\"\"\"\n        form = self.get_form()\n\n        self.model.getNode('demand_data').silentInvalidate()\n        df_from_model = self.model.getNode('demand_data').result\n\n        df_demand = df_from_model.melt(id_vars='sku', value_vars=['planned', 'difference'], var_name='type', value_name='demand')\n        # Add id field to match form structure and order to sort rows\n        df_demand['id'] = 0\n        \n        # Add order to sort rows\n        df['order'] = 2\n        df_demand['order'] = np.where(df_demand['type'] == 'planned', 1, 3)\n\n        # Concatenates and orders final dataframe\n        final_df = pd.concat([df, df_demand])\n        final_df = final_df.sort_values(by=['sku', 'order'])\n        final_df.drop(columns=['order'], inplace=True)\n\n        self.cell_properties = [\n            RowCellProperty(column='type', values=['planned', 'difference'], cell_properties={\n                'readOnly': True,\n                'style': {\n                    'background-color': '#676A46'\n                }\n            })\n        ]\n        \n        return self.utils.generate_result_data(\n            df=final_df,\n            form=form,\n            table_properties=self.properties,\n            row_page_number=self.row_page_number,\n            column_page_number=self.column_page_number,\n            edit_mode=self.edit_mode,\n            cell_properties=self.cell_properties,\n            has_unconfirmed_changes=self.has_unconfirmed_changes(),\n        )\n\n\ncomponent: MyComponent = MyComponent.parse_obj(component_definition)\nresult = component\n",
          "custom_code": true,
          "title": {
            "enabled": true,
            "text": "Form with custom rows",
            "custom_text": "",
            "show_units": true,
            "units_text": ""
          },
          "hide_header": null,
          "hide_border": null,
          "table_properties": {
            "colHeaders": true,
            "manualColumnResize": true,
            "multiColumnSorting": true,
            "rowHeaders": false
          },
          "calculated_fields": [],
          "unlink": [],
          "pivot": {
            "agg": {
              "sku": "sum"
            },
            "params": {
              "rows": [
                "id"
              ],
              "columns": [],
              "measures": [
                "sku"
              ]
            }
          },
          "page_size": {
            "rows": 100,
            "columns": 500
          },
          "sort": {},
          "renderers": {},
          "columns": {
            "id": {
              "readOnly": true
            },
            "tipo": {
              "readOnly": true,
              "className": ""
            },
            "type": {
              "readOnly": true,
              "className": ""
            }
          },
          "right_total": false,
          "bottom_total": false,
          "hide_empty_data": "",
          "show_pivot_toolbar": false,
          "show_filter_toolbar": false,
          "drilldowns": [],
          "styles": {
            "all": {
              "style": {},
              "conditional_format": [],
              "value_format": {
                "type": "number",
                "thousands_separator": true,
                "decimal_places": 2,
                "prefix": "",
                "suffix": "",
                "date_format": ""
              }
            },
            "custom": [
              {
                "conditions": [
                  {
                    "condition_type": "column",
                    "dimension_name": "columns",
                    "filter_type": "equal",
                    "values": [
                      "sku"
                    ],
                    "apply_to": "values"
                  }
                ],
                "cell_properties": {
                  "style": {},
                  "conditional_format": [],
                  "value_format": {
                    "type": "number",
                    "thousands_separator": true,
                    "decimal_places": 0,
                    "prefix": "",
                    "suffix": "",
                    "date_format": ""
                  }
                }
              }
            ]
          },
          "applied_hierarchies": {},
          "hide_id_column": true,
          "n_rows_to_add": 1
        },
        "alternative_properties": null,
        "filters": {},
        "cell_properties": null
      },
      "prefixIdentifier": null,
      "hierarchy": null,
      "_isNodeCircular": false
    },
    {
      "identifier": "demand_data",
      "definition": "_form_data = form_w_custom_rows.value\n\n#simula calculo:\ndif1 = _form_data[_form_data['sku']==1]['demand']\ndif2 = _form_data[_form_data['sku']==2]['demand']\n\nresult = pd.DataFrame(data=[{\n    'sku': 1,\n    'planned': 10,\n    'difference': 10 - dif1,\n},\n{\n    'sku': 2,\n    'planned': 20,\n    'difference': 20 - dif2,\n}\n])",
      "title": "Demand data",
      "nodeClass": "report",
      "moduleId": "_root_",
      "x": 660,
      "y": 1260,
      "z": 1,
      "w": "180",
      "h": "40",
      "description": null,
      "units": null,
      "color": "#4CBCFF",
      "errorInDef": false,
      "nodeInfo": {
        "showInputs": 1,
        "showOutputs": 1,
        "showLabel": 1,
        "showBorder": 1,
        "fill": 1,
        "useNodeFont": 0
      },
      "nodeFont": null,
      "numberFormat": null,
      "originalId": null,
      "extraData": null,
      "picture": null,
      "evaluateOnStart": false,
      "defaultView": null,
      "prefixIdentifier": null,
      "hierarchy": null,
      "_isNodeCircular": false
    },
    {
      "identifier": "values_from_form",
      "definition": "result = form_w_custom_rows.value",
      "title": "Values from form",
      "nodeClass": "report",
      "moduleId": "_root_",
      "x": 890,
      "y": 1200,
      "z": 1,
      "w": "180",
      "h": "40",
      "description": null,
      "units": null,
      "color": "#4CBCFF",
      "errorInDef": false,
      "nodeInfo": {
        "showInputs": 1,
        "showOutputs": 1,
        "showLabel": 1,
        "showBorder": 1,
        "fill": 1,
        "useNodeFont": 0
      },
      "nodeFont": null,
      "numberFormat": null,
      "originalId": null,
      "extraData": null,
      "picture": null,
      "evaluateOnStart": false,
      "defaultView": {
        "component_type": "core.Table",
        "component_id": "9ee8a194-98a9-4fe8-8f72-4dc1311b5518",
        "namespace": "ppc",
        "node_id": "values_from_form",
        "x": 0,
        "y": 0,
        "w": 6,
        "h": 3,
        "error_code": null,
        "error_detail": null,
        "properties": {
          "code": null,
          "custom_code": false,
          "title": {
            "enabled": true,
            "text": "Valores en formulario",
            "custom_text": "",
            "show_units": true,
            "units_text": ""
          },
          "hide_header": null,
          "hide_border": null,
          "table_properties": {
            "colHeaders": true,
            "manualColumnResize": true,
            "multiColumnSorting": true,
            "rowHeaders": false
          },
          "calculated_fields": [],
          "unlink": [],
          "pivot": {
            "agg": {
              "sku": "sum"
            },
            "params": {
              "rows": [],
              "columns": [],
              "measures": []
            }
          },
          "page_size": {
            "rows": 100,
            "columns": 500
          },
          "sort": {},
          "renderers": {},
          "columns": {},
          "right_total": false,
          "bottom_total": false,
          "hide_empty_data": "",
          "show_pivot_toolbar": false,
          "show_filter_toolbar": false,
          "drilldowns": [],
          "styles": {
            "all": {
              "style": {},
              "conditional_format": [],
              "value_format": {
                "type": "number",
                "thousands_separator": true,
                "decimal_places": 2,
                "prefix": "",
                "suffix": "",
                "date_format": ""
              }
            },
            "custom": []
          },
          "applied_hierarchies": {}
        },
        "alternative_properties": null,
        "filters": {},
        "cell_properties": null
      },
      "prefixIdentifier": null,
      "hierarchy": null,
      "_isNodeCircular": false
    }
  ]
}
