{"nodeList": [{"identifier": "form_comun", "definition": "from pyplan_core.classes.FormTypes import FormColumn, FormSettings, DataType, ColumnType, DatabaseConnectionString, SQLiteConnection, PostgreSQLConnection\n            \nresult = pp.form(\n    table_name='form_comun_tbl',\n    columns=[\n        FormColumn(field='region', title='Region', column_type=ColumnType.input, data_type=DataType.string),\n        FormColumn(field='item_type', title='Item type', column_type=ColumnType.selector, data_type=DataType.string, values=['Item 1', 'Item 2', 'Item 3']),\n        FormColumn(field='price', title='Price', column_type=ColumnType.input, data_type=DataType.float),\n        FormColumn(field='quantity', title='Quantity', column_type=ColumnType.input, data_type=DataType.float),\n        FormColumn(field='revenue', title='Revenue', column_type=ColumnType.calc, data_type=DataType.float, formula='price*quantity')\n    ],\n    settings=FormSettings(\n        database_engine=DatabaseConnectionString.sqlite,\n        database_connection=SQLiteConnection(database_path=forms_path),\n        initial_empty_rows=5,\n        allow_add_rows=True,\n        allow_remove_rows=True\n    )\n)", "title": "Form com\u00fan", "nodeClass": "form", "moduleId": "_root_", "x": 660, "y": 70, "z": 1, "w": "180", "h": "40", "description": "<p>Funcionalidades:</p>\n<ul>\n<li>Campos input</li>\n</ul>", "units": null, "color": "#4CBCFF", "errorInDef": false, "nodeInfo": {"showInputs": 1, "showOutputs": 1, "showLabel": 1, "showBorder": 1, "fill": 1, "useNodeFont": 0}, "nodeFont": null, "numberFormat": null, "originalId": null, "extraData": null, "picture": null, "evaluateOnStart": false, "defaultView": null, "prefixIdentifier": null, "_isNodeCircular": false}, {"identifier": "form_c_selectores", "definition": "import os\nfrom pyplan_core.classes.FormTypes import FormColumn, FormSettings, DataType, ColumnType, DatabaseConnectionString, SQLiteConnection\n\nresult = pp.form(\n    table_name='form_c_selectores_tbl',\n    columns=[\n        FormColumn(\n            field='region',\n            title='Region',\n            data_type=DataType.string,\n            column_type=ColumnType.input,\n        ),\n        # Campo tipo selector\n        FormColumn(\n            field='item_type',\n            title='Item type',\n            data_type=DataType.string,\n            column_type=ColumnType.selector,\n            values=item_type.tolist()  # puede ser una lista a mano\n        ),\n        FormColumn(\n            field='price',\n            title='Price',\n            data_type=DataType.float,\n            column_type=ColumnType.input,\n        ),\n        FormColumn(\n            field='quantity',\n            title='Quantity',\n            data_type=DataType.float,\n            column_type=ColumnType.input,\n        ),\n        FormColumn(\n            field='revenue',\n            title='Revenue',\n            data_type=DataType.float,\n            column_type=ColumnType.calc,\n            formula='price*quantity'\n        )\n    ],\n    settings=FormSettings(\n        database_engine=DatabaseConnectionString.sqlite,\n        database_connection=SQLiteConnection(database_path=forms_path),\n        initial_empty_rows=5,\n        allow_add_rows=True,\n        allow_remove_rows=True\n    )\n)", "title": "Form con selectores", "nodeClass": "form", "moduleId": "_root_", "x": 660, "y": 470, "z": 1, "w": "180", "h": "40", "description": "<p>Funcionalidades:</p>\n<ul>\n<li>Campos input</li>\n<li>Campos calculados por columna</li>\n<li>Campos selectores (b&aacute;sico)</li>\n</ul>", "units": null, "color": "#4CBCFF", "errorInDef": false, "nodeInfo": {"showInputs": 1, "showOutputs": 1, "showLabel": 1, "showBorder": 1, "fill": 1, "useNodeFont": 0}, "nodeFont": null, "numberFormat": null, "originalId": null, "extraData": null, "picture": null, "evaluateOnStart": false, "defaultView": null, "prefixIdentifier": null, "_isNodeCircular": false}, {"identifier": "form_c_selectores_filt_x_usuario", "definition": "import os\nfrom pyplan_core.classes.FormTypes import FormColumn, FormSettings, DataType, ColumnType, DatabaseConnectionString, SQLiteConnection\n\nresult = pp.form(\n    table_name='form_c_selectores_filtrados_tbl',\n    columns=[\n        # Campo tipo selector\n        FormColumn(\n            field='region',\n            title='Region',\n            data_type=DataType.string,\n            column_type=ColumnType.selector,\n            values=filtered_regions.tolist(),  # \u00edndice variable dependiendo de selector 'Qui\u00e9n soy?'\n            filter_rows_by_domain=True  # filtra las filas del formulario en base a los valores de values (para que quien no tiene acceso a carga de determinadas regiones s\u00f3lo pueda cargar y ver las asignadas para \u00e9l)\n        ),\n        # Campo tipo selector\n        FormColumn(\n            field='item_type',\n            title='Item type',\n            data_type=DataType.string,\n            column_type=ColumnType.selector,\n            values=item_type.tolist()  # puede ser una lista a mano\n        ),\n        FormColumn(\n            field='price',\n            title='Price',\n            data_type=DataType.float,\n            column_type=ColumnType.input,\n        ),\n        FormColumn(\n            field='quantity',\n            title='Quantity',\n            data_type=DataType.float,\n            column_type=ColumnType.input,\n        ),\n        FormColumn(\n            field='revenue',\n            title='Revenue',\n            data_type=DataType.float,\n            column_type=ColumnType.calc,\n            formula='price*quantity'\n        )\n    ],\n    settings=FormSettings(\n        database_engine=DatabaseConnectionString.sqlite,\n        database_connection=SQLiteConnection(database_path=forms_path),\n        initial_empty_rows=5,\n        allow_add_rows=True,\n        allow_remove_rows=True\n    )\n)", "title": "Form con selectores filtrados por usuario", "nodeClass": "form", "moduleId": "_root_", "x": 660, "y": 570, "z": 1, "w": "180", "h": "40", "description": "<p>Funcionalidades:</p>\n<ul>\n<li>Campos input</li>\n<li>Campos calculados por columna</li>\n<li>Campo selector de regi&oacute;n devuelve valores de acuerdo al usuario elegido.</li>\n<li>Filas se filtran en base a las regiones que puede ver el usuario elegido.</li>\n</ul>", "units": null, "color": "#4CBCFF", "errorInDef": false, "nodeInfo": {"showInputs": 1, "showOutputs": 1, "showLabel": 1, "showBorder": 1, "fill": 1, "useNodeFont": 0}, "nodeFont": null, "numberFormat": null, "originalId": null, "extraData": null, "picture": null, "evaluateOnStart": false, "defaultView": {"component_type": "core.Form", "component_id": "60c92d0d-875b-4982-acbd-0aeed9d5fcd8", "namespace": "ppc", "node_id": "form_c_selectores_filt_x_usuario", "x": 0, "y": 0, "w": 6, "h": 3, "error_code": null, "error_detail": null, "properties": {"code": null, "custom_code": false, "title": {"enabled": true, "text": "Form con selectores filtrados por usuario", "custom_text": "", "show_units": true, "units_text": ""}, "table_properties": {"colHeaders": true, "manualColumnResize": true, "multiColumnSorting": true, "rowHeaders": false}, "calc_fields": {}, "function_calc_fields": {}, "unlink": [], "pivot": {"agg": "", "params": {"rows": [], "columns": [], "measures": []}}, "page_size": {"rows": 100, "columns": 500}, "sort": {}, "renderers": {}, "columns": {"id": {"readOnly": true}, "region": {"type": "dropdown", "source": ["North America", "Europe"], "renderer": "custom_dropdown_renderer"}, "item_type": {"type": "dropdown", "source": ["Beverages", "Food", "Others"], "renderer": "custom_dropdown_renderer"}, "revenue": {"readOnly": true, "className": ""}, "unit_revenue": {"readOnly": true, "className": ""}}, "right_total": false, "bottom_total": false, "hide_empty_data": "", "show_pivot_toolbar": false, "show_filter_toolbar": false, "value_format": {"type": null, "thousands_separator": false, "decimal_places": null, "prefix": "", "suffix": "", "date_format": null}, "drilldowns": [], "style": {}}, "filters": {}, "index_cell_properties": null}, "prefixIdentifier": null, "_isNodeCircular": false}, {"identifier": "quien_soy", "definition": "result = pp.selector(users, 2, False)", "title": "Qui\u00e9n soy?", "nodeClass": "inputselector", "moduleId": "_root_", "x": 480, "y": 570, "z": 1, "w": "110", "h": "30", "description": null, "units": null, "color": "#4cffa6", "errorInDef": false, "nodeInfo": {"showInputs": 1, "showOutputs": 1, "showLabel": 1, "showBorder": 1, "fill": 1, "useNodeFont": 0}, "nodeFont": null, "numberFormat": null, "originalId": null, "extraData": null, "picture": null, "evaluateOnStart": false, "defaultView": null, "prefixIdentifier": null, "_isNodeCircular": false}, {"identifier": "filtered_regions", "definition": "_df = form_c_regiones_x_usuario.value\n\nresult = pd.Index(\n    _df[_df['users'] == quien_soy.value]['regions'].unique()\n)", "title": "Filtered regions", "nodeClass": "index", "moduleId": "_root_", "x": 250, "y": 570, "z": 1, "w": "100", "h": "50", "description": null, "units": null, "color": "#9999ff", "errorInDef": false, "nodeInfo": {"showInputs": 0, "showOutputs": 0, "showLabel": 1, "showBorder": 1, "fill": 1, "useNodeFont": 0}, "nodeFont": null, "numberFormat": null, "originalId": null, "extraData": null, "picture": null, "evaluateOnStart": false, "defaultView": null, "prefixIdentifier": null, "_isNodeCircular": false}, {"identifier": "users", "definition": "result = pd.Index(['User A', 'User B', 'User C'])", "title": "Users", "nodeClass": "index", "moduleId": "_root_", "x": 360, "y": 570, "z": 1, "w": "100", "h": "50", "description": null, "units": null, "color": "#9999ff", "errorInDef": false, "nodeInfo": {"showInputs": 0, "showOutputs": 0, "showLabel": 1, "showBorder": 1, "fill": 1, "useNodeFont": 0}, "nodeFont": null, "numberFormat": null, "originalId": null, "extraData": null, "picture": null, "evaluateOnStart": false, "defaultView": null, "prefixIdentifier": null, "_isNodeCircular": false}, {"identifier": "form_c_regiones_x_usuario", "definition": "import os\nfrom pyplan_core.classes.FormTypes import FormColumn, FormSettings, DataType, ColumnType, DatabaseConnectionString, SQLiteConnection\n\nresult = pp.form(\n    table_name='form_c_regiones_x_usuario_tbl',\n    columns=[\n        FormColumn(\n            field='regions',\n            title='Region',\n            data_type=DataType.string,\n            column_type=ColumnType.selector,\n            values=regions.tolist()\n        ),\n        FormColumn(\n            field='users',\n            title='User',\n            data_type=DataType.string,\n            column_type=ColumnType.selector,\n            values=users.tolist()  # puede ser una lista a mano\n        )\n    ],\n    settings=FormSettings(\n        database_engine=DatabaseConnectionString.sqlite,\n        database_connection=SQLiteConnection(database_path=forms_path),\n        initial_empty_rows=5,\n        allow_add_rows=True,\n        allow_remove_rows=True\n    )\n)", "title": "Form con regiones por usuario", "nodeClass": "form", "moduleId": "_root_", "x": 50, "y": 570, "z": 1, "w": "180", "h": "40", "description": "<p>Funcionalidades:</p>\n<ul>\n<li>Campos input</li>\n<li>Campos calculados por columna</li>\n</ul>", "units": null, "color": "#4CBCFF", "errorInDef": false, "nodeInfo": {"showInputs": 1, "showOutputs": 1, "showLabel": 1, "showBorder": 1, "fill": 1, "useNodeFont": 0}, "nodeFont": null, "numberFormat": null, "originalId": null, "extraData": null, "picture": null, "evaluateOnStart": false, "defaultView": null, "prefixIdentifier": null, "_isNodeCircular": false}, {"identifier": "regions", "definition": "result = pd.Index(['North America', 'South America', 'Europe', 'Asia', 'Africa'])", "title": "Regions", "nodeClass": "index", "moduleId": "_root_", "x": 160, "y": 470, "z": 1, "w": "100", "h": "50", "description": null, "units": null, "color": "#9999ff", "errorInDef": false, "nodeInfo": {"showInputs": 0, "showOutputs": 0, "showLabel": 1, "showBorder": 1, "fill": 1, "useNodeFont": 0}, "nodeFont": null, "numberFormat": null, "originalId": null, "extraData": null, "picture": null, "evaluateOnStart": false, "defaultView": null, "prefixIdentifier": null, "_isNodeCircular": false}, {"identifier": "form_c_cols_bloqueadas", "definition": "import os\nfrom pyplan_core.classes.FormTypes import FormColumn, FormSettings, DataType, ColumnType, DatabaseConnectionString, SQLiteConnection\n\n# Condici\u00f3n que determina si columna es de s\u00f3lo lectura\n_is_read_only = ultimo_mes_real.value\n# Generaci\u00f3n de columnas de forma program\u00e1tica\n_time_cols = []\nfor n, t in enumerate(time, 1):\n    _col = FormColumn(\n        field=f'mes_{n:02d}',  # mes_01, mes_02, ..., mes_12\n        title=t,\n        data_type=DataType.float,\n        column_type=ColumnType.input,\n        read_only=t <= ultimo_mes_real.value  # condici\u00f3n que determina si columna es de s\u00f3lo lectura\n    )\n    _time_cols.append(_col)\n\nresult = pp.form(\n    table_name='form_c_cols_bloqueadas_tbl',\n    columns=[\n        # Campo tipo selector\n        FormColumn(\n            field='item_type',\n            title='Item type',\n            data_type=DataType.string,\n            column_type=ColumnType.selector,\n            values=item_type.tolist()  # puede ser una lista a mano\n        )\n    ] + \n        _time_cols + \n    [\n        FormColumn(\n            field='total',\n            title='Total',\n            data_type=DataType.float,\n            column_type=ColumnType.calc,\n            formula='+'.join([col.field for col in _time_cols])  # suma de todos los meses: `mes_01+mes_02+...+mes_12`\n        )\n    ],\n    settings=FormSettings(\n        database_engine=DatabaseConnectionString.sqlite,\n        database_connection=SQLiteConnection(database_path=forms_path),\n        initial_empty_rows=5,\n        allow_add_rows=True,\n        allow_remove_rows=True,\n        fixed_columns=1\n    )\n)", "title": "Form con columnas bloqueadas", "nodeClass": "form", "moduleId": "_root_", "x": 660, "y": 270, "z": 1, "w": "180", "h": "40", "description": "<p>Funcionalidades:</p>\n<ul>\n<li>Campos input</li>\n<li>Campos calculados por columna (Total)</li>\n<li>Campos selectores (b&aacute;sico)</li>\n<li>Algunas columnas bloqueadas dependiendo del selector de &Uacute;ltimo mes real (ver c&oacute;digo del nodo en definici&oacute;n de columnas)</li>\n<li>Columnas fijadas (Item Type)</li>\n</ul>", "units": null, "color": "#4CBCFF", "errorInDef": false, "nodeInfo": {"showInputs": 1, "showOutputs": 1, "showLabel": 1, "showBorder": 1, "fill": 1, "useNodeFont": 0}, "nodeFont": null, "numberFormat": null, "originalId": null, "extraData": null, "picture": null, "evaluateOnStart": false, "defaultView": null, "prefixIdentifier": null, "_isNodeCircular": false}, {"identifier": "time", "definition": "result = pp.create_time('2022.01', '2022.12')", "title": "Time", "nodeClass": "index", "moduleId": "_root_", "x": 50, "y": 270, "z": 1, "w": "100", "h": "50", "description": null, "units": null, "color": "#9999ff", "errorInDef": false, "nodeInfo": {"showInputs": 0, "showOutputs": 0, "showLabel": 1, "showBorder": 1, "fill": 1, "useNodeFont": 0}, "nodeFont": null, "numberFormat": null, "originalId": null, "extraData": null, "picture": null, "evaluateOnStart": false, "defaultView": null, "prefixIdentifier": null, "_isNodeCircular": false}, {"identifier": "ultimo_mes_real", "definition": "result = pp.selector([pp.add_periods(time[0], periods=-1)] + time.tolist(), 6, False)", "title": "\u00daltimo mes real", "nodeClass": "inputselector", "moduleId": "_root_", "x": 170, "y": 270, "z": 1, "w": "140", "h": "30", "description": null, "units": null, "color": "#4cffa6", "errorInDef": false, "nodeInfo": {"showInputs": 0, "showOutputs": 0, "showLabel": 1, "showBorder": 1, "fill": 1, "useNodeFont": 0}, "nodeFont": null, "numberFormat": null, "originalId": null, "extraData": null, "picture": null, "evaluateOnStart": false, "defaultView": {"component_type": "core.Selector", "component_id": "3a1d89ab-0adc-4912-8d2e-db3f34e000be", "namespace": "ppc", "node_id": "ultimo_mes_real", "x": 0, "y": 0, "w": 6, "h": 3, "error_code": null, "error_detail": null, "properties": {"code": null, "custom_code": false, "title": {"enabled": true, "text": "\u00daltimo mes real", "custom_text": "", "show_units": true, "units_text": ""}, "format": "radio", "orientation": "vertical", "page_size": 25}}, "prefixIdentifier": null, "_isNodeCircular": false}, {"identifier": "form_c_checkboxes", "definition": "import os\nfrom pyplan_core.classes.FormTypes import FormColumn, FormSettings, DataType, ColumnType, DatabaseConnectionString, SQLiteConnection\n\nresult = pp.form(\n    table_name='form_c_checkboxes_tbl',\n    columns=[\n        FormColumn(\n            field='region',\n            title='Region',\n            data_type=DataType.string,\n            column_type=ColumnType.input,\n        ),\n        # Campo tipo selector\n        FormColumn(\n            field='item_type',\n            title='Item type',\n            data_type=DataType.string,\n            column_type=ColumnType.selector,\n            values=item_type.tolist()  # puede ser una lista a mano\n        ),\n        FormColumn(\n            field='price',\n            title='Price',\n            data_type=DataType.float,\n            column_type=ColumnType.input,\n        ),\n        FormColumn(\n            field='quantity',\n            title='Quantity',\n            data_type=DataType.float,\n            column_type=ColumnType.input,\n        ),\n        FormColumn(\n            field='revenue',\n            title='Revenue',\n            data_type=DataType.float,\n            column_type=ColumnType.calc,\n            formula='price*quantity'\n        ),\n        FormColumn(\n            field='active',\n            title='Is active?',\n            data_type=DataType.boolean,\n            column_type=ColumnType.checkbox,\n        ),\n    ],\n    settings=FormSettings(\n        database_engine=DatabaseConnectionString.sqlite,\n        database_connection=SQLiteConnection(database_path=forms_path),\n        initial_empty_rows=5,\n        allow_add_rows=True,\n        allow_remove_rows=True\n    )\n)", "title": "Form con checkboxes", "nodeClass": "form", "moduleId": "_root_", "x": 660, "y": 170, "z": 1, "w": "180", "h": "40", "description": "<p>Funcionalidades:</p>\n<ul>\n<li>Campos input</li>\n<li>Campos calculados por columna</li>\n<li>Campos selectores (b&aacute;sico)</li>\n<li>Campo con checkbox</li>\n</ul>", "units": null, "color": "#4CBCFF", "errorInDef": false, "nodeInfo": {"showInputs": 1, "showOutputs": 1, "showLabel": 1, "showBorder": 1, "fill": 1, "useNodeFont": 0}, "nodeFont": null, "numberFormat": null, "originalId": null, "extraData": null, "picture": null, "evaluateOnStart": false, "defaultView": null, "prefixIdentifier": null, "_isNodeCircular": false}, {"identifier": "form_asign_marca_sab_emp_prod", "definition": "import os\nfrom pyplan_core.classes.FormTypes import FormColumn, FormSettings, DataType, ColumnType, DatabaseConnectionString, SQLiteConnection\n\nresult = pp.form(\n    table_name='form_asign_marca_sab_emp_prod_tbl',\n    columns=[\n        FormColumn(\n            field='marca',\n            title='Marca',\n            data_type=DataType.string,\n            column_type=ColumnType.input,\n        ),\n        FormColumn(\n            field='sabor',\n            title='Sabor',\n            data_type=DataType.string,\n            column_type=ColumnType.input,\n        ),\n        FormColumn(\n            field='empaque',\n            title='Empaque',\n            data_type=DataType.string,\n            column_type=ColumnType.input,\n        ),\n        FormColumn(\n            field='producto',\n            title='Producto',\n            data_type=DataType.string,\n            column_type=ColumnType.input,\n        ),\n    ],\n    settings=FormSettings(\n        database_engine=DatabaseConnectionString.sqlite,\n        database_connection=SQLiteConnection(database_path=forms_path),\n        initial_empty_rows=50,\n        allow_add_rows=True,\n        allow_remove_rows=True\n    )\n)", "title": "Form asignaci\u00f3n Marca, Sabor, Empaque, Producto", "nodeClass": "form", "moduleId": "_root_", "x": 50, "y": 670, "z": 1, "w": "180", "h": "40", "description": "<p>Funcionalidades:</p>\n<ul>\n<li>Campos input</li>\n<li>Campos calculados por columna</li>\n</ul>", "units": null, "color": "#4CBCFF", "errorInDef": false, "nodeInfo": {"showInputs": 1, "showOutputs": 1, "showLabel": 1, "showBorder": 1, "fill": 1, "useNodeFont": 0}, "nodeFont": null, "numberFormat": null, "originalId": null, "extraData": null, "picture": null, "evaluateOnStart": false, "defaultView": null, "prefixIdentifier": null, "_isNodeCircular": false}, {"identifier": "form_c_selectores_rel", "definition": "import os\nfrom pyplan_core.classes.FormTypes import FormColumn, FormSettings, DataType, ColumnType, DatabaseConnectionString, SQLiteConnection, PostgreSQLConnection\n\nresult = pp.form(\n    table_name='form_c_selectores_rel_tbl',\n    columns=[\n        FormColumn(\n            field='marca',\n            title='Marca',\n            data_type=DataType.string,\n            column_type=ColumnType.selector,\n            values=form_asign_marca_sab_emp_prod.value['marca'].unique().tolist()\n        ),\n        FormColumn(\n            field='sabor',\n            title='Sabor',\n            data_type=DataType.string,\n            column_type=ColumnType.related_selector,\n            related_map=form_asign_marca_sab_emp_prod,\n            related_map_column_values='sabor',\n            related_columns='marca'\n        ),\n        FormColumn(\n            field='empaque',\n            title='Empaque',\n            data_type=DataType.string,\n            column_type=ColumnType.related_selector,\n            related_map=form_asign_marca_sab_emp_prod,\n            related_map_column_values='empaque',\n            related_columns=['marca', 'sabor']\n        ),\n        FormColumn(\n            field='producto',\n            title='Producto',\n            data_type=DataType.string,\n            column_type=ColumnType.related_selector,\n            related_map=form_asign_marca_sab_emp_prod,\n            related_map_column_values='producto',\n            related_columns=['marca', 'sabor', 'empaque']\n        ),\n        FormColumn(\n            field='price',\n            title='Price',\n            data_type=DataType.float,\n            column_type=ColumnType.input,\n        ),\n        FormColumn(\n            field='quantity',\n            title='Quantity',\n            data_type=DataType.float,\n            column_type=ColumnType.input,\n        ),\n        FormColumn(\n            field='revenue',\n            title='Revenue',\n            data_type=DataType.float,\n            column_type=ColumnType.calc,\n            formula='price*quantity'\n        )\n    ],\n    settings=FormSettings(\n        database_engine=DatabaseConnectionString.sqlite,\n        database_connection=SQLiteConnection(database_path=forms_path),\n        initial_empty_rows=5,\n        allow_add_rows=True,\n        allow_remove_rows=True\n    )\n)", "title": "Form con selectores relacionados", "nodeClass": "form", "moduleId": "_root_", "x": 660, "y": 670, "z": 1, "w": "180", "h": "40", "description": "<p>Funcionalidades:</p>\n<ul>\n<li>Campos input</li>\n<li>Campos calculados por columna</li>\n<li>Campos Producto, Empaque y Sabor devuelven valores de acuerdo a lo que se haya cargado en las columnas anteriores basados en un mapa de asignaci&oacute;n</li>\n</ul>", "units": null, "color": "#4CBCFF", "errorInDef": false, "nodeInfo": {"showInputs": 1, "showOutputs": 1, "showLabel": 1, "showBorder": 1, "fill": 1, "useNodeFont": 0}, "nodeFont": null, "numberFormat": null, "originalId": null, "extraData": null, "picture": null, "evaluateOnStart": false, "defaultView": {"component_type": "core.Form", "component_id": "60c92d0d-875b-4982-acbd-0aeed9d5fcd8", "namespace": "ppc", "node_id": "form_c_selectores_rel", "x": 0, "y": 0, "w": 6, "h": 3, "error_code": null, "error_detail": null, "properties": {"code": null, "custom_code": false, "title": {"enabled": true, "text": "Form con selectores relacionados", "custom_text": "", "show_units": true, "units_text": ""}, "table_properties": {"colHeaders": true, "manualColumnResize": true, "multiColumnSorting": true, "rowHeaders": false}, "calc_fields": {}, "function_calc_fields": {}, "unlink": [], "pivot": {"agg": "", "params": {"rows": [], "columns": [], "measures": []}}, "page_size": {"rows": 100, "columns": 500}, "sort": {}, "renderers": {}, "columns": {"id": {"readOnly": true}, "region": {"type": "dropdown", "source": ["North America", "South America", "Europe"], "renderer": "custom_dropdown_renderer"}, "item_type": {"type": "dropdown", "source": ["Beverages", "Food", "Others"], "renderer": "custom_dropdown_renderer"}, "revenue": {"readOnly": true, "className": ""}, "unit_revenue": {"readOnly": true, "className": ""}, "marca": {"type": "dropdown", "source": ["ADES", "CC", "SP"], "renderer": "custom_dropdown_renderer"}, "sabor": {"type": "dropdown", "renderer": "custom_dropdown_renderer"}, "empaque": {"type": "dropdown", "renderer": "custom_dropdown_renderer"}, "producto": {"type": "dropdown", "renderer": "custom_dropdown_renderer"}}, "right_total": false, "bottom_total": false, "hide_empty_data": "", "show_pivot_toolbar": false, "show_filter_toolbar": false, "value_format": {"type": null, "thousands_separator": false, "decimal_places": null, "prefix": "", "suffix": "", "date_format": null}, "drilldowns": [], "style": {}}, "filters": {}, "index_cell_properties": null}, "prefixIdentifier": null, "_isNodeCircular": false}, {"identifier": "form_cambia_valor_otra_celda", "definition": "import os\nfrom pyplan_core.classes.FormTypes import FormColumn, FormSettings, DataType, ColumnType, DatabaseConnectionString, SQLiteConnection\n\nresult = pp.form(\n    table_name='form_cambia_valor_otra_celda_tbl',\n    columns=[\n        FormColumn(\n            field='marca',\n            title='Marca',\n            data_type=DataType.string,\n            column_type=ColumnType.selector,\n            values=form_asign_marca_sab_emp_prod.value['marca'].unique().tolist()\n        ),\n        FormColumn(\n            field='sabor',\n            title='Sabor',\n            data_type=DataType.string,\n            column_type=ColumnType.related_selector,\n            related_map=form_asign_marca_sab_emp_prod,\n            related_map_column_values='sabor',\n            related_columns='marca'\n        ),\n        FormColumn(\n            field='empaque',\n            title='Empaque',\n            data_type=DataType.string,\n            column_type=ColumnType.related_selector,\n            related_map=form_asign_marca_sab_emp_prod,\n            related_map_column_values='empaque',\n            related_columns=['marca', 'sabor']\n        ),\n        FormColumn(\n            field='producto',\n            title='Producto',\n            data_type=DataType.string,\n            column_type=ColumnType.related_selector,\n            related_map=form_asign_marca_sab_emp_prod,\n            related_map_column_values='producto',\n            related_columns=['marca', 'sabor', 'empaque']\n        ),\n        FormColumn(\n            field='price',\n            title='Price',\n            data_type=DataType.float,\n            column_type=ColumnType.input,\n        ),\n        FormColumn(\n            field='quantity',\n            title='Quantity',\n            data_type=DataType.float,\n            column_type=ColumnType.input,\n        ),\n        FormColumn(\n            field='revenue',\n            title='Revenue',\n            data_type=DataType.float,\n            column_type=ColumnType.calc,\n            formula='price*quantity'\n        )\n    ],\n    settings=FormSettings(\n        database_engine=DatabaseConnectionString.sqlite,\n        database_connection=SQLiteConnection(database_path=forms_path),\n        initial_empty_rows=5,\n        allow_add_rows=True,\n        allow_remove_rows=True\n    )\n)", "title": "Form que cambia valor de otra celda", "nodeClass": "form", "moduleId": "_root_", "x": 660, "y": 770, "z": 1, "w": "180", "h": "40", "description": "<p>Funcionalidades:</p>\n<ul>\n<li>Campos input</li>\n<li>Campos calculados por columna</li>\n<li>Campos Producto, Empaque y Sabor devuelven valores de acuerdo a lo que se haya cargado en las columnas anteriores basados en un mapa de asignaci&oacute;n</li>\n<li>Cuando se completa el campo Sabor con \"COCA COLA\", se autocompletan los campos Empaque y Producto (ver c&oacute;digo customizado del componente)</li>\n</ul>", "units": null, "color": "#4CBCFF", "errorInDef": false, "nodeInfo": {"showInputs": 1, "showOutputs": 1, "showLabel": 1, "showBorder": 1, "fill": 1, "useNodeFont": 0}, "nodeFont": null, "numberFormat": null, "originalId": null, "extraData": null, "picture": null, "evaluateOnStart": false, "defaultView": {"component_type": "core.Form", "component_id": "60c92d0d-875b-4982-acbd-0aeed9d5fcd8", "namespace": "ppc", "node_id": "form_cambia_valor_otra_celda", "x": 0, "y": 0, "w": 6, "h": 3, "error_code": null, "error_detail": null, "properties": {"code": "from typing import Union, List\nimport pandas as pd\nimport pyplan_core.interface.components.core as ppc\nfrom pyplan_core.classes.Form import FormChange\nfrom pyplan_core.interface.components.events import BaseEvent, FormChangeEvent\nfrom pyplan_core.interface.classes import FormData\n\nclass MyComponent(ppc.Form):\n\n    def apply_changes(self, changes: List[FormChange]):\n        \"\"\"Updates in-memory dataframe\"\"\"\n        form = self.get_form()\n        form_changes = []\n        for table_change in changes:\n            row = table_change.get('row_id')\n            col_name = table_change.get('column_name')\n            value = table_change.get('value')\n            # Cambio original\n            form_change = FormChange(\n                row=row,\n                column=col_name,\n                value=value,\n            )\n            form_changes.append(form_change)\n            # Cambio personalizado\n            if col_name == 'sabor' and value == 'COCA COLA':\n                    form_changes.append(\n                        FormChange(\n                            row=row,\n                            column='empaque',\n                            value='PET 1500',\n                        )\n                    )\n                    form_changes.append(\n                        FormChange(\n                            row=row,\n                            column='producto',\n                            value='CC 1,500 PETALOIDE',\n                        )\n                    )\n        if form_changes:\n            form.apply_changes(form_changes)\n            result = self.generate_result(None)\n            return result.data.values\n    \n    def render(self, df: pd.DataFrame, event: BaseEvent) -> FormData:\n        \"\"\"Renders the component and returns a FormData object\"\"\"\n        form = self.get_form()\n        return self.utils.generate_result_data(\n            df=df,\n            form=form,\n            table_properties=self.properties,\n            row_page_number=self.row_page_number,\n            column_page_number=self.column_page_number,\n            edit_mode=self.edit_mode,\n            cell_properties=self.cell_properties,\n            has_unconfirmed_changes=self.has_unconfirmed_changes(),\n        )\n\n\ncomponent: MyComponent = MyComponent.parse_obj(component_definition)\nresult = component\n", "custom_code": true, "title": {"enabled": true, "text": "Form que cambia valor de otra celda", "custom_text": "", "show_units": true, "units_text": ""}, "table_properties": {"colHeaders": true, "manualColumnResize": true, "multiColumnSorting": true, "rowHeaders": false}, "calc_fields": {}, "function_calc_fields": {}, "unlink": [], "pivot": {"agg": "", "params": {"rows": [], "columns": [], "measures": []}}, "page_size": {"rows": 100, "columns": 500}, "sort": {}, "renderers": {}, "columns": {"id": {"readOnly": true}, "region": {"type": "dropdown", "source": ["North America", "South America", "Europe"], "renderer": "custom_dropdown_renderer"}, "item_type": {"type": "dropdown", "source": ["Beverages", "Food", "Others"], "renderer": "custom_dropdown_renderer"}, "revenue": {"readOnly": true, "className": ""}, "unit_revenue": {"readOnly": true, "className": ""}, "marca": {"type": "dropdown", "source": ["ADES", "CC", "SP"], "renderer": "custom_dropdown_renderer"}, "sabor": {"type": "dropdown", "renderer": "custom_dropdown_renderer"}, "empaque": {"type": "dropdown", "renderer": "custom_dropdown_renderer"}, "producto": {"type": "dropdown", "renderer": "custom_dropdown_renderer"}}, "right_total": false, "bottom_total": false, "hide_empty_data": "", "show_pivot_toolbar": false, "show_filter_toolbar": false, "value_format": {"type": null, "thousands_separator": false, "decimal_places": null, "prefix": "", "suffix": "", "date_format": null}, "drilldowns": [], "style": {}}, "filters": {}, "cell_properties": null}, "prefixIdentifier": null, "_isNodeCircular": false}, {"identifier": "form_basico", "definition": "", "title": "B\u00e1sico", "nodeClass": "text", "moduleId": "_root_", "x": 30, "y": 50, "z": -1, "w": "830", "h": "90", "description": null, "units": null, "color": "#EEEEEE", "errorInDef": false, "nodeInfo": {"showInputs": 0, "showOutputs": 0, "showLabel": 1, "showBorder": 0, "fill": 1, "useNodeFont": 0}, "nodeFont": null, "numberFormat": null, "originalId": null, "extraData": null, "picture": null, "evaluateOnStart": false, "defaultView": null, "prefixIdentifier": null, "_isNodeCircular": false}, {"identifier": "form_basico1", "definition": "", "title": "Checkboxes", "nodeClass": "text", "moduleId": "_root_", "x": 30, "y": 150, "z": -1, "w": "830", "h": "90", "description": null, "units": null, "color": "#EEEEEE", "errorInDef": false, "nodeInfo": {"showInputs": 0, "showOutputs": 0, "showLabel": 1, "showBorder": 0, "fill": 1, "useNodeFont": 0}, "nodeFont": null, "numberFormat": null, "originalId": null, "extraData": null, "picture": null, "evaluateOnStart": false, "defaultView": null, "prefixIdentifier": null, "_isNodeCircular": false}, {"identifier": "form_basico2", "definition": "", "title": "Selectores (b\u00e1sico)", "nodeClass": "text", "moduleId": "_root_", "x": 30, "y": 450, "z": -1, "w": "830", "h": "90", "description": null, "units": null, "color": "#EEEEEE", "errorInDef": false, "nodeInfo": {"showInputs": 0, "showOutputs": 0, "showLabel": 1, "showBorder": 0, "fill": 1, "useNodeFont": 0}, "nodeFont": null, "numberFormat": null, "originalId": null, "extraData": null, "picture": null, "evaluateOnStart": false, "defaultView": null, "prefixIdentifier": null, "_isNodeCircular": false}, {"identifier": "form_basico3", "definition": "", "title": "Columnas bloqueadas", "nodeClass": "text", "moduleId": "_root_", "x": 30, "y": 250, "z": -1, "w": "830", "h": "90", "description": null, "units": null, "color": "#EEEEEE", "errorInDef": false, "nodeInfo": {"showInputs": 0, "showOutputs": 0, "showLabel": 1, "showBorder": 0, "fill": 1, "useNodeFont": 0}, "nodeFont": null, "numberFormat": null, "originalId": null, "extraData": null, "picture": null, "evaluateOnStart": false, "defaultView": null, "prefixIdentifier": null, "_isNodeCircular": false}, {"identifier": "form_basico4", "definition": "", "title": "Selectores filtrados por usuario", "nodeClass": "text", "moduleId": "_root_", "x": 30, "y": 550, "z": -1, "w": "830", "h": "90", "description": null, "units": null, "color": "#EEEEEE", "errorInDef": false, "nodeInfo": {"showInputs": 0, "showOutputs": 0, "showLabel": 1, "showBorder": 0, "fill": 1, "useNodeFont": 0}, "nodeFont": null, "numberFormat": null, "originalId": null, "extraData": null, "picture": null, "evaluateOnStart": false, "defaultView": null, "prefixIdentifier": null, "_isNodeCircular": false}, {"identifier": "form_basico5", "definition": "", "title": "Selectores relacionados", "nodeClass": "text", "moduleId": "_root_", "x": 30, "y": 650, "z": -1, "w": "830", "h": "90", "description": null, "units": null, "color": "#EEEEEE", "errorInDef": false, "nodeInfo": {"showInputs": 0, "showOutputs": 0, "showLabel": 1, "showBorder": 0, "fill": 1, "useNodeFont": 0}, "nodeFont": null, "numberFormat": null, "originalId": null, "extraData": null, "picture": null, "evaluateOnStart": false, "defaultView": null, "prefixIdentifier": null, "_isNodeCircular": false}, {"identifier": "form_basico6", "definition": "", "title": "Cambia valor de otra celda", "nodeClass": "text", "moduleId": "_root_", "x": 30, "y": 750, "z": -1, "w": "830", "h": "90", "description": null, "units": null, "color": "#EEEEEE", "errorInDef": false, "nodeInfo": {"showInputs": 0, "showOutputs": 0, "showLabel": 1, "showBorder": 0, "fill": 1, "useNodeFont": 0}, "nodeFont": null, "numberFormat": null, "originalId": null, "extraData": null, "picture": null, "evaluateOnStart": false, "defaultView": null, "prefixIdentifier": null, "_isNodeCircular": false}, {"identifier": "forms_path", "definition": "result = 'forms_data/forms.db'", "title": "Forms path", "nodeClass": "inputscalar", "moduleId": "_root_", "x": 40, "y": 1470, "z": 1, "w": "180", "h": "30", "description": null, "units": null, "color": null, "errorInDef": false, "nodeInfo": {"showInputs": 1, "showOutputs": 0, "showLabel": 1, "showBorder": 1, "fill": 1, "useNodeFont": 0}, "nodeFont": null, "numberFormat": null, "originalId": null, "extraData": null, "picture": null, "evaluateOnStart": false, "defaultView": null, "prefixIdentifier": null, "_isNodeCircular": false}, {"identifier": "revenue_report", "definition": "result = dataframe_del_form.groupby(['region', 'item_type'])['revenue'].agg('sum')", "title": "Revenue report", "nodeClass": "report", "moduleId": "_root_", "x": 1110, "y": 470, "z": 1, "w": "180", "h": "40", "description": null, "units": null, "color": null, "errorInDef": false, "nodeInfo": {"showInputs": 1, "showOutputs": 1, "showLabel": 1, "showBorder": 1, "fill": 1, "useNodeFont": 0}, "nodeFont": null, "numberFormat": null, "originalId": null, "extraData": null, "picture": null, "evaluateOnStart": false, "defaultView": {"component_type": "core.Chart", "component_id": "e6b9408f-d658-4947-98fc-3f1145fb54e8", "namespace": "ppc", "node_id": "revenue_report", "x": 6, "y": -1, "w": 6, "h": 3, "error_code": null, "error_detail": null, "properties": {"code": null, "custom_code": false, "title": {"enabled": true, "text": "Revenue report", "custom_text": "", "show_units": true, "units_text": ""}, "type": "bar", "chart_properties": {"template": "simple_white"}, "chart_layout": {}, "selected_event": false, "hover_event": false, "hover_select_targets": [], "drilldown_event": true, "unlink": [], "pivot": {"agg": "sum", "params": {"x": "item_type", "y": "values", "color": "region"}}, "page_size": {"rows": 1000, "columns": 1000}, "hide_empty_data": false, "drilldowns": [], "show_pivot_toolbar": false, "show_filter_toolbar": false, "value_format": {"type": null, "thousands_separator": false, "decimal_places": null, "prefix": "", "suffix": "", "date_format": null}, "available_drilldown_indexes": [], "supported_types_for_drilldown": ["bar", "line", "scatter", "area", "pie", "funnel", "funnel_area", "histogram", "strip"]}, "filters": {}}, "prefixIdentifier": null, "_isNodeCircular": false}, {"identifier": "dataframe_del_form", "definition": "result = form_c_selectores.value", "title": "Dataframe del form", "nodeClass": "variable", "moduleId": "_root_", "x": 890, "y": 470, "z": 1, "w": "180", "h": "40", "description": null, "units": null, "color": "#4CBCFF", "errorInDef": false, "nodeInfo": {"showInputs": 1, "showOutputs": 1, "showLabel": 1, "showBorder": 1, "fill": 1, "useNodeFont": 0}, "nodeFont": null, "numberFormat": null, "originalId": null, "extraData": null, "picture": null, "evaluateOnStart": false, "defaultView": null, "prefixIdentifier": null, "_isNodeCircular": false}, {"identifier": "item_type", "definition": "result = pd.Index(['Beverages', 'Food', 'Others'])", "title": "Item types", "nodeClass": "index", "moduleId": "_root_", "x": 50, "y": 470, "z": 1, "w": "100", "h": "50", "description": null, "units": null, "color": "#9999ff", "errorInDef": false, "nodeInfo": {"showInputs": 0, "showOutputs": 0, "showLabel": 1, "showBorder": 1, "fill": 1, "useNodeFont": 0}, "nodeFont": null, "numberFormat": null, "originalId": null, "extraData": null, "picture": null, "evaluateOnStart": false, "defaultView": null, "prefixIdentifier": null, "_isNodeCircular": false}, {"identifier": "form_c_campo_calculado", "definition": "from pyplan_core.classes.Form import FormSettings, FormColumn, ColumnType, DataType\nfrom pyplan_core.classes.FormTypes import SQLiteConnection, DatabaseConnectionString\n\ndef weighted_revenue_fn(df):\n    return df['revenue'] / df['revenue'].sum()\n\nresult = pp.form(\n    table_name='form_c_campo_calculado_tbl',\n    columns=[\n        FormColumn(field='product', title='Product',data_type=DataType.string, default_value='Producto'),\n        FormColumn(field='price', title='Price',data_type=DataType.float, default_value=0),\n        FormColumn(field='quantity', title='Quantity', data_type=DataType.integer, default_value=1),\n        FormColumn(field='revenue', title='Revenue', data_type=DataType.float, column_type=ColumnType.calc, formula='price*quantity'),  # f\u00f3rmula con string\n        FormColumn(field='weighted_revenue', title='Weighted revenue', data_type=DataType.float, column_type=ColumnType.calc, formula=weighted_revenue_fn)  # f\u00f3rmula con funci\u00f3n\n    ],\n    settings=FormSettings(\n        database_engine=DatabaseConnectionString.sqlite,\n        database_connection=SQLiteConnection(database_path=forms_path),\n        initial_empty_rows=5,\n        allow_add_rows=True,\n        allow_remove_rows=True\n    )\n)", "title": "Form con campo calculado", "nodeClass": "form", "moduleId": "_root_", "x": 660, "y": 370, "z": 1, "w": "180", "h": "40", "description": "<p>Funcionalidades:</p>\n<ul>\n<li>Columna calculada Revenue = Quantity * Price</li>\n<li>Columna calculada con funci&oacute;n custom Weighted Revenue = Revenue / sumatoria de Revenue</li>\n</ul>", "units": null, "color": null, "errorInDef": false, "nodeInfo": {"showInputs": 1, "showOutputs": 1, "showLabel": 1, "showBorder": 1, "fill": 1, "useNodeFont": 0}, "nodeFont": null, "numberFormat": null, "originalId": null, "extraData": null, "picture": null, "evaluateOnStart": false, "defaultView": {"component_type": "core.Form", "component_id": "91335cba-6c0b-46a7-801e-a673523b978e", "namespace": "ppc", "node_id": "form_c_campo_calculado", "x": 0, "y": 0, "w": 6, "h": 3, "error_code": null, "error_detail": null, "properties": {"code": null, "custom_code": false, "title": {"enabled": true, "text": "Form con campo calculado", "custom_text": "", "show_units": true, "units_text": ""}, "table_properties": {"colHeaders": true, "manualColumnResize": true, "multiColumnSorting": true, "rowHeaders": false}, "calc_fields": {}, "function_calc_fields": {}, "unlink": [], "pivot": {"agg": "", "params": {"rows": [], "columns": [], "measures": []}}, "page_size": {"rows": 100, "columns": 500}, "sort": {}, "renderers": {}, "columns": {"id": {"readOnly": true}, "total_price": {"readOnly": true, "className": ""}, "weighted_price": {"readOnly": true, "className": ""}, "category": {"type": "dropdown", "renderer": "custom_dropdown_renderer", "source": ["CatA", "CatB", "Catc"]}, "region": {"type": "dropdown", "renderer": "custom_dropdown_renderer", "source": ["North America", "South America", "Europe", "Asia", "Africa"]}, "revenue": {"readOnly": true, "className": ""}}, "right_total": false, "bottom_total": false, "hide_empty_data": "", "show_pivot_toolbar": false, "show_filter_toolbar": false, "value_format": {"type": "number", "thousands_separator": true, "decimal_places": 2, "prefix": "", "suffix": "", "date_format": null}, "drilldowns": [], "style": {}}, "filters": {}, "cell_properties": null}, "prefixIdentifier": null, "_isNodeCircular": false}, {"identifier": "form_basico7", "definition": "", "title": "Campo calculado", "nodeClass": "text", "moduleId": "_root_", "x": 30, "y": 350, "z": -1, "w": "830", "h": "90", "description": null, "units": null, "color": "#EEEEEE", "errorInDef": false, "nodeInfo": {"showInputs": 0, "showOutputs": 0, "showLabel": 1, "showBorder": 0, "fill": 1, "useNodeFont": 0}, "nodeFont": null, "numberFormat": null, "originalId": null, "extraData": null, "picture": null, "evaluateOnStart": false, "defaultView": null, "prefixIdentifier": null, "_isNodeCircular": false}, {"identifier": "form_basico8", "definition": "", "title": "Formatos", "nodeClass": "text", "moduleId": "_root_", "x": 30, "y": 850, "z": -1, "w": "830", "h": "90", "description": null, "units": null, "color": "#EEEEEE", "errorInDef": false, "nodeInfo": {"showInputs": 0, "showOutputs": 0, "showLabel": 1, "showBorder": 0, "fill": 1, "useNodeFont": 0}, "nodeFont": null, "numberFormat": null, "originalId": null, "extraData": null, "picture": null, "evaluateOnStart": false, "defaultView": null, "prefixIdentifier": null, "_isNodeCircular": false}, {"identifier": "form_c_formatos", "definition": "from pyplan_core.classes.Form import FormSettings, FormColumn, ColumnType, DataType\nfrom pyplan_core.classes.FormTypes import SQLiteConnection, DatabaseConnectionString\n\ndef weighted_price_fn(df):\n    return df['revenue'] / df['revenue'].sum()\n\nresult = pp.form(\n    table_name='form_c_campo_calculado_tbl',\n    columns=[\n        FormColumn(field='product', title='Product', data_type=DataType.string, column_type=ColumnType.selector, values=product.tolist(), default_value=product[0]),\n        FormColumn(field='price', title='Price', data_type=DataType.float, default_value=0),\n        FormColumn(field='quantity', title='Quantity', data_type=DataType.integer, default_value=1),\n        FormColumn(field='revenue', title='Revenue', data_type=DataType.float, column_type=ColumnType.calc, formula='price*quantity'),  # f\u00f3rmula con string\n        FormColumn(field='weighted_revenue', title='Weighted revenue', data_type=DataType.float, column_type=ColumnType.calc, formula=weighted_price_fn)  # f\u00f3rmula con funci\u00f3n\n    ],\n    settings=FormSettings(\n        database_engine=DatabaseConnectionString.sqlite,\n        database_connection=SQLiteConnection(database_path=forms_path),\n        initial_empty_rows=5,\n        allow_add_rows=True,\n        allow_remove_rows=True\n    )\n)", "title": "Form con formatos", "nodeClass": "form", "moduleId": "_root_", "x": 660, "y": 870, "z": 1, "w": "180", "h": "40", "description": "<p>Funcionalidades:</p>\n<ul>\n<li>Campos input</li>\n<li>Campos calculados por columna</li>\n<li>Progress bar en columna Weighted revenue</li>\n<li>Formato condicional en columna Price (0-10, 10-20, 20-99999)</li>\n<li>Formato condicional para filas con Product 'Product B'</li>\n</ul>", "units": null, "color": null, "errorInDef": false, "nodeInfo": {"showInputs": 1, "showOutputs": 1, "showLabel": 1, "showBorder": 1, "fill": 1, "useNodeFont": 0}, "nodeFont": null, "numberFormat": null, "originalId": null, "extraData": null, "picture": null, "evaluateOnStart": false, "defaultView": {"component_type": "core.Form", "component_id": "91335cba-6c0b-46a7-801e-a673523b978e", "namespace": "ppc", "node_id": "form_c_formatos", "x": 0, "y": 0, "w": 6, "h": 3, "error_code": null, "error_detail": null, "properties": {"code": "from typing import Union, List\nimport pandas as pd\nimport pyplan_core.interface.components.core as ppc\nfrom pyplan_core.classes.Form import FormChange\nfrom pyplan_core.interface.components.events import BaseEvent, FormChangeEvent\nfrom pyplan_core.interface.classes import FormData, TableCellProperties, ProgressBar, ConditionalFormat, ColumnCellProperty, RowCellProperty\n\nclass MyComponent(ppc.Form):\n    \n    def render(self, df: pd.DataFrame, event: BaseEvent) -> FormData:\n        \"\"\"Renders the component and returns a FormData object\"\"\"\n        form = self.get_form()\n        return self.utils.generate_result_data(\n            df=df,\n            form=form,\n            table_properties=self.properties,\n            row_page_number=self.row_page_number,\n            column_page_number=self.column_page_number,\n            edit_mode=self.edit_mode,\n            cell_properties=self.cell_properties,\n            has_unconfirmed_changes=self.has_unconfirmed_changes(),\n        )\n\ncomponent: MyComponent = MyComponent.parse_obj(component_definition)\n\nprogress_bar_renderer = TableCellProperties()\nprogress_bar_renderer.progress_bar = ProgressBar(\n    min_hue=0,\n    max_hue=120,\n    max_value=1,\n    saturation=90,\n    lightness=50,\n    show_value=True\n)\n\nprice_conditional = TableCellProperties()\nprice_conditional.conditional_format = [\n    ConditionalFormat(\n        from_=0,\n        to=10, \n        style={\n            'backgroundColor': '#ff2222', \n            'color': '#020202'\n        }\n    ),\n    ConditionalFormat(\n        from_=10, \n        to=20, \n        style={\n            'backgroundColor': '#ffff22',\n            'color': '#020202'\n        }\n    ),\n    ConditionalFormat(\n        from_=20,\n        to=999999,\n        style={\n            'backgroundColor': '#22ff22',\n            'color': '#020202'\n        }\n    ),\n]\n\nrow_conditional = TableCellProperties()\nrow_conditional.style = {\n        'font-weight': 'bold',\n        'color': '#adfafa'\n}\n\ncomponent.cell_properties = [\n    ColumnCellProperty(columns=['weighted_revenue'], cell_properties=progress_bar_renderer),\n    ColumnCellProperty(columns=['price'], cell_properties=price_conditional),\n    RowCellProperty(column='product', values=['Product B'], cell_properties=row_conditional),\n]\n\nresult = component\n", "custom_code": true, "title": {"enabled": true, "text": "Form con formatos", "custom_text": "", "show_units": true, "units_text": ""}, "table_properties": {"colHeaders": true, "manualColumnResize": true, "multiColumnSorting": true, "rowHeaders": false}, "calc_fields": {}, "function_calc_fields": {}, "unlink": [], "pivot": {"agg": "", "params": {"rows": [], "columns": [], "measures": []}}, "page_size": {"rows": 100, "columns": 500}, "sort": {}, "renderers": {}, "columns": {"id": {"readOnly": true}, "total_price": {"readOnly": true, "className": ""}, "weighted_price": {"readOnly": true, "className": ""}, "category": {"type": "dropdown", "renderer": "custom_dropdown_renderer", "source": ["CatA", "CatB", "Catc"]}, "region": {"type": "dropdown", "renderer": "custom_dropdown_renderer", "source": ["North America", "South America", "Europe", "Asia", "Africa"]}, "revenue": {"readOnly": true, "className": ""}, "weighted_revenue": {"readOnly": true, "className": ""}, "product": {"type": "dropdown", "renderer": "custom_dropdown_renderer", "source": ["Product A", "Product B", "Product C"]}}, "right_total": false, "bottom_total": false, "hide_empty_data": "", "show_pivot_toolbar": false, "show_filter_toolbar": false, "value_format": {"type": "number", "thousands_separator": true, "decimal_places": 2, "prefix": "", "suffix": "", "date_format": null}, "drilldowns": [], "style": {}}, "filters": {}, "cell_properties": [{"columns": ["weighted_revenue"], "cell_properties": {"progress_bar": {"max_value": 1.0, "min_hue": 0, "max_hue": 120, "saturation": 90, "lightness": 50, "show_value": true}}}, {"columns": ["price"], "cell_properties": {"conditional_format": [{"from_": 0.0, "to": 10.0, "style": {"backgroundColor": "#ff2222", "color": "#020202"}}, {"from_": 0.0, "to": 20.0, "style": {"backgroundColor": "#ffff22", "color": "#020202"}}, {"from_": 0.0, "to": 999999.0, "style": {"backgroundColor": "#22ff22", "color": "#020202"}}]}}, {"column": "product", "values": ["Product B"], "cell_properties": {"style": {"font-weight": "bold", "color": "#adfafa"}}}]}, "prefixIdentifier": null, "_isNodeCircular": false}, {"identifier": "product", "definition": "result = pd.Index(['Product A', 'Product B', 'Product C'])", "title": "Products", "nodeClass": "index", "moduleId": "_root_", "x": 50, "y": 870, "z": 1, "w": "100", "h": "50", "description": null, "units": null, "color": "#9999ff", "errorInDef": false, "nodeInfo": {"showInputs": 0, "showOutputs": 0, "showLabel": 1, "showBorder": 1, "fill": 1, "useNodeFont": 0}, "nodeFont": null, "numberFormat": null, "originalId": null, "extraData": null, "picture": null, "evaluateOnStart": false, "defaultView": null, "prefixIdentifier": null, "_isNodeCircular": false}, {"identifier": "form_basico9", "definition": "", "title": "Originado en un DataFrame", "nodeClass": "text", "moduleId": "_root_", "x": 30, "y": 950, "z": -1, "w": "830", "h": "220", "description": null, "units": null, "color": "#EEEEEE", "errorInDef": false, "nodeInfo": {"showInputs": 0, "showOutputs": 0, "showLabel": 1, "showBorder": 0, "fill": 1, "useNodeFont": 0}, "nodeFont": null, "numberFormat": null, "originalId": null, "extraData": null, "picture": null, "evaluateOnStart": false, "defaultView": null, "prefixIdentifier": null, "_isNodeCircular": false}, {"identifier": "sales_data", "definition": "result = pd.read_pickle(current_path + 'Inputs/sales_data.pkl', compression='gzip')", "title": "Sales data", "nodeClass": "datareading", "moduleId": "_root_", "x": 60, "y": 1040, "z": 1, "w": "180", "h": "40", "description": null, "units": null, "color": null, "errorInDef": false, "nodeInfo": {"showInputs": 1, "showOutputs": 1, "showLabel": 1, "showBorder": 1, "fill": 1, "useNodeFont": 0}, "nodeFont": null, "numberFormat": null, "originalId": null, "extraData": null, "picture": null, "evaluateOnStart": false, "defaultView": null, "prefixIdentifier": null, "_isNodeCircular": false}, {"identifier": "sales_data_for_form", "definition": "_df = sales_data[sales_data['region'] == sales_data_region.value]\n_df['id_col'] = _df.index  # tiene que ser \u00fanico y constante para cada registro individual\n\nresult = _df", "title": "Sales data for form", "nodeClass": "variable", "moduleId": "_root_", "x": 390, "y": 1040, "z": 1, "w": "180", "h": "40", "description": null, "units": null, "color": "#4CBCFF", "errorInDef": false, "nodeInfo": {"showInputs": 1, "showOutputs": 1, "showLabel": 1, "showBorder": 1, "fill": 1, "useNodeFont": 0}, "nodeFont": null, "numberFormat": null, "originalId": null, "extraData": null, "picture": null, "evaluateOnStart": false, "defaultView": null, "prefixIdentifier": null, "_isNodeCircular": false}, {"identifier": "sales_data_regions", "definition": "result = pd.Index(sales_data['region'].unique())", "title": "Sales data regions", "nodeClass": "index", "moduleId": "_root_", "x": 250, "y": 980, "z": 1, "w": "100", "h": "50", "description": null, "units": null, "color": "#9999ff", "errorInDef": false, "nodeInfo": {"showInputs": 0, "showOutputs": 0, "showLabel": 1, "showBorder": 1, "fill": 1, "useNodeFont": 0}, "nodeFont": null, "numberFormat": null, "originalId": null, "extraData": null, "picture": null, "evaluateOnStart": false, "defaultView": null, "prefixIdentifier": null, "_isNodeCircular": false}, {"identifier": "sales_data_region", "definition": "result = pp.selector(sales_data_regions, 1, False)", "title": "Sales data region", "nodeClass": "inputselector", "moduleId": "_root_", "x": 390, "y": 990, "z": 1, "w": "180", "h": "30", "description": null, "units": null, "color": "#4cffa6", "errorInDef": false, "nodeInfo": {"showInputs": 1, "showOutputs": 1, "showLabel": 1, "showBorder": 1, "fill": 1, "useNodeFont": 0}, "nodeFont": null, "numberFormat": null, "originalId": null, "extraData": null, "picture": null, "evaluateOnStart": false, "defaultView": null, "prefixIdentifier": null, "_isNodeCircular": false}, {"identifier": "agregar_a_revenue", "definition": "def _fn(df: pd.DataFrame):\n    return df['revenue_plus_extra'] * (1 + df['extra_revenue_pc'])\n\nresult = _fn", "title": "Agregar % a Revenue", "nodeClass": "variable", "moduleId": "_root_", "x": 390, "y": 1100, "z": 1, "w": "180", "h": "40", "description": null, "units": null, "color": "#4CBCFF", "errorInDef": false, "nodeInfo": {"showInputs": 1, "showOutputs": 1, "showLabel": 1, "showBorder": 1, "fill": 1, "useNodeFont": 0}, "nodeFont": null, "numberFormat": null, "originalId": null, "extraData": null, "picture": null, "evaluateOnStart": false, "defaultView": null, "prefixIdentifier": null, "_isNodeCircular": false}, {"identifier": "form_desde_dataframe1", "definition": "from pyplan_core.classes.FormTypes import FormColumn, FormSettings, DataType, ColumnType, DatabaseConnectionString, SQLiteConnection, PostgreSQLConnection\n\nresult = pp.form(\n    table_name='form_desde_dataframe_tbl',\n    columns=[\n        FormColumn(field='region', title='Region', column_type=ColumnType.dataframe_column),\n        FormColumn(field='country', title='Country', column_type=ColumnType.dataframe_column),\n        FormColumn(field='item_type', title='Item Type', column_type=ColumnType.dataframe_column),\n        FormColumn(field='sales_channel', title='Sales Channel', column_type=ColumnType.dataframe_column),\n        FormColumn(field='total_revenue', title='Revenue', column_type=ColumnType.dataframe_column),\n        FormColumn(field='extra_revenue_val', title='Extra Revenue ($)', column_type=ColumnType.input, data_type=DataType.float, default_value=0.),\n        FormColumn(field='revenue_plus_extra', title='Revenue + Extra', column_type=ColumnType.calc, read_only=True, formula='total_revenue+extra_revenue_val'),\n        FormColumn(field='extra_revenue_pc', title='Extra Revenue (%)', column_type=ColumnType.input, data_type=DataType.float, default_value=0.),\n        FormColumn(field='revenue_plus_pc', title='Final Revenue', column_type=ColumnType.calc, read_only=True, formula=agregar_a_revenue)\n    ],\n    settings=FormSettings(database_engine=DatabaseConnectionString.sqlite, database_connection=SQLiteConnection(database_path=forms_path), from_dataframe=True, source_dataframe_node=sales_data_for_form, source_dataframe_id_column='id_col')\n    )", "title": "Form desde DataFrame", "nodeClass": "form", "moduleId": "_root_", "x": 660, "y": 1100, "z": 1, "w": "180", "h": "40", "description": null, "units": null, "color": null, "errorInDef": false, "nodeInfo": {"showInputs": 1, "showOutputs": 1, "showLabel": 1, "showBorder": 1, "fill": 1, "useNodeFont": 0}, "nodeFont": null, "numberFormat": null, "originalId": null, "extraData": null, "picture": null, "evaluateOnStart": false, "defaultView": {"component_type": "core.Form", "component_id": "9151762c-3b14-4bb0-be0f-b075b6f32c67", "namespace": "ppc", "node_id": "form_desde_dataframe1", "x": 0, "y": 0, "w": 6, "h": 3, "error_code": null, "error_detail": null, "properties": {"code": null, "custom_code": false, "title": {"enabled": true, "text": "Form desde DataFrame", "custom_text": "", "show_units": true, "units_text": ""}, "table_properties": {"colHeaders": true, "manualColumnResize": true, "multiColumnSorting": true, "rowHeaders": false}, "calc_fields": {}, "function_calc_fields": {}, "unlink": [], "pivot": {"agg": "", "params": {"rows": [], "columns": [], "measures": []}}, "page_size": {"rows": 100, "columns": 500}, "sort": {}, "renderers": {}, "columns": {"id_col": {"readOnly": true}, "region": {"readOnly": true, "className": ""}, "country": {"readOnly": true, "className": ""}, "item_type": {"readOnly": true, "className": ""}, "sales_channel": {"readOnly": true, "className": ""}, "total_revenue": {"readOnly": true, "className": ""}, "revenue_calc": {"readOnly": true, "className": ""}}, "right_total": false, "bottom_total": false, "hide_empty_data": "", "show_pivot_toolbar": false, "show_filter_toolbar": false, "value_format": {"type": "number", "thousands_separator": true, "decimal_places": 2, "prefix": "", "suffix": "", "date_format": null}, "drilldowns": [], "style": {}, "heatmap_properties": null}, "filters": {"country": []}, "cell_properties": null}, "prefixIdentifier": null, "_isNodeCircular": false}, {"identifier": "datos_demanda", "definition": "_form_data = demanda_por_sku.value\n\n#simula calculo:\ndif1 = _form_data[_form_data['sku']==1]['demanda']\ndif2 = _form_data[_form_data['sku']==2]['demanda']\n\nprint(dif1)\n\nresult = pd.DataFrame(data=[{\n    'sku': 1,\n    'planeada': 10,\n    'diferencia': 10 - dif1,\n},\n{\n    'sku': 2,\n    'planeada': 20,\n    'diferencia': 20 - dif2,\n}\n])", "title": "Datos demanda", "nodeClass": "report", "moduleId": "_root_", "x": 400, "y": 1240, "z": 1, "w": "180", "h": "40", "description": null, "units": null, "color": "#4CBCFF", "errorInDef": false, "nodeInfo": {"showInputs": 1, "showOutputs": 1, "showLabel": 1, "showBorder": 1, "fill": 1, "useNodeFont": 0}, "nodeFont": null, "numberFormat": null, "originalId": null, "extraData": null, "picture": null, "evaluateOnStart": false, "defaultView": null, "prefixIdentifier": null, "_isNodeCircular": false}, {"identifier": "demanda_por_sku", "definition": "from pyplan_core.classes.FormTypes import FormColumn, FormSettings, DataType, ColumnType, DatabaseConnectionString, SQLiteConnection, PostgreSQLConnection\n\nresult = pp.form(\n    table_name='demanda_por_sku_3',\n    columns=[\n        FormColumn(field='sku', title='sku', column_type=ColumnType.input, data_type=DataType.integer),\n        FormColumn(field='tipo', title='tipo', column_type=ColumnType.input, default_value='ajuste', read_only=True, data_type=DataType.string),\n        FormColumn(field='demanda', title='demanda', column_type=ColumnType.input, data_type=DataType.float)\n    ],\n    settings=FormSettings(database_engine=DatabaseConnectionString.sqlite, database_connection=SQLiteConnection(database_path='forms_data/forms.db'), initial_empty_rows=2, allow_add_rows=False, allow_remove_rows=False, fixed_columns=0, from_dataframe=False, remove_old_rows=False)\n)", "title": "Demanda por sku", "nodeClass": "form", "moduleId": "_root_", "x": 660, "y": 1240, "z": 1, "w": "180", "h": "40", "description": null, "units": null, "color": null, "errorInDef": false, "nodeInfo": {"showInputs": 1, "showOutputs": 1, "showLabel": 1, "showBorder": 1, "fill": 1, "useNodeFont": 0}, "nodeFont": null, "numberFormat": null, "originalId": null, "extraData": null, "picture": null, "evaluateOnStart": false, "defaultView": {"component_type": "core.Form", "component_id": "dd3a879d-e565-48ea-a904-52fee5d06ca9", "namespace": "ppc", "node_id": "demanda_por_sku", "x": 0, "y": 0, "w": 6, "h": 3, "error_code": null, "error_detail": null, "properties": {"code": "from typing import List\nimport pyplan_core.interface.components.core as ppc\nimport pyplan_core.interface.classes as ppcl\nfrom pyplan_core.classes.Form import FormChange\nfrom pyplan_core.interface.components.events import BaseEvent\nimport pyplan_core.interface.results as results\n\nfrom pyplan_core.interface.classes.BaseComponent import ComponentErrorCode\n\nfrom pyplan_core.interface.components.core.FormProperties import FormData\nfrom pyplan_core.interface.components.core.TableProperties import RowCellProperty\n\n\nclass MyComponent(ppc.Form):\n\n    def render(self, df: pd.DataFrame, event) -> FormData:\n        \"\"\"Renders the component and returns a FormData object\"\"\"\n        form = self.get_form()\n\n        self.model.getNode('datos_demanda').silentInvalidate()\n        df_from_model = self.model.getNode('datos_demanda').result\n\n        df_demanda = df_from_model.melt(id_vars='sku', value_vars=['planeada','diferencia'], var_name='tipo', value_name='demanda') \n        # agrega campo id para igualar estructura de formulario y orden para ordenar filas\n        df_demanda['id'] = 0\n\n        # agrega orden al df del formulario para ordenar filas\n        df['orden'] = 2\n        df_demanda['orden'] = np.where(df_demanda['tipo']=='planeada',1,3)\n\n        # concatena y ordena dataframe final\n        final_df = pd.concat([df, df_demanda])\n        final_df = final_df.sort_values(by=['sku', 'orden'])\n        final_df.drop(columns=['orden'], inplace=True)\n\n        self.cell_properties = [\n            RowCellProperty(column='tipo', values=['planeada','diferencia'], cell_properties={\n                \"readOnly\":True,\n                \"style\": {\n                    \"background-color\": \"#676A46\"\n                }\n            })\n        ]\n        \n\n        return self.utils.generate_result_data(\n            df=final_df,\n            form=form,\n            table_properties=self.properties,\n            row_page_number=self.row_page_number,\n            column_page_number=self.column_page_number,\n            edit_mode=self.edit_mode,\n            cell_properties=self.cell_properties,\n            has_unconfirmed_changes=self.has_unconfirmed_changes(),\n        )\n\n    \n\n\ncomponent: MyComponent = MyComponent.parse_obj(component_definition)\nresult = component\n", "custom_code": true, "title": {"enabled": true, "text": "Demanda por sku", "custom_text": "", "show_units": true, "units_text": ""}, "hide_header": null, "hide_border": null, "table_properties": {"colHeaders": true, "manualColumnResize": true, "multiColumnSorting": true, "rowHeaders": false}, "calculated_fields": [], "unlink": [], "pivot": {"agg": {"sku": "sum"}, "params": {"rows": ["id"], "columns": [], "measures": ["sku"]}}, "page_size": {"rows": 100, "columns": 500}, "sort": {}, "renderers": {}, "columns": {"id": {"readOnly": true}, "tipo": {"readOnly": true, "className": ""}}, "right_total": false, "bottom_total": false, "hide_empty_data": "", "show_pivot_toolbar": false, "show_filter_toolbar": false, "drilldowns": [], "styles": {"all": {"style": {}, "conditional_format": [], "value_format": {"type": "number", "thousands_separator": true, "decimal_places": 2, "prefix": "", "suffix": "", "date_format": ""}}, "custom": [{"conditions": [{"condition_type": "column", "dimension_name": "columns", "filter_type": "equal", "values": ["sku"], "apply_to": "values"}], "cell_properties": {"style": {}, "conditional_format": [], "value_format": {"type": "number", "thousands_separator": true, "decimal_places": 0, "prefix": "", "suffix": "", "date_format": ""}}}]}, "applied_hierarchies": {}, "hide_id_column": true}, "alternative_properties": null, "filters": {}, "cell_properties": [{"cell_properties": {"style": {"background-color": "#676A46"}, "conditional_format": [], "readOnly": true}, "apply_to": "all", "column": "tipo", "values": ["planeada", "diferencia"]}]}, "prefixIdentifier": null, "_isNodeCircular": false}, {"identifier": "valores_en_formulario", "definition": "result = demanda_por_sku.value", "title": "Valores en formulario", "nodeClass": "report", "moduleId": "_root_", "x": 660, "y": 1320, "z": 1, "w": "180", "h": "40", "description": null, "units": null, "color": "#4CBCFF", "errorInDef": false, "nodeInfo": {"showInputs": 1, "showOutputs": 1, "showLabel": 1, "showBorder": 1, "fill": 1, "useNodeFont": 0}, "nodeFont": null, "numberFormat": null, "originalId": null, "extraData": null, "picture": null, "evaluateOnStart": false, "defaultView": {"component_type": "core.Table", "component_id": "77cea2df-6df9-45a3-9f7c-beb791924ade", "namespace": "ppc", "node_id": "valores_en_formulario", "x": 0, "y": 0, "w": 6, "h": 3, "error_code": null, "error_detail": null, "properties": {"code": null, "custom_code": false, "title": {"enabled": true, "text": "Valores en formulario", "custom_text": "", "show_units": true, "units_text": ""}, "hide_header": null, "hide_border": null, "table_properties": {"colHeaders": true, "manualColumnResize": true, "multiColumnSorting": true, "rowHeaders": false}, "calculated_fields": [], "unlink": [], "pivot": {"agg": {"sku": "sum"}, "params": {"rows": [], "columns": [], "measures": []}}, "page_size": {"rows": 100, "columns": 500}, "sort": {}, "renderers": {}, "columns": {}, "right_total": false, "bottom_total": false, "hide_empty_data": "", "show_pivot_toolbar": false, "show_filter_toolbar": false, "drilldowns": [], "styles": {"all": {"style": {}, "conditional_format": [], "value_format": {"type": "number", "thousands_separator": true, "decimal_places": 2, "prefix": "", "suffix": "", "date_format": ""}}, "custom": []}, "applied_hierarchies": {}}, "alternative_properties": null, "filters": {}, "cell_properties": null}, "prefixIdentifier": null, "_isNodeCircular": false}, {"identifier": "form_basico10", "definition": "", "title": "Con filas personalizadas", "nodeClass": "text", "moduleId": "_root_", "x": 30, "y": 1180, "z": -1, "w": "830", "h": "220", "description": null, "units": null, "color": "#EEEEEE", "errorInDef": false, "nodeInfo": {"showInputs": 0, "showOutputs": 0, "showLabel": 1, "showBorder": 0, "fill": 1, "useNodeFont": 0}, "nodeFont": null, "numberFormat": null, "originalId": null, "extraData": null, "picture": null, "evaluateOnStart": false, "defaultView": null, "prefixIdentifier": null, "_isNodeCircular": false}, {"identifier": "demanda_por_sku1", "definition": "from pyplan_core.classes.FormTypes import FormColumn, FormSettings, DataType, ColumnType, DatabaseConnectionString, SQLiteConnection, PostgreSQLConnection\n\nresult = pp.form(\n    table_name='demanda_por_sku_3',\n    columns=[\n        FormColumn(field='sku', title='sku', column_type=ColumnType.input, data_type=DataType.integer),\n        FormColumn(field='tipo', title='tipo', column_type=ColumnType.input, default_value='ajuste', read_only=True, data_type=DataType.string),\n        FormColumn(field='demanda', title='demanda', column_type=ColumnType.input, data_type=DataType.float)\n    ],\n    settings=FormSettings(database_engine=DatabaseConnectionString.sqlite, database_connection=SQLiteConnection(database_path='forms_data/forms.db'), initial_empty_rows=2, allow_add_rows=False, allow_remove_rows=False, fixed_columns=0, from_dataframe=False, remove_old_rows=False)\n)", "title": "Demanda por sku", "nodeClass": "form", "moduleId": "_root_", "x": 660, "y": 1430, "z": 1, "w": "180", "h": "40", "description": null, "units": null, "color": null, "errorInDef": false, "nodeInfo": {"showInputs": 1, "showOutputs": 1, "showLabel": 1, "showBorder": 1, "fill": 1, "useNodeFont": 0}, "nodeFont": null, "numberFormat": null, "originalId": null, "extraData": null, "picture": null, "evaluateOnStart": false, "defaultView": {"component_type": "core.Form", "component_id": "dd3a879d-e565-48ea-a904-52fee5d06ca9", "namespace": "ppc", "node_id": "demanda_por_sku1", "x": 0, "y": 0, "w": 6, "h": 3, "error_code": null, "error_detail": null, "properties": {"code": "from typing import List\nimport pyplan_core.interface.components.core as ppc\nimport pyplan_core.interface.classes as ppcl\nfrom pyplan_core.classes.Form import FormChange\nfrom pyplan_core.interface.components.events import BaseEvent\nimport pyplan_core.interface.results as results\n\nfrom pyplan_core.interface.classes.BaseComponent import ComponentErrorCode\n\nfrom pyplan_core.interface.components.core.FormProperties import FormData\nfrom pyplan_core.interface.components.core.TableProperties import RowCellProperty\n\n\nclass MyComponent(ppc.Form):\n\n    def render(self, df: pd.DataFrame, event) -> FormData:\n        \"\"\"Renders the component and returns a FormData object\"\"\"\n        form = self.get_form()\n\n        self.model.getNode('datos_demanda').silentInvalidate()\n        df_from_model = self.model.getNode('datos_demanda').result\n\n        df_demanda = df_from_model.melt(id_vars='sku', value_vars=['planeada','diferencia'], var_name='tipo', value_name='demanda') \n        # agrega campo id para igualar estructura de formulario y orden para ordenar filas\n        df_demanda['id'] = 0\n\n        # agrega orden al df del formulario para ordenar filas\n        df['orden'] = 2\n        df_demanda['orden'] = np.where(df_demanda['tipo']=='planeada',1,3)\n\n        # concatena y ordena dataframe final\n        final_df = pd.concat([df, df_demanda])\n        final_df = final_df.sort_values(by=['sku', 'orden'])\n        final_df.drop(columns=['orden'], inplace=True)\n\n        self.cell_properties = [\n            RowCellProperty(column='tipo', values=['planeada','diferencia'], cell_properties={\n                \"readOnly\":True,\n                \"style\": {\n                    \"background-color\": \"#676A46\"\n                }\n            })\n        ]\n        \n\n        return self.utils.generate_result_data(\n            df=final_df,\n            form=form,\n            table_properties=self.properties,\n            row_page_number=self.row_page_number,\n            column_page_number=self.column_page_number,\n            edit_mode=self.edit_mode,\n            cell_properties=self.cell_properties,\n            has_unconfirmed_changes=self.has_unconfirmed_changes(),\n        )\n\n    \n\n\ncomponent: MyComponent = MyComponent.parse_obj(component_definition)\nresult = component\n", "custom_code": true, "title": {"enabled": true, "text": "Demanda por sku", "custom_text": "", "show_units": true, "units_text": ""}, "hide_header": null, "hide_border": null, "table_properties": {"colHeaders": true, "manualColumnResize": true, "multiColumnSorting": true, "rowHeaders": false}, "calculated_fields": [], "unlink": [], "pivot": {"agg": {"sku": "sum"}, "params": {"rows": ["id"], "columns": [], "measures": ["sku"]}}, "page_size": {"rows": 100, "columns": 500}, "sort": {}, "renderers": {}, "columns": {"id": {"readOnly": true}, "tipo": {"readOnly": true, "className": ""}}, "right_total": false, "bottom_total": false, "hide_empty_data": "", "show_pivot_toolbar": false, "show_filter_toolbar": false, "drilldowns": [], "styles": {"all": {"style": {}, "conditional_format": [], "value_format": {"type": "number", "thousands_separator": true, "decimal_places": 2, "prefix": "", "suffix": "", "date_format": ""}}, "custom": [{"conditions": [{"condition_type": "column", "dimension_name": "columns", "filter_type": "equal", "values": ["sku"], "apply_to": "values"}], "cell_properties": {"style": {}, "conditional_format": [], "value_format": {"type": "number", "thousands_separator": true, "decimal_places": 0, "prefix": "", "suffix": "", "date_format": ""}}}]}, "applied_hierarchies": {}, "hide_id_column": true}, "alternative_properties": null, "filters": {}, "cell_properties": [{"cell_properties": {"style": {"background-color": "#676A46"}, "conditional_format": [], "readOnly": true}, "apply_to": "all", "column": "tipo", "values": ["planeada", "diferencia"]}]}, "prefixIdentifier": null, "_isNodeCircular": false}]}